{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\Chatpage.js\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect, useRef } from 'react';\n// // // import { useNavigate, useParams } from 'react-router-dom';\n// // // import { io } from 'socket.io-client';\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// // // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// // // import 'webrtc-adapter';\n\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // const ChatPage = () => {\n// // //     const [messages, setMessages] = useState([]);\n// // //     const [messageText, setMessageText] = useState('');\n// // //     const [reactions, setReactions] = useState({});\n// // //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n// // //     const messageEndRef = useRef(null);\n// // //     const navigate = useNavigate();\n// // //     const { receiverId } = useParams();\n\n// // //     const userId = localStorage.getItem('userId');\n// // //     const storedToUserId = localStorage.getItem('touserId');\n// // //     const [localStream, setLocalStream] = useState(null);\n// // //     const [remoteStream, setRemoteStream] = useState(null);\n// // //     const [peerConnection, setPeerConnection] = useState(null);\n// // //     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n\n// // //     const formatTimestamp = (timestamp) => {\n// // //         const messageDate = new Date(timestamp);\n// // //         const today = new Date();\n// // //         const options = { year: 'numeric', month: 'short', day: 'numeric' };\n\n// // //         if (\n// // //             messageDate.getFullYear() === today.getFullYear() &&\n// // //             messageDate.getMonth() === today.getMonth() &&\n// // //             messageDate.getDate() === today.getDate()\n// // //         ) {\n// // //             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n// // //         } else {\n// // //             return messageDate.toLocaleDateString(undefined, options);\n// // //         }\n// // //     };\n\n// // //     useEffect(() => {\n// // //         if (!receiverId) return;\n\n// // //         socket.on('connect', () => {\n// // //             console.log('Connected to socket server');\n// // //         });\n\n// // //         socket.on('disconnect', () => {\n// // //             console.log('Disconnected from socket server');\n// // //         });\n\n// // //         const fetchMessages = async () => {\n// // //             const receiverId = localStorage.getItem('userId');\n// // //             const senderId = localStorage.getItem('touserId');\n// // //             try {\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // //                 const result = await response.json();\n// // //                 if (Array.isArray(result.messages)) {\n// // //                     setMessages(result.messages);\n// // //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n// // //                 } else {\n// // //                     throw new Error('Unexpected response format');\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('Failed to fetch messages:', error);\n// // //             }\n// // //         };\n\n// // //         const fetchReactions = async (messageIds) => {\n// // //             try {\n// // //                 const response = await fetch('http://localhost:3001/getReactions', {\n// // //                     method: 'POST',\n// // //                     headers: {\n// // //                         'Content-Type': 'application/json',\n// // //                     },\n// // //                     body: JSON.stringify({ messageIds }),\n// // //                 });\n// // //                 const result = await response.json();\n// // //                 setReactions(result.reactions);\n// // //             } catch (error) {\n// // //                 console.error('Failed to fetch reactions:', error);\n// // //             }\n// // //         };\n\n// // //         fetchMessages();\n\n// // //         socket.emit('joinRoom', receiverId);\n\n// // //         socket.on('message', (message) => {\n// // //             console.log('Received message:', message);\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // //         });\n\n// // //         socket.on('messageDeleted', (messageId) => {\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // //         });\n\n// // //         socket.on('reaction', (reaction) => {\n// // //             setReactions((prevReactions) => {\n// // //                 const updatedReactions = { ...prevReactions };\n// // //                 if (!updatedReactions[reaction.messageId]) {\n// // //                     updatedReactions[reaction.messageId] = [];\n// // //                 }\n// // //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n// // //                     (r) => r.userId !== reaction.userId\n// // //                 );\n// // //                 updatedReactions[reaction.messageId].push(reaction);\n// // //                 return updatedReactions;\n// // //             });\n// // //         });\n\n// // //             socket.on('callOffer', async (offer) => {\n// // //                 if (peerConnection) {\n// // //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n// // //                     const answer = await peerConnection.createAnswer();\n// // //                     await peerConnection.setLocalDescription(answer);\n// // //                     socket.emit('callAnswer', { answer, to: receiverId });\n// // //                     setIsCallActive(true);\n// // //                 }\n// // //             });\n\n// // //             // Handle incoming answer\n// // //             socket.on('callAnswer', async (answer) => {\n// // //                 if (peerConnection) {\n// // //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n// // //                 }\n// // //             });\n\n// // //             // Handle incoming ICE candidates\n// // //             socket.on('iceCandidate', async (candidate) => {\n// // //                 if (peerConnection) {\n// // //                     try {\n// // //                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n// // //                     } catch (error) {\n// // //                         console.error('Error adding ICE candidate:', error);\n// // //                     }\n// // //                 }\n// // //             });\n// // //         // };\n\n// // //         // setupWebRTC();\n\n// // //         return () => {\n// // //             socket.off('connect');\n// // //             socket.off('disconnect');\n// // //             socket.off('message');\n// // //             socket.off('messageDeleted');\n// // //             socket.off('reaction');\n// // //             socket.off('callOffer');\n// // //             socket.off('callAnswer');\n// // //             socket.off('iceCandidate');\n// // //             if (peerConnection) {\n// // //                 peerConnection.close();\n// // //             }\n// // //             if (localStream) {\n// // //                 localStream.getTracks().forEach(track => track.stop());\n// // //             }\n// // //         };\n// // //     }, [receiverId, userId, peerConnection, localStream]);\n\n// // //     const setupWebRTC = async () => {\n// // //         const pc = new RTCPeerConnection();\n\n// // //         // Handle incoming remote stream\n// // //         pc.ontrack = (event) => {\n// // //             setRemoteStream(event.streams[0]);\n// // //         };\n\n// // //         // Handle ICE candidates\n// // //         pc.onicecandidate = (event) => {\n// // //             if (event.candidate) {\n// // //                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\n// // //             }\n// // //         };\n\n// // //         // Get local media\n// // //         try {\n// // //             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n// // //             setLocalStream(stream);\n// // //             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n// // //         } catch (error) {\n// // //             console.error('Error getting local media:', error);\n// // //         }\n\n// // //         setPeerConnection(pc);\n// // //     };\n\n// // //     const handleSendMessage = async () => {\n// // //         if (messageText.trim()) {\n// // //             try {\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // //                     method: 'POST',\n// // //                     headers: {\n// // //                         'Content-Type': 'application/json',\n// // //                     },\n// // //                     body: JSON.stringify({\n// // //                         senderId: userId,\n// // //                         receiverId: storedToUserId,\n// // //                         text: messageText,\n// // //                     }),\n// // //                 });\n// // //                 const result = await response.json();\n// // //                 if (response.ok) {\n// // //                     setMessageText(''); // Clear the input box\n// // //                 } else {\n// // //                     console.error('SendMessage Error:', result.message);\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('SendMessage Fetch Error:', error);\n// // //             }\n// // //         }\n// // //     };\n\n// // //     const handleDeleteMessage = async (messageId) => {\n// // //         try {\n// // //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// // //                 method: 'POST',\n// // //                 headers: {\n// // //                     'Content-Type': 'application/json',\n// // //                 },\n// // //                 body: JSON.stringify({ messageId }),\n// // //             });\n// // //             const result = await response.json();\n// // //             if (response.ok) {\n// // //                 // Optionally, you can provide user feedback here\n// // //             } else {\n// // //                 console.error('DeleteMessage Error:', result.message);\n// // //             }\n// // //         } catch (error) {\n// // //             console.error('DeleteMessage Fetch Error:', error);\n// // //         }\n// // //     };\n\n// // //     const handleAddReaction = async (messageId, reactionType) => {\n// // //         try {\n// // //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n// // //                 method: 'POST',\n// // //                 headers: {\n// // //                     'Content-Type': 'application/json',\n// // //                 },\n// // //                 body: JSON.stringify({ messageId, userId, reactionType }),\n// // //             });\n\n// // //             if (response.ok) {\n// // //                 const result = await response.json();\n// // //                 console.log('Reaction added successfully:', result);\n// // //             } else {\n// // //                 const errorText = await response.text();\n// // //                 console.error('AddReaction Error:', errorText);\n// // //             }\n// // //         } catch (error) {\n// // //             console.error('AddReaction Fetch Error:', error);\n// // //         }\n// // //     };\n\n// // //     const isMessageDeletable = (createdAt) => {\n// // //         const messageTime = new Date(createdAt);\n// // //         const currentTime = new Date();\n// // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// // //         return diffMinutes <= 2;\n// // //     };\n\n// // //     const handleBack = () => {\n// // //         navigate('/home');\n// // //     };\n\n// // //     const handleCallUser = async (callType) => {\n// // //         console.log('Calling user:', receiverId, 'Type:', callType);\n\n// // //         if (!peerConnection || peerConnection.signalingState === 'closed') {\n// // //             await setupWebRTC(); // Set up WebRTC and get local media stream\n// // //         }\n\n// // //         if (peerConnection) {\n// // //             try {\n// // //                 const offer = await peerConnection.createOffer();\n// // //                 await peerConnection.setLocalDescription(offer);\n// // //                 socket.emit('callOffer', { offer, to: receiverId });\n// // //                 setIsCallActive(true);\n// // //             } catch (error) {\n// // //                 console.error('Error creating offer:', error);\n// // //             }\n// // //         }\n// // //     };\n\n// // //     const handleEndCall = () => {\n// // //         if (peerConnection) {\n// // //             peerConnection.close();\n// // //             setPeerConnection(null);\n// // //         }\n// // //         if (localStream) {\n// // //             localStream.getTracks().forEach(track => track.stop());\n// // //             setLocalStream(null);\n// // //         }\n// // //         if (remoteStream) {\n// // //             setRemoteStream(null);\n// // //         }\n// // //         setIsCallActive(false);\n// // //     socket.emit('callEnd', { to: receiverId });\n// // //         // socket.emit('callEnd', { to: receiverId });\n// // //     };\n\n// // //     return (\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // //             <div className=\"flex items-center mb-4\">\n// // //                 <img\n// // //                     src={defaultAvatar}\n// // //                     alt=\"Avatar\"\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // //                 />\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // //             </div>\n\n// // //             <button\n// // //                 onClick={handleBack}\n// // //                 type=\"button\"\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // //             >\n// // //                 <div\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // //                 >\n// // //                     <svg\n// // //                         width=\"25px\"\n// // //                         height=\"25px\"\n// // //                         viewBox=\"0 0 1024 1024\"\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // //                     >\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // //                         ></path>\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // //                         ></path>\n// // //                     </svg>\n// // //                 </div>\n// // //                 <p className=\"translate-x-2\">Go Back</p>\n// // //             </button>\n\n// // //             <div className=\"flex justify-end mb-4\">\n// // //                 <button\n// // //                     onClick={() => handleCallUser('voice')}\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // //                 >\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //                 <button\n// // //                     onClick={() => handleCallUser('video')}\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // //                 >\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //                 {isCallActive && (\n// // //         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\n// // //             End Call\n// // //         </button>\n// // //     )}\n// // //             </div>\n\n// // //             {localStream && (\n// // //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n// // //                     <video\n// // //                         autoPlay\n// // //                         muted\n// // //                         ref={(video) => {\n// // //                             if (video) {\n// // //                                 video.srcObject = localStream;\n// // //                             }\n// // //                         }}\n// // //                         className=\"w-full h-full object-cover\"\n// // //                     />\n// // //                 </div>\n// // //             )}\n\n// // // {remoteStream && (\n// // //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n// // //                     <video\n// // //                         autoPlay\n// // //                         ref={(video) => {\n// // //                             if (video) {\n// // //                                 video.srcObject = remoteStream;\n// // //                             }\n// // //                         }}\n// // //                         className=\"w-full h-full object-cover\"\n// // //                     />\n// // //                 </div>\n// // //             )}\n\n// // //             <div className=\"flex flex-col flex-grow\">\n// // //                 {/* Fixed Size Message Container */}\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// // //                     <div className=\"flex flex-col gap-2\">\n// // //                         {messages.length > 0 ? (\n// // //                             messages.map((message) => (\n// // //                                 <div\n// // //                                     key={message.id}\n// // //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n// // //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n// // //                                     onMouseLeave={() => setHoveredMessageId(null)}\n// // //                                 >\n// // //                                     {/* <div className=\"text-sm\">{message.content}</div> */}\n// // //                                     <p>{message.content}</p>\n// // //                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\n// // //                                     {hoveredMessageId === message.id && (\n// // //                                         <div className=\"absolute bottom-0 right-2 flex space-x-1\">\n// // //                                             {['👍', '❤️', '😂'].map((reaction) => (\n// // //                                                 <button\n// // //                                                     key={reaction}\n// // //                                                     onClick={() => handleAddReaction(message.id, reaction)}\n// // //                                                     className=\"text-xl\"\n// // //                                                 >\n// // //                                                     {reaction}\n// // //                                                 </button>\n// // //                                             ))}\n// // //                                         </div>\n// // //                                     )}\n// // //                                     <div className=\"flex space-x-2\">\n// // //                                         {reactions[message.id]?.map((reaction, index) => (\n// // //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n// // //                                         ))}\n// // //                                     </div>\n// // //                                     {isMessageDeletable(message.created_at) && (\n// // //                                         <button\n// // //                                             onClick={() => {\n// // //                                                 handleDeleteMessage(message.id);\n// // //                                                 setMessages((prevMessages) =>\n// // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// // //                                                 );\n// // //                                             }}\n// // //                                             className=\"text-red-500 absolute top-0 right-2\"\n// // //                                         >\n// // //                                             Delete\n// // //                                         </button>\n// // //                                     )}\n// // //                                 </div>\n// // //                             ))\n// // //                         ) : (\n// // //                             <p>No messages yet.</p>\n// // //                         )}\n// // //                         <div ref={messageEndRef} />\n// // //                     </div>\n// // //                 </div>\n\n// // //                 <div className=\"flex mt-4\">\n// // //                     <input\n// // //                         type=\"text\"\n// // //                         value={messageText}\n// // //                         onChange={(e) => setMessageText(e.target.value)}\n// // //                         placeholder=\"Type your message...\"\n// // //                         className=\"w-full px-3 py-2 border rounded\"\n// // //                     />\n// // //                     <button\n// // //                         onClick={() => {\n// // //                             handleSendMessage();\n// // //                             setMessages((prevMessages) => [\n// // //                                 ...prevMessages,\n// // //                                 {\n// // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// // //                                     content: messageText,\n// // //                                     from_user_id: userId,\n// // //                                     created_at: new Date().toISOString(),\n// // //                                 },\n// // //                             ]);\n// // //                         }}\n// // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// // //                     >\n// // //                         Send\n// // //                         <svg\n// // //                             className=\"w-5 h-5\"\n// // //                             stroke=\"currentColor\"\n// // //                             strokeWidth=\"1.5\"\n// // //                             viewBox=\"0 0 24 24\"\n// // //                             fill=\"none\"\n// // //                             xmlns=\"http://www.w3.org/2000/svg\"\n// // //                         >\n// // //                             <path\n// // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// // //                                 strokeLinejoin=\"round\"\n// // //                                 strokeLinecap=\"round\"\n// // //                             ></path>\n// // //                         </svg>\n// // //                     </button>\n// // //                 </div>\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default ChatPage;\n\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { useNavigate, useParams } from 'react-router-dom';\n// // import { io } from 'socket.io-client';\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// // import 'webrtc-adapter';\n\n// // // const handleStartCall = () => {\n// // //     navigate('/video-call');\n// // // };\n\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // const ChatPage = () => {\n// //     const [messages, setMessages] = useState([]);\n// //     const [messageText, setMessageText] = useState('');\n// //     const [reactions, setReactions] = useState({});\n// //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n// //     const messageEndRef = useRef(null);\n// //     const navigate = useNavigate();\n// //     const { receiverId } = useParams();\n\n// //     const userId = localStorage.getItem('userId');\n// //     const storedToUserId = localStorage.getItem('touserId');\n// //     const [localStream, setLocalStream] = useState(null);\n// //     const [remoteStream, setRemoteStream] = useState(null);\n// //     const [peerConnection, setPeerConnection] = useState(null);\n// //     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n\n// //     const formatTimestamp = (timestamp) => {\n// //         const messageDate = new Date(timestamp);\n// //         const today = new Date();\n// //         const options = { year: 'numeric', month: 'short', day: 'numeric' };\n\n// //         if (\n// //             messageDate.getFullYear() === today.getFullYear() &&\n// //             messageDate.getMonth() === today.getMonth() &&\n// //             messageDate.getDate() === today.getDate()\n// //         ) {\n// //             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n// //         } else {\n// //             return messageDate.toLocaleDateString(undefined, options);\n// //         }\n// //     };\n\n// //     useEffect(() => {\n// //         if (!receiverId) return;\n\n// //         socket.on('connect', () => {\n// //             console.log('Connected to socket server');\n// //         });\n\n// //         socket.on('disconnect', () => {\n// //             console.log('Disconnected from socket server');\n// //         });\n\n// //         const fetchMessages = async () => {\n// //             const receiverId = localStorage.getItem('userId');\n// //             const senderId = localStorage.getItem('touserId');\n// //             try {\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// //                 const result = await response.json();\n// //                 if (Array.isArray(result.messages)) {\n// //                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n// //                     setMessages(sortedMessages);\n// //                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\n// //                 } else {\n// //                     throw new Error('Unexpected response format');\n// //                 }\n// //             } catch (error) {\n// //                 console.error('Failed to fetch messages:', error);\n// //             }\n// //         };\n\n// //         const fetchReactions = async (messageIds) => {\n// //             try {\n// //                 const response = await fetch('http://localhost:3001/getReactions', {\n// //                     method: 'POST',\n// //                     headers: {\n// //                         'Content-Type': 'application/json',\n// //                     },\n// //                     body: JSON.stringify({ messageIds }),\n// //                 });\n// //                 const result = await response.json();\n// //                 setReactions(result.reactions);\n// //             } catch (error) {\n// //                 console.error('Failed to fetch reactions:', error);\n// //             }\n// //         };\n\n// //         fetchMessages();\n\n// //         socket.emit('joinRoom', receiverId);\n\n// //         socket.on('message', (message) => {\n// //             console.log('Received message:', message);\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //         });\n\n// //         socket.on('messageDeleted', (messageId) => {\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// //         });\n\n// //         socket.on('reaction', (reaction) => {\n// //             setReactions((prevReactions) => {\n// //                 const updatedReactions = { ...prevReactions };\n// //                 if (!updatedReactions[reaction.messageId]) {\n// //                     updatedReactions[reaction.messageId] = [];\n// //                 }\n// //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n// //                     (r) => r.userId !== reaction.userId\n// //                 );\n// //                 updatedReactions[reaction.messageId].push(reaction);\n// //                 return updatedReactions;\n// //             });\n// //         });\n\n// //             socket.on('callOffer', async (offer) => {\n// //                 if (peerConnection) {\n// //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n// //                     const answer = await peerConnection.createAnswer();\n// //                     await peerConnection.setLocalDescription(answer);\n// //                     socket.emit('callAnswer', { answer, to: receiverId });\n// //                     setIsCallActive(true);\n// //                 }\n// //             });\n\n// //             // Handle incoming answer\n// //             socket.on('callAnswer', async (answer) => {\n// //                 if (peerConnection) {\n// //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n// //                 }\n// //             });\n\n// //             // Handle incoming ICE candidates\n// //             socket.on('iceCandidate', async (candidate) => {\n// //                 if (peerConnection) {\n// //                     try {\n// //                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n// //                     } catch (error) {\n// //                         console.error('Error adding ICE candidate:', error);\n// //                     }\n// //                 }\n// //             });\n// //         // };\n\n// //         // setupWebRTC();\n\n// //         return () => {\n// //             socket.off('connect');\n// //             socket.off('disconnect');\n// //             socket.off('message');\n// //             socket.off('messageDeleted');\n// //             socket.off('reaction');\n// //             socket.off('callOffer');\n// //             socket.off('callAnswer');\n// //             socket.off('iceCandidate');\n// //             if (peerConnection) {\n// //                 peerConnection.close();\n// //             }\n// //             if (localStream) {\n// //                 localStream.getTracks().forEach(track => track.stop());\n// //             }\n// //         };\n// //     }, [receiverId, userId, peerConnection, localStream]);\n\n// //     const setupWebRTC = async () => {\n// //         const pc = new RTCPeerConnection();\n\n// //         // Handle incoming remote stream\n// //         pc.ontrack = (event) => {\n// //             setRemoteStream(event.streams[0]);\n// //         };\n\n// //         // Handle ICE candidates\n// //         pc.onicecandidate = (event) => {\n// //             if (event.candidate) {\n// //                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\n// //             }\n// //         };\n\n// //         // Get local media\n// //         try {\n// //             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n// //             setLocalStream(stream);\n// //             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n// //         } catch (error) {\n// //             console.error('Error getting local media:', error);\n// //         }\n\n// //         setPeerConnection(pc);\n// //     };\n\n// //     const handleSendMessage = async () => {\n// //         if (messageText.trim()) {\n// //             try {\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// //                     method: 'POST',\n// //                     headers: {\n// //                         'Content-Type': 'application/json',\n// //                     },\n// //                     body: JSON.stringify({\n// //                         senderId: userId,\n// //                         receiverId: storedToUserId,\n// //                         text: messageText,\n// //                     }),\n// //                 });\n// //                 const result = await response.json();\n// //                 if (response.ok) {\n// //                     setMessageText(''); // Clear the input box\n// //                 } else {\n// //                     console.error('SendMessage Error:', result.message);\n// //                 }\n// //             } catch (error) {\n// //                 console.error('SendMessage Fetch Error:', error);\n// //             }\n// //         }\n// //     };\n\n// //     // const handleDeleteMessage = async (messageId) => {\n// //     //     try {\n// //     //         const response = await fetch('http://localhost:3001/deleteMessage', {\n// //     //             method: 'POST',\n// //     //             headers: {\n// //     //                 'Content-Type': 'application/json',\n// //     //             },\n// //     //             body: JSON.stringify({ messageId }),\n// //     //         });\n// //     //         const result = await response.json();\n// //     //         if (response.ok) {\n// //     //             // Optionally, you can provide user feedback here\n// //     //         } else {\n// //     //             console.error('DeleteMessage Error:', result.message);\n// //     //         }\n// //     //     } catch (error) {\n// //     //         console.error('DeleteMessage Fetch Error:', error);\n// //     //     }\n// //     // };\n\n// //     const handleDeleteMessage = async (messageId) => {\n// //         try {\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// //                 method: 'POST',\n// //                 headers: {\n// //                     'Content-Type': 'application/json',\n// //                 },\n// //                 body: JSON.stringify({ messageId }),\n// //             });\n\n// //             const result = await response.json();\n// //             if (response.ok) {\n// //                 console.log('DeleteMessage success:', result);\n// //                 // Optionally update UI here if needed\n// //             } else {\n// //                 console.error('DeleteMessage Error:', result.message);\n// //             }\n// //         } catch (error) {\n// //             console.error('DeleteMessage Fetch Error:', error);\n// //         }\n// //     };\n\n// //     const handleAddReaction = async (messageId, reactionType) => {\n// //         try {\n// //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n// //                 method: 'POST',\n// //                 headers: {\n// //                     'Content-Type': 'application/json',\n// //                 },\n// //                 body: JSON.stringify({ messageId, userId, reactionType }),\n// //             });\n\n// //             if (response.ok) {\n// //                 const result = await response.json();\n// //                 console.log('Reaction added successfully:', result);\n// //             } else {\n// //                 const errorText = await response.text();\n// //                 console.error('AddReaction Error:', errorText);\n// //             }\n// //         } catch (error) {\n// //             console.error('AddReaction Fetch Error:', error);\n// //         }\n// //     };\n\n// //     const isMessageDeletable = (createdAt) => {\n// //         const messageTime = new Date(createdAt);\n// //         const currentTime = new Date();\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// //         return diffMinutes <= 2;\n// //     };\n\n// //     const handleBack = () => {\n// //         navigate('/home');\n// //     };\n\n// //     const handleCallUser = async (callType) => {\n// //         console.log('Calling user:', receiverId, 'Type:', callType);\n\n// //         if (!peerConnection || peerConnection.signalingState === 'closed') {\n// //             await setupWebRTC(); // Set up WebRTC and get local media stream\n// //         }\n\n// //         if (peerConnection) {\n// //             try {\n// //                 const offer = await peerConnection.createOffer();\n// //                 await peerConnection.setLocalDescription(offer);\n// //                 socket.emit('callOffer', { offer, to: receiverId });\n// //                 setIsCallActive(true);\n// //             } catch (error) {\n// //                 console.error('Error creating offer:', error);\n// //             }\n// //         }\n// //     };\n\n// //     const handleEndCall = () => {\n// //         if (peerConnection) {\n// //             peerConnection.close();\n// //             setPeerConnection(null);\n// //         }\n// //         if (localStream) {\n// //             localStream.getTracks().forEach(track => track.stop());\n// //             setLocalStream(null);\n// //         }\n// //         if (remoteStream) {\n// //             setRemoteStream(null);\n// //         }\n// //         setIsCallActive(false);\n// //     socket.emit('callEnd', { to: receiverId });\n// //         // socket.emit('callEnd', { to: receiverId });\n// //     };\n\n// //     return (\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// //             <div className=\"flex items-center mb-4\">\n// //                 <img\n// //                     src={defaultAvatar}\n// //                     alt=\"Avatar\"\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// //                 />\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// //             </div>\n\n// //             <button\n// //                 onClick={handleBack}\n// //                 type=\"button\"\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// //             >\n// //                 <div\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// //                 >\n// //                     <svg\n// //                         width=\"25px\"\n// //                         height=\"25px\"\n// //                         viewBox=\"0 0 1024 1024\"\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\n// //                     >\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// //                         ></path>\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// //                         ></path>\n// //                     </svg>\n// //                 </div>\n// //                 <p className=\"translate-x-2\">Go Back</p>\n// //             </button>\n\n// //             <div className=\"flex justify-end mb-4\">\n// //                 <button\n// //                     onClick={() => handleCallUser('voice')}\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// //                 >\n// //                     <PhoneIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //                 <button\n// //                     onClick={() => handleCallUser('video')}\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// //                 >\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //                 {isCallActive && (\n// //         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\n// //             End Call\n// //         </button>\n// //     )}\n// //             </div>\n\n// //             {localStream && (\n// //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n// //                     <video\n// //                         autoPlay\n// //                         muted\n// //                         ref={(video) => {\n// //                             if (video) {\n// //                                 video.srcObject = localStream;\n// //                             }\n// //                         }}\n// //                         className=\"w-full h-full object-cover\"\n// //                     />\n// //                 </div>\n// //             )}\n\n// // {remoteStream && (\n// //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n// //                     <video\n// //                         autoPlay\n// //                         ref={(video) => {\n// //                             if (video) {\n// //                                 video.srcObject = remoteStream;\n// //                             }\n// //                         }}\n// //                         className=\"w-full h-full object-cover\"\n// //                     />\n// //                 </div>\n// //             )}\n\n// //             <div className=\"flex flex-col flex-grow\">\n// //                 {/* Fixed Size Message Container */}\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// //                     <div className=\"flex flex-col gap-2\">\n// //                         {messages.length > 0 ? (\n// //                             messages.map((message) => (\n// //                                 <div\n// //                                     key={message.id}\n// //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n// //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n// //                                     onMouseLeave={() => setHoveredMessageId(null)}\n// //                                 >\n// //                                     {/* <div className=\"text-sm\">{message.content}</div> */}\n// //                                     <p>{message.content}</p>\n// //                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\n// //                                     {hoveredMessageId === message.id && (\n// //                                         <div className=\"absolute bottom-0 right-2 flex space-x-1\">\n// //                                             {['👍', '❤️', '😂'].map((reaction) => (\n// //                                                 <button\n// //                                                     key={reaction}\n// //                                                     onClick={() => handleAddReaction(message.id, reaction)}\n// //                                                     className=\"text-xl\"\n// //                                                 >\n// //                                                     {reaction}\n// //                                                 </button>\n// //                                             ))}\n// //                                         </div>\n// //                                     )}\n// //                                     <div className=\"flex space-x-2\">\n// //                                         {reactions[message.id]?.map((reaction, index) => (\n// //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n// //                                         ))}\n// //                                     </div>\n// //                                     {isMessageDeletable(message.created_at) && (\n// //                                         <button\n// //                                              className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\n// //                                             onClick={() => {\n// //                                                 handleDeleteMessage(message.id);\n// //                                                 setMessages((prevMessages) =>\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// //                                                 );\n// //                                             }}\n// //                                             // className=\"text-red-500 absolute top-0 right-2\"\n// //                                         >\n// //                                             Delete\n// //                                         </button>\n// //                                     )}\n\n// //                                 {/* {message.from_user_id === userId && (\n// //                                 <button\n// //                                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\n// //                                     onClick={() => handleDeleteMessage(message.id)}\n// //                                 >\n// //                                     Delete\n// //                                 </button>\n// //                             )} */}\n// //                                 </div>\n// //                             ))\n// //                         ) : (\n// //                             <p>No messages yet.</p>\n// //                         )}\n// //                         <div ref={messageEndRef} />\n// //                     </div>\n// //                 </div>\n\n// //                 <div className=\"flex mt-4\">\n// //                     <input\n// //                         type=\"text\"\n// //                         value={messageText}\n// //                         onChange={(e) => setMessageText(e.target.value)}\n// //                         placeholder=\"Type your message...\"\n// //                         className=\"w-full px-3 py-2 border rounded\"\n// //                     />\n// //                     <button\n// //                         onClick={() => {\n// //                             handleSendMessage();\n// //                             setMessages((prevMessages) => [\n// //                                 ...prevMessages,\n// //                                 {\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// //                                     content: messageText,\n// //                                     from_user_id: userId,\n// //                                     created_at: new Date().toISOString(),\n// //                                 },\n// //                             ]);\n// //                         }}\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// //                     >\n// //                         Send\n// //                         <svg\n// //                             className=\"w-5 h-5\"\n// //                             stroke=\"currentColor\"\n// //                             strokeWidth=\"1.5\"\n// //                             viewBox=\"0 0 24 24\"\n// //                             fill=\"none\"\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\n// //                         >\n// //                             <path\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// //                                 strokeLinejoin=\"round\"\n// //                                 strokeLinecap=\"round\"\n// //                             ></path>\n// //                         </svg>\n// //                     </button>\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default ChatPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { io } from 'socket.io-client';\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// import 'webrtc-adapter';\n\n// // const handleStartCall = () => {\n// //     navigate('/video-call');\n// // };\n\n// const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// const ChatPage = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [messageText, setMessageText] = useState('');\n//     const [reactions, setReactions] = useState({});\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n//     const messageEndRef = useRef(null);\n//     const navigate = useNavigate();\n//     const { receiverId } = useParams();\n\n//     const userId = localStorage.getItem('userId');\n//     const storedToUserId = localStorage.getItem('touserId');\n//     const [localStream, setLocalStream] = useState(null);\n//     const [remoteStream, setRemoteStream] = useState(null);\n//     const [peerConnection, setPeerConnection] = useState(null);\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n\n//     const formatTimestamp = (timestamp) => {\n//         const messageDate = new Date(timestamp);\n//         const today = new Date();\n//         const options = { year: 'numeric', month: 'short', day: 'numeric' };\n\n//         if (\n//             messageDate.getFullYear() === today.getFullYear() &&\n//             messageDate.getMonth() === today.getMonth() &&\n//             messageDate.getDate() === today.getDate()\n//         ) {\n//             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//         } else {\n//             return messageDate.toLocaleDateString(undefined, options);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (!receiverId) return;\n\n//         socket.on('connect', () => {\n//             console.log('Connected to socket server');\n//         });\n\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from socket server');\n//         });\n\n//         const fetchMessages = async () => {\n//             const receiverId = localStorage.getItem('userId');\n//             const senderId = localStorage.getItem('touserId');\n//             try {\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n//                 const result = await response.json();\n//                 if (Array.isArray(result.messages)) {\n//                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n//                     setMessages(sortedMessages);\n//                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\n//                 } else {\n//                     throw new Error('Unexpected response format');\n//                 }\n//             } catch (error) {\n//                 console.error('Failed to fetch messages:', error);\n//             }\n//         };\n\n//         const fetchReactions = async (messageIds) => {\n//             try {\n//                 const response = await fetch('http://localhost:3001/getReactions', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({ messageIds }),\n//                 });\n//                 const result = await response.json();\n//                 setReactions(result.reactions);\n//             } catch (error) {\n//                 console.error('Failed to fetch reactions:', error);\n//             }\n//         };\n\n//         fetchMessages();\n\n//         socket.emit('joinRoom', receiverId);\n\n//         socket.on('message', (message) => {\n//             console.log('Received message:', message);\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//         });\n\n//         socket.on('messageDeleted', (messageId) => {\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n//         });\n\n//         socket.on('reaction', (reaction) => {\n//             setReactions((prevReactions) => {\n//                 const updatedReactions = { ...prevReactions };\n//                 if (!updatedReactions[reaction.messageId]) {\n//                     updatedReactions[reaction.messageId] = [];\n//                 }\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n//                     (r) => r.userId !== reaction.userId\n//                 );\n//                 updatedReactions[reaction.messageId].push(reaction);\n//                 return updatedReactions;\n//             });\n//         });\n\n//             socket.on('callOffer', async (offer) => {\n//                 if (peerConnection) {\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n//                     const answer = await peerConnection.createAnswer();\n//                     await peerConnection.setLocalDescription(answer);\n//                     socket.emit('callAnswer', { answer, to: receiverId });\n//                     setIsCallActive(true);\n//                 }\n//             });\n\n//             // Handle incoming answer\n//             socket.on('callAnswer', async (answer) => {\n//                 if (peerConnection) {\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n//                 }\n//             });\n\n//             // Handle incoming ICE candidates\n//             socket.on('iceCandidate', async (candidate) => {\n//                 if (peerConnection) {\n//                     try {\n//                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n//                     } catch (error) {\n//                         console.error('Error adding ICE candidate:', error);\n//                     }\n//                 }\n//             });\n//         // };\n\n//         // setupWebRTC();\n\n//         return () => {\n//             socket.off('connect');\n//             socket.off('disconnect');\n//             socket.off('message');\n//             socket.off('messageDeleted');\n//             socket.off('reaction');\n//             socket.off('callOffer');\n//             socket.off('callAnswer');\n//             socket.off('iceCandidate');\n//             if (peerConnection) {\n//                 peerConnection.close();\n//             }\n//             if (localStream) {\n//                 localStream.getTracks().forEach(track => track.stop());\n//             }\n//         };\n//     }, [receiverId, userId, peerConnection, localStream]);\n\n//     const setupWebRTC = async () => {\n//         const pc = new RTCPeerConnection();\n\n//         // Handle incoming remote stream\n//         pc.ontrack = (event) => {\n//             setRemoteStream(event.streams[0]);\n//         };\n\n//         // Handle ICE candidates\n//         pc.onicecandidate = (event) => {\n//             if (event.candidate) {\n//                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\n//             }\n//         };\n\n//         // Get local media\n//         try {\n//             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n//             setLocalStream(stream);\n//             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n//         } catch (error) {\n//             console.error('Error getting local media:', error);\n//         }\n\n//         setPeerConnection(pc);\n//     };\n\n//     const handleSendMessage = async () => {\n//         if (messageText.trim()) {\n//             try {\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({\n//                         senderId: userId,\n//                         receiverId: storedToUserId,\n//                         text: messageText,\n//                     }),\n//                 });\n//                 const result = await response.json();\n//                 if (response.ok) {\n//                     setMessageText(''); // Clear the input box\n//                 } else {\n//                     console.error('SendMessage Error:', result.message);\n//                 }\n//             } catch (error) {\n//                 console.error('SendMessage Fetch Error:', error);\n//             }\n//         }\n//     };\n\n//     // const handleDeleteMessage = async (messageId) => {\n//     //     try {\n//     //         const response = await fetch('http://localhost:3001/deleteMessage', {\n//     //             method: 'POST',\n//     //             headers: {\n//     //                 'Content-Type': 'application/json',\n//     //             },\n//     //             body: JSON.stringify({ messageId }),\n//     //         });\n//     //         const result = await response.json();\n//     //         if (response.ok) {\n//     //             // Optionally, you can provide user feedback here\n//     //         } else {\n//     //             console.error('DeleteMessage Error:', result.message);\n//     //         }\n//     //     } catch (error) {\n//     //         console.error('DeleteMessage Fetch Error:', error);\n//     //     }\n//     // };\n\n//     const handleDeleteMessage = async (messageId) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId }),\n//             });\n\n//             const result = await response.json();\n//             if (response.ok) {\n//                 console.log('DeleteMessage success:', result);\n//                 // Optionally update UI here if needed\n//             } else {\n//                 console.error('DeleteMessage Error:', result.message);\n//             }\n//         } catch (error) {\n//             console.error('DeleteMessage Fetch Error:', error);\n//         }\n//     };\n\n//     const handleAddReaction = async (messageId, reactionType) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\n//             });\n\n//             if (response.ok) {\n//                 const result = await response.json();\n//                 console.log('Reaction added successfully:', result);\n//             } else {\n//                 const errorText = await response.text();\n//                 console.error('AddReaction Error:', errorText);\n//             }\n//         } catch (error) {\n//             console.error('AddReaction Fetch Error:', error);\n//         }\n//     };\n\n//     const isMessageDeletable = (createdAt) => {\n//         const messageTime = new Date(createdAt);\n//         const currentTime = new Date();\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n//         return diffMinutes <= 2;\n//     };\n\n//     const handleBack = () => {\n//         navigate('/home');\n//     };\n\n//     const handleCallUser = async (callType) => {\n//         console.log('Calling user:', receiverId, 'Type:', callType);\n\n//         if (!peerConnection || peerConnection.signalingState === 'closed') {\n//             await setupWebRTC(); // Set up WebRTC and get local media stream\n//         }\n\n//         if (peerConnection) {\n//             try {\n//                 const offer = await peerConnection.createOffer();\n//                 await peerConnection.setLocalDescription(offer);\n//                 socket.emit('callOffer', { offer, to: receiverId });\n//                 setIsCallActive(true);\n//             } catch (error) {\n//                 console.error('Error creating offer:', error);\n//             }\n//         }\n//     };\n\n//     const handleEndCall = () => {\n//         if (peerConnection) {\n//             peerConnection.close();\n//             setPeerConnection(null);\n//         }\n//         if (localStream) {\n//             localStream.getTracks().forEach(track => track.stop());\n//             setLocalStream(null);\n//         }\n//         if (remoteStream) {\n//             setRemoteStream(null);\n//         }\n//         setIsCallActive(false);\n//     socket.emit('callEnd', { to: receiverId });\n//         // socket.emit('callEnd', { to: receiverId });\n//     };\n\n//     return (\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n//             <div className=\"flex items-center mb-4\">\n//                 <img\n//                     src={defaultAvatar}\n//                     alt=\"Avatar\"\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n//                 />\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n//             </div>\n\n//             <button\n//                 onClick={handleBack}\n//                 type=\"button\"\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n//             >\n//                 <div\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n//                 >\n//                     <svg\n//                         width=\"25px\"\n//                         height=\"25px\"\n//                         viewBox=\"0 0 1024 1024\"\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                     >\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n//                         ></path>\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n//                         ></path>\n//                     </svg>\n//                 </div>\n//                 <p className=\"translate-x-2\">Go Back</p>\n//             </button>\n\n//             <div className=\"flex justify-end mb-4\">\n//                 <button\n//                     onClick={() => handleCallUser('voice')}\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n//                 >\n//                     <PhoneIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 <button\n//                     onClick={() => handleCallUser('video')}\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n//                 >\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 {isCallActive && (\n//         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\n//             End Call\n//         </button>\n//     )}\n//             </div>\n\n//             {localStream && (\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         muted\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = localStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n// {remoteStream && (\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = remoteStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n//             <div className=\"flex flex-col flex-grow\">\n//                 {/* Fixed Size Message Container */}\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n//                     <div className=\"flex flex-col gap-2\">\n//                         {messages.length > 0 ? (\n//                             messages.map((message) => (\n//                                 <div\n//                                     key={message.id}\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\n//                                 >\n//                                     {/* <div className=\"text-sm\">{message.content}</div> */}\n//                                     <p>{message.content}</p>\n//                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\n//                                     {hoveredMessageId === message.id && (\n//                                         <div className=\"absolute bottom-10 right-0 flex space-x-1\">\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\n//                                                 <button\n//                                                     key={reaction}\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\n//                                                     className=\"text-xl\"\n//                                                 >\n//                                                     {reaction}\n//                                                 </button>\n//                                             ))}\n//                                         </div>\n//                                     )}\n//                                     <div className=\"flex space-x-2\">\n//                                         {reactions[message.id]?.map((reaction, index) => (\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n//                                         ))}\n//                                     </div>\n//                                     {isMessageDeletable(message.created_at) && (\n//                                         <button\n//                                              className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\n//                                             onClick={() => {\n//                                                 handleDeleteMessage(message.id);\n//                                                 setMessages((prevMessages) =>\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\n//                                                 );\n//                                             }}\n//                                             // className=\"text-red-500 absolute top-0 right-2\"\n//                                         >\n//                                             Delete\n//                                         </button>\n//                                     )}\n\n//                                 {/* {message.from_user_id === userId && (\n//                                 <button\n//                                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\n//                                     onClick={() => handleDeleteMessage(message.id)}\n//                                 >\n//                                     Delete\n//                                 </button>\n//                             )} */}\n//                                 </div>\n//                             ))\n//                         ) : (\n//                             <p>No messages yet.</p>\n//                         )}\n//                         <div ref={messageEndRef} />\n//                     </div>\n//                 </div>\n\n//                 <div className=\"flex mt-4\">\n//                     <input\n//                         type=\"text\"\n//                         value={messageText}\n//                         onChange={(e) => setMessageText(e.target.value)}\n//                         placeholder=\"Type your message...\"\n//                         className=\"w-full px-3 py-2 border rounded\"\n//                     />\n//                     <button\n//                         onClick={() => {\n//                             handleSendMessage();\n//                             setMessages((prevMessages) => [\n//                                 ...prevMessages,\n//                                 {\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n//                                     content: messageText,\n//                                     from_user_id: userId,\n//                                     created_at: new Date().toISOString(),\n//                                 },\n//                             ]);\n//                         }}\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n//                     >\n//                         Send\n//                         <svg\n//                             className=\"w-5 h-5\"\n//                             stroke=\"currentColor\"\n//                             strokeWidth=\"1.5\"\n//                             viewBox=\"0 0 24 24\"\n//                             fill=\"none\"\n//                             xmlns=\"http://www.w3.org/2000/svg\"\n//                         >\n//                             <path\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n//                                 strokeLinejoin=\"round\"\n//                                 strokeLinecap=\"round\"\n//                             ></path>\n//                         </svg>\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ChatPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport defaultAvatar from '../assets/user (1).png';\nimport CallPage from '../components/CallPage';\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n//This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\nimport 'webrtc-adapter';\n// import React, { useState } from 'react';\n// import CallPage from '../callPage'\nimport AudioCall from './AudioCall'; // Import AudioCall component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001');\nconst ChatPage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageText, setMessageText] = useState('');\n  const [reactions, setReactions] = useState({});\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const messageEndRef = useRef(null);\n  const navigate = useNavigate();\n  const {\n    receiverId\n  } = useParams();\n  const userId = localStorage.getItem('userId');\n  const storedToUserId = localStorage.getItem('touserId');\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n  // const [isCallActive, setIsCallActive] = useState(false);\n  const [incomingCall, setIncomingCall] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const [showCallPopup, setShowCallPopup] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  // const messageEndRef = useRef(null);\n  // const [socket] = useState(io('http://localhost:3000')); \n  const [showAudioCall, setShowAudioCall] = useState(false);\n  const handleCallButtonClick = userId => {\n    setSelectedUserId(userId);\n    setShowCallPopup(true);\n    console.log(userId);\n  };\n  const handleCloseCallPage = () => {\n    setShowCallPopup(false);\n  };\n  const initiateCall = toUserId => {\n    navigate('/call', {\n      state: {\n        userId: toUserId\n      }\n    });\n  };\n  const formatTimestamp = timestamp => {\n    const messageDate = new Date(timestamp);\n    const today = new Date();\n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n    if (messageDate.getFullYear() === today.getFullYear() && messageDate.getMonth() === today.getMonth() && messageDate.getDate() === today.getDate()) {\n      return messageDate.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      return messageDate.toLocaleDateString(undefined, options);\n    }\n  };\n  useEffect(() => {\n    // const pc = new RTCPeerConnection();\n    // setPeerConnection(pc);\n\n    if (!receiverId) return;\n    socket.on('connect', () => {\n      console.log('Connected to socket server');\n      console.log('Socket connected:', socket.id);\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n      console.log('Socket disconnected');\n    });\n\n    // In chatpage.js\n    socket.on('incomingCall', data => {\n      console.log('Incoming call data:', data);\n      const {\n        offer,\n        from\n      } = data;\n      showNotification(`Incoming call from user: ${from}`);\n      return () => {\n        socket.off('incomingCall');\n      };\n    }, []);\n    const fetchMessages = async () => {\n      const receiverId = localStorage.getItem('userId');\n      const senderId = localStorage.getItem('touserId');\n      try {\n        const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n        const result = await response.json();\n        if (Array.isArray(result.messages)) {\n          const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n          setMessages(sortedMessages);\n          fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\n        } else {\n          throw new Error('Unexpected response format');\n        }\n      } catch (error) {\n        console.error('Failed to fetch messages:', error);\n      }\n    };\n    const fetchReactions = async messageIds => {\n      try {\n        const response = await fetch('http://localhost:3001/getReactions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messageIds\n          })\n        });\n        const result = await response.json();\n        setReactions(result.reactions);\n      } catch (error) {\n        console.error('Failed to fetch reactions:', error);\n      }\n    };\n    fetchMessages();\n    socket.emit('joinRoom', receiverId);\n    socket.on('message', message => {\n      var _messageEndRef$curren;\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n      (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n    socket.on('messageDeleted', messageId => {\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n    });\n    socket.on('reaction', reaction => {\n      setReactions(prevReactions => {\n        const updatedReactions = {\n          ...prevReactions\n        };\n        if (!updatedReactions[reaction.messageId]) {\n          updatedReactions[reaction.messageId] = [];\n        }\n        updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(r => r.userId !== reaction.userId);\n        updatedReactions[reaction.messageId].push(reaction);\n        return updatedReactions;\n      });\n    });\n    socket.on('callNotification', async notification => {\n      const {\n        offer,\n        from\n      } = notification;\n      setIncomingCall({\n        offer,\n        from\n      });\n      setNotification(`Incoming call from user ${from}`);\n      if (Notification.permission === 'granted') {\n        new Notification('Incoming Call', {\n          body: `User ${from} is calling you`,\n          icon: defaultAvatar\n        });\n      }\n    });\n    socket.on('callOffer', async offer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('callAnswer', {\n          answer,\n          to: receiverId\n        });\n        setIsCallActive(true);\n      }\n    });\n\n    // Handle incoming answer\n    socket.on('callAnswer', async answer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    });\n\n    // Handle incoming ICE candidates\n    socket.on('iceCandidate', async candidate => {\n      if (peerConnection) {\n        try {\n          await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      }\n    });\n    // };\n\n    // setupWebRTC();\n\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('message');\n      socket.off('messageDeleted');\n      socket.off('reaction');\n      socket.off('callNotification');\n      socket.off('callOffer');\n      socket.off('callAnswer');\n      socket.off('iceCandidate');\n      if (peerConnection) {\n        peerConnection.close();\n      }\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [receiverId, userId, peerConnection, localStream]);\n  const setupWebRTC = async () => {\n    try {\n      const pc = new RTCPeerConnection();\n      pc.ontrack = event => {\n        setRemoteStream(event.streams[0]);\n      };\n      pc.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            to: receiverId\n          });\n        }\n      };\n\n      // Get user media and add tracks\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      setLocalStream(stream);\n      stream.getTracks().forEach(track => pc.addTrack(track, stream));\n      setPeerConnection(pc); // Make sure this is set after everything is configured\n    } catch (error) {\n      console.error('Error setting up WebRTC:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (messageText.trim()) {\n      try {\n        const response = await fetch('http://localhost:3001/sendMessage', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            senderId: userId,\n            receiverId: storedToUserId,\n            text: messageText\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          // window.location.reload();\n        } else {\n          console.error('SendMessage Error:', result.message);\n        }\n      } catch (error) {\n        console.error('SendMessage Fetch Error:', error);\n      }\n    }\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      const response = await fetch('http://localhost:3001/deleteMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId\n        }) // Ensure `messageId` is being sent\n      });\n      const result = await response.json();\n      if (response.ok) {\n        console.log('DeleteMessage success:', result);\n\n        // Optionally update UI here if needed\n      } else {\n        console.error('DeleteMessage Error:', result.message);\n      }\n    } catch (error) {\n      console.error('DeleteMessage Fetch Error:', error);\n    }\n  };\n  const handleAddReaction = async (messageId, reactionType) => {\n    try {\n      const response = await fetch('http://localhost:3001/addReaction', {\n        // Ensure this URL is correct\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId,\n          userId,\n          reactionType\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Reaction added successfully:', result);\n      } else {\n        const errorText = await response.text();\n        console.error('AddReaction Error:', errorText);\n      }\n    } catch (error) {\n      console.error('AddReaction Fetch Error:', error);\n    }\n  };\n  const isMessageDeletable = createdAt => {\n    const messageTime = new Date(createdAt);\n    const currentTime = new Date();\n    const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n    return diffMinutes <= 2;\n  };\n  const handleBack = () => {\n    navigate('/home');\n  };\n  const handleCallUser = userId => {\n    setSelectedUserId(userId);\n    setupWebRTC(); // Setup WebRTC before making a call\n    socket.emit('initiateCall', {\n      to: userId\n    });\n    setShowCallPopup(true);\n  };\n\n  // };\n  const handleEndCall = () => {\n    if (peerConnection) {\n      peerConnection.close();\n      setPeerConnection(null);\n      setLocalStream(null);\n      setRemoteStream(null);\n    }\n    setIsCallActive(false);\n    socket.emit('endCall', {\n      to: receiverId\n    });\n  };\n  const handleAcceptCall = async () => {\n    if (incomingCall) {\n      await setupWebRTC();\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\n      const answer = await peerConnection.createAnswer();\n      await peerConnection.setLocalDescription(answer);\n      socket.emit('callAnswer', {\n        answer,\n        to: incomingCall.from\n      });\n      setIsCallActive(true);\n      setIncomingCall(null);\n    }\n  };\n  const handleRejectCall = () => {\n    setIncomingCall(null);\n    setNotification(null);\n  };\n  const showNotification = message => {\n    console.log('Attempting to show notification:', message);\n    if (Notification.permission === 'granted') {\n      new Notification(message);\n    } else if (Notification.permission === 'default') {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          new Notification(message);\n        } else {\n          console.error('Notification permission denied.');\n        }\n      });\n    } else {\n      console.error('Notification permission denied.');\n    }\n  };\n\n  // Call this function to test notifications\n  showNotification('Test notification message');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: defaultAvatar,\n        alt: \"Avatar\",\n        className: \"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1998,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: localStorage.getItem('tousername')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2003,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1997,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      type: \"button\",\n      className: \"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"25px\",\n          height: \"25px\",\n          viewBox: \"0 0 1024 1024\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2020,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2024,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2014,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2011,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"translate-x-2\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2030,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2006,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCallUser('video'),\n        className: \"bg-blue-500 text-white py-2 px-4 rounded\",\n        children: /*#__PURE__*/_jsxDEV(VideoCameraIcon, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2052,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2048,\n        columnNumber: 17\n      }, this), showCallPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-lg\",\n          children: /*#__PURE__*/_jsxDEV(CallPage, {\n            receiverId: selectedUserId,\n            onClose: handleCloseCallPage,\n            isCallActive: isCallActive,\n            onEndCall: handleEndCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2057,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2056,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2055,\n        columnNumber: 17\n      }, this), isCallActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndCall,\n        className: \"p-2 text-red-500\",\n        children: \"End Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2067,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2033,\n      columnNumber: 13\n    }, this), localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        muted: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = localStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2075,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2074,\n      columnNumber: 17\n    }, this), remoteStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = remoteStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2090,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2089,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-2\",\n          children: [messages.length > 0 ? messages.map(message => {\n            var _reactions$message$id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`,\n              onMouseEnter: () => setHoveredMessageId(message.id),\n              onMouseLeave: () => setHoveredMessageId(null),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2116,\n                columnNumber: 37\n              }, this), message.reaction && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs mt-3\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: message.reaction\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2119,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2118,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500 mt-1\",\n                children: formatTimestamp(message.created_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2122,\n                columnNumber: 37\n              }, this), hoveredMessageId === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"absolute bottom-10 right-0 flex space-x-1\",\n                children: ['👍', '❤️', '😂'].map(reaction => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleAddReaction(message.id, reaction),\n                  className: \"text-xl\",\n                  children: reaction\n                }, reaction, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2128,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2126,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex space-x-2\",\n                children: (_reactions$message$id = reactions[message.id]) === null || _reactions$message$id === void 0 ? void 0 : _reactions$message$id.map((reaction, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-xs\",\n                  children: reaction.reactionType\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2140,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2138,\n                columnNumber: 37\n              }, this), isMessageDeletable(message.created_at) && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`,\n                onClick: () => {\n                  handleDeleteMessage(message.id);\n                  setMessages(prevMessages => prevMessages.filter(msg => msg.id !== message.id));\n                }\n                // className=\"text-red-500 absolute top-0 right-2\"\n                ,\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2144,\n                columnNumber: 41\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2109,\n              columnNumber: 33\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No messages yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2170,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2106,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: messageText,\n          onChange: e => setMessageText(e.target.value),\n          placeholder: \"Type your message...\",\n          className: \"w-full px-3 py-2 border rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleSendMessage();\n            setMessages(prevMessages => [...prevMessages, {\n              id: new Date().toISOString(),\n              // Temporary ID, should be replaced by server ID\n              content: messageText,\n              from_user_id: userId,\n              created_at: new Date().toISOString()\n            }]);\n          },\n          className: \"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\",\n          children: [\"Send\", /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"w-5 h-5\",\n            stroke: \"currentColor\",\n            strokeWidth: \"1.5\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\",\n              strokeLinejoin: \"round\",\n              strokeLinecap: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2209,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2184,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1996,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"CiXOFqbOrPnSz5dOUESWc0VqyJA=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","io","defaultAvatar","CallPage","PhoneIcon","VideoCameraIcon","AudioCall","jsxDEV","_jsxDEV","socket","ChatPage","_s","messages","setMessages","messageText","setMessageText","reactions","setReactions","hoveredMessageId","setHoveredMessageId","messageEndRef","navigate","receiverId","userId","localStorage","getItem","storedToUserId","localStream","setLocalStream","remoteStream","setRemoteStream","peerConnection","setPeerConnection","isCallActive","setIsCallActive","incomingCall","setIncomingCall","notification","setNotification","showCallPopup","setShowCallPopup","selectedUserId","setSelectedUserId","showAudioCall","setShowAudioCall","handleCallButtonClick","console","log","handleCloseCallPage","initiateCall","toUserId","state","formatTimestamp","timestamp","messageDate","Date","today","options","year","month","day","getFullYear","getMonth","getDate","toLocaleTimeString","hour","minute","toLocaleDateString","undefined","on","id","data","offer","from","showNotification","off","fetchMessages","senderId","response","fetch","result","json","Array","isArray","sortedMessages","sort","a","b","created_at","fetchReactions","map","msg","Error","error","messageIds","method","headers","body","JSON","stringify","emit","message","_messageEndRef$curren","prevMessages","current","scrollIntoView","behavior","messageId","filter","reaction","prevReactions","updatedReactions","r","push","Notification","permission","icon","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","to","candidate","addIceCandidate","RTCIceCandidate","close","getTracks","forEach","track","stop","setupWebRTC","pc","RTCPeerConnection","ontrack","event","streams","onicecandidate","stream","navigator","mediaDevices","getUserMedia","audio","video","addTrack","handleSendMessage","trim","text","ok","handleDeleteMessage","handleAddReaction","reactionType","errorText","isMessageDeletable","createdAt","messageTime","currentTime","diffMinutes","handleBack","handleCallUser","handleEndCall","handleAcceptCall","handleRejectCall","requestPermission","then","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","width","height","viewBox","xmlns","fill","d","onClose","onEndCall","autoPlay","muted","ref","srcObject","length","_reactions$message$id","from_user_id","onMouseEnter","onMouseLeave","content","index","value","onChange","e","target","placeholder","toISOString","stroke","strokeWidth","strokeLinejoin","strokeLinecap","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/Chatpage.js"],"sourcesContent":["\r\n\r\n// // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // import { io } from 'socket.io-client';\r\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// // // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// // // import 'webrtc-adapter';\r\n\r\n\r\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // const ChatPage = () => {\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const [messageText, setMessageText] = useState('');\r\n// // //     const [reactions, setReactions] = useState({});\r\n// // //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n// // //     const messageEndRef = useRef(null);\r\n// // //     const navigate = useNavigate();\r\n// // //     const { receiverId } = useParams();\r\n\r\n// // //     const userId = localStorage.getItem('userId');\r\n// // //     const storedToUserId = localStorage.getItem('touserId');\r\n// // //     const [localStream, setLocalStream] = useState(null);\r\n// // //     const [remoteStream, setRemoteStream] = useState(null);\r\n// // //     const [peerConnection, setPeerConnection] = useState(null);\r\n// // //     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n\r\n\r\n// // //     const formatTimestamp = (timestamp) => {\r\n// // //         const messageDate = new Date(timestamp);\r\n// // //         const today = new Date();\r\n// // //         const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n// // //         if (\r\n// // //             messageDate.getFullYear() === today.getFullYear() &&\r\n// // //             messageDate.getMonth() === today.getMonth() &&\r\n// // //             messageDate.getDate() === today.getDate()\r\n// // //         ) {\r\n// // //             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n// // //         } else {\r\n// // //             return messageDate.toLocaleDateString(undefined, options);\r\n// // //         }\r\n// // //     };\r\n\r\n\r\n// // //     useEffect(() => {\r\n// // //         if (!receiverId) return;\r\n\r\n// // //         socket.on('connect', () => {\r\n// // //             console.log('Connected to socket server');\r\n// // //         });\r\n\r\n// // //         socket.on('disconnect', () => {\r\n// // //             console.log('Disconnected from socket server');\r\n// // //         });\r\n\r\n// // //         const fetchMessages = async () => {\r\n// // //             const receiverId = localStorage.getItem('userId');\r\n// // //             const senderId = localStorage.getItem('touserId');\r\n// // //             try {\r\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // //                 const result = await response.json();\r\n// // //                 if (Array.isArray(result.messages)) {\r\n// // //                     setMessages(result.messages);\r\n// // //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n// // //                 } else {\r\n// // //                     throw new Error('Unexpected response format');\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('Failed to fetch messages:', error);\r\n// // //             }\r\n// // //         };\r\n\r\n// // //         const fetchReactions = async (messageIds) => {\r\n// // //             try {\r\n// // //                 const response = await fetch('http://localhost:3001/getReactions', {\r\n// // //                     method: 'POST',\r\n// // //                     headers: {\r\n// // //                         'Content-Type': 'application/json',\r\n// // //                     },\r\n// // //                     body: JSON.stringify({ messageIds }),\r\n// // //                 });\r\n// // //                 const result = await response.json();\r\n// // //                 setReactions(result.reactions);\r\n// // //             } catch (error) {\r\n// // //                 console.error('Failed to fetch reactions:', error);\r\n// // //             }\r\n// // //         };\r\n\r\n// // //         fetchMessages();\r\n\r\n// // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // //         socket.on('message', (message) => {\r\n// // //             console.log('Received message:', message);\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // //         });\r\n\r\n// // //         socket.on('messageDeleted', (messageId) => {\r\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // //         });\r\n\r\n// // //         socket.on('reaction', (reaction) => {\r\n// // //             setReactions((prevReactions) => {\r\n// // //                 const updatedReactions = { ...prevReactions };\r\n// // //                 if (!updatedReactions[reaction.messageId]) {\r\n// // //                     updatedReactions[reaction.messageId] = [];\r\n// // //                 }\r\n// // //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n// // //                     (r) => r.userId !== reaction.userId\r\n// // //                 );\r\n// // //                 updatedReactions[reaction.messageId].push(reaction);\r\n// // //                 return updatedReactions;\r\n// // //             });\r\n// // //         });\r\n\r\n// // //             socket.on('callOffer', async (offer) => {\r\n// // //                 if (peerConnection) {\r\n// // //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n// // //                     const answer = await peerConnection.createAnswer();\r\n// // //                     await peerConnection.setLocalDescription(answer);\r\n// // //                     socket.emit('callAnswer', { answer, to: receiverId });\r\n// // //                     setIsCallActive(true);\r\n// // //                 }\r\n// // //             });\r\n\r\n// // //             // Handle incoming answer\r\n// // //             socket.on('callAnswer', async (answer) => {\r\n// // //                 if (peerConnection) {\r\n// // //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n// // //                 }\r\n// // //             });\r\n\r\n// // //             // Handle incoming ICE candidates\r\n// // //             socket.on('iceCandidate', async (candidate) => {\r\n// // //                 if (peerConnection) {\r\n// // //                     try {\r\n// // //                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n// // //                     } catch (error) {\r\n// // //                         console.error('Error adding ICE candidate:', error);\r\n// // //                     }\r\n// // //                 }\r\n// // //             });\r\n// // //         // };\r\n\r\n// // //         // setupWebRTC();\r\n\r\n// // //         return () => {\r\n// // //             socket.off('connect');\r\n// // //             socket.off('disconnect');\r\n// // //             socket.off('message');\r\n// // //             socket.off('messageDeleted');\r\n// // //             socket.off('reaction');\r\n// // //             socket.off('callOffer');\r\n// // //             socket.off('callAnswer');\r\n// // //             socket.off('iceCandidate');\r\n// // //             if (peerConnection) {\r\n// // //                 peerConnection.close();\r\n// // //             }\r\n// // //             if (localStream) {\r\n// // //                 localStream.getTracks().forEach(track => track.stop());\r\n// // //             }\r\n// // //         };\r\n// // //     }, [receiverId, userId, peerConnection, localStream]);\r\n\r\n// // //     const setupWebRTC = async () => {\r\n// // //         const pc = new RTCPeerConnection();\r\n    \r\n// // //         // Handle incoming remote stream\r\n// // //         pc.ontrack = (event) => {\r\n// // //             setRemoteStream(event.streams[0]);\r\n// // //         };\r\n    \r\n// // //         // Handle ICE candidates\r\n// // //         pc.onicecandidate = (event) => {\r\n// // //             if (event.candidate) {\r\n// // //                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n// // //             }\r\n// // //         };\r\n    \r\n// // //         // Get local media\r\n// // //         try {\r\n// // //             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n// // //             setLocalStream(stream);\r\n// // //             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n// // //         } catch (error) {\r\n// // //             console.error('Error getting local media:', error);\r\n// // //         }\r\n    \r\n// // //         setPeerConnection(pc);\r\n// // //     };\r\n    \r\n\r\n// // //     const handleSendMessage = async () => {\r\n// // //         if (messageText.trim()) {\r\n// // //             try {\r\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // //                     method: 'POST',\r\n// // //                     headers: {\r\n// // //                         'Content-Type': 'application/json',\r\n// // //                     },\r\n// // //                     body: JSON.stringify({\r\n// // //                         senderId: userId,\r\n// // //                         receiverId: storedToUserId,\r\n// // //                         text: messageText,\r\n// // //                     }),\r\n// // //                 });\r\n// // //                 const result = await response.json();\r\n// // //                 if (response.ok) {\r\n// // //                     setMessageText(''); // Clear the input box\r\n// // //                 } else {\r\n// // //                     console.error('SendMessage Error:', result.message);\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('SendMessage Fetch Error:', error);\r\n// // //             }\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleDeleteMessage = async (messageId) => {\r\n// // //         try {\r\n// // //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// // //                 method: 'POST',\r\n// // //                 headers: {\r\n// // //                     'Content-Type': 'application/json',\r\n// // //                 },\r\n// // //                 body: JSON.stringify({ messageId }),\r\n// // //             });\r\n// // //             const result = await response.json();\r\n// // //             if (response.ok) {\r\n// // //                 // Optionally, you can provide user feedback here\r\n// // //             } else {\r\n// // //                 console.error('DeleteMessage Error:', result.message);\r\n// // //             }\r\n// // //         } catch (error) {\r\n// // //             console.error('DeleteMessage Fetch Error:', error);\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleAddReaction = async (messageId, reactionType) => {\r\n// // //         try {\r\n// // //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n// // //                 method: 'POST',\r\n// // //                 headers: {\r\n// // //                     'Content-Type': 'application/json',\r\n// // //                 },\r\n// // //                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n// // //             });\r\n    \r\n// // //             if (response.ok) {\r\n// // //                 const result = await response.json();\r\n// // //                 console.log('Reaction added successfully:', result);\r\n// // //             } else {\r\n// // //                 const errorText = await response.text();\r\n// // //                 console.error('AddReaction Error:', errorText);\r\n// // //             }\r\n// // //         } catch (error) {\r\n// // //             console.error('AddReaction Fetch Error:', error);\r\n// // //         }\r\n// // //     };\r\n    \r\n\r\n// // //     const isMessageDeletable = (createdAt) => {\r\n// // //         const messageTime = new Date(createdAt);\r\n// // //         const currentTime = new Date();\r\n// // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// // //         return diffMinutes <= 2;\r\n// // //     };\r\n\r\n// // //     const handleBack = () => {\r\n// // //         navigate('/home');\r\n// // //     };\r\n\r\n// // //     const handleCallUser = async (callType) => {\r\n// // //         console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n// // //         if (!peerConnection || peerConnection.signalingState === 'closed') {\r\n// // //             await setupWebRTC(); // Set up WebRTC and get local media stream\r\n// // //         }\r\n    \r\n// // //         if (peerConnection) {\r\n// // //             try {\r\n// // //                 const offer = await peerConnection.createOffer();\r\n// // //                 await peerConnection.setLocalDescription(offer);\r\n// // //                 socket.emit('callOffer', { offer, to: receiverId });\r\n// // //                 setIsCallActive(true);\r\n// // //             } catch (error) {\r\n// // //                 console.error('Error creating offer:', error);\r\n// // //             }\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleEndCall = () => {\r\n// // //         if (peerConnection) {\r\n// // //             peerConnection.close();\r\n// // //             setPeerConnection(null);\r\n// // //         }\r\n// // //         if (localStream) {\r\n// // //             localStream.getTracks().forEach(track => track.stop());\r\n// // //             setLocalStream(null);\r\n// // //         }\r\n// // //         if (remoteStream) {\r\n// // //             setRemoteStream(null);\r\n// // //         }\r\n// // //         setIsCallActive(false);\r\n// // //     socket.emit('callEnd', { to: receiverId });\r\n// // //         // socket.emit('callEnd', { to: receiverId });\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // //             <div className=\"flex items-center mb-4\">\r\n// // //                 <img\r\n// // //                     src={defaultAvatar}\r\n// // //                     alt=\"Avatar\"\r\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // //                 />\r\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // //             </div>\r\n\r\n// // //             <button\r\n// // //                 onClick={handleBack}\r\n// // //                 type=\"button\"\r\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // //             >\r\n// // //                 <div\r\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // //                 >\r\n// // //                     <svg\r\n// // //                         width=\"25px\"\r\n// // //                         height=\"25px\"\r\n// // //                         viewBox=\"0 0 1024 1024\"\r\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                     >\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // //                         ></path>\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // //                         ></path>\r\n// // //                     </svg>\r\n// // //                 </div>\r\n// // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // //             </button>\r\n\r\n// // //             <div className=\"flex justify-end mb-4\">\r\n// // //                 <button\r\n// // //                     onClick={() => handleCallUser('voice')}\r\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // //                 >\r\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //                 <button\r\n// // //                     onClick={() => handleCallUser('video')}\r\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // //                 >\r\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //                 {isCallActive && (\r\n// // //         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n// // //             End Call\r\n// // //         </button>\r\n// // //     )}\r\n// // //             </div>\r\n\r\n// // //             {localStream && (\r\n// // //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n// // //                     <video\r\n// // //                         autoPlay\r\n// // //                         muted\r\n// // //                         ref={(video) => {\r\n// // //                             if (video) {\r\n// // //                                 video.srcObject = localStream;\r\n// // //                             }\r\n// // //                         }}\r\n// // //                         className=\"w-full h-full object-cover\"\r\n// // //                     />\r\n// // //                 </div>\r\n// // //             )}\r\n\r\n// // // {remoteStream && (\r\n// // //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n// // //                     <video\r\n// // //                         autoPlay\r\n// // //                         ref={(video) => {\r\n// // //                             if (video) {\r\n// // //                                 video.srcObject = remoteStream;\r\n// // //                             }\r\n// // //                         }}\r\n// // //                         className=\"w-full h-full object-cover\"\r\n// // //                     />\r\n// // //                 </div>\r\n// // //             )}\r\n\r\n\r\n// // //             <div className=\"flex flex-col flex-grow\">\r\n// // //                 {/* Fixed Size Message Container */}\r\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// // //                     <div className=\"flex flex-col gap-2\">\r\n// // //                         {messages.length > 0 ? (\r\n// // //                             messages.map((message) => (\r\n// // //                                 <div\r\n// // //                                     key={message.id}\r\n// // //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n// // //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n// // //                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n// // //                                 >\r\n// // //                                     {/* <div className=\"text-sm\">{message.content}</div> */}\r\n// // //                                     <p>{message.content}</p>\r\n// // //                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n// // //                                     {hoveredMessageId === message.id && (\r\n// // //                                         <div className=\"absolute bottom-0 right-2 flex space-x-1\">\r\n// // //                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n// // //                                                 <button\r\n// // //                                                     key={reaction}\r\n// // //                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n// // //                                                     className=\"text-xl\"\r\n// // //                                                 >\r\n// // //                                                     {reaction}\r\n// // //                                                 </button>\r\n// // //                                             ))}\r\n// // //                                         </div>\r\n// // //                                     )}\r\n// // //                                     <div className=\"flex space-x-2\">\r\n// // //                                         {reactions[message.id]?.map((reaction, index) => (\r\n// // //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n// // //                                         ))}\r\n// // //                                     </div>\r\n// // //                                     {isMessageDeletable(message.created_at) && (\r\n// // //                                         <button\r\n// // //                                             onClick={() => {\r\n// // //                                                 handleDeleteMessage(message.id);\r\n// // //                                                 setMessages((prevMessages) =>\r\n// // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// // //                                                 );\r\n// // //                                             }}\r\n// // //                                             className=\"text-red-500 absolute top-0 right-2\"\r\n// // //                                         >\r\n// // //                                             Delete\r\n// // //                                         </button>\r\n// // //                                     )}\r\n// // //                                 </div>\r\n// // //                             ))\r\n// // //                         ) : (\r\n// // //                             <p>No messages yet.</p>\r\n// // //                         )}\r\n// // //                         <div ref={messageEndRef} />\r\n// // //                     </div>\r\n// // //                 </div>\r\n\r\n// // //                 <div className=\"flex mt-4\">\r\n// // //                     <input\r\n// // //                         type=\"text\"\r\n// // //                         value={messageText}\r\n// // //                         onChange={(e) => setMessageText(e.target.value)}\r\n// // //                         placeholder=\"Type your message...\"\r\n// // //                         className=\"w-full px-3 py-2 border rounded\"\r\n// // //                     />\r\n// // //                     <button\r\n// // //                         onClick={() => {\r\n// // //                             handleSendMessage();\r\n// // //                             setMessages((prevMessages) => [\r\n// // //                                 ...prevMessages,\r\n// // //                                 {\r\n// // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// // //                                     content: messageText,\r\n// // //                                     from_user_id: userId,\r\n// // //                                     created_at: new Date().toISOString(),\r\n// // //                                 },\r\n// // //                             ]);\r\n// // //                         }}\r\n// // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// // //                     >\r\n// // //                         Send\r\n// // //                         <svg\r\n// // //                             className=\"w-5 h-5\"\r\n// // //                             stroke=\"currentColor\"\r\n// // //                             strokeWidth=\"1.5\"\r\n// // //                             viewBox=\"0 0 24 24\"\r\n// // //                             fill=\"none\"\r\n// // //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                         >\r\n// // //                             <path\r\n// // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// // //                                 strokeLinejoin=\"round\"\r\n// // //                                 strokeLinecap=\"round\"\r\n// // //                             ></path>\r\n// // //                         </svg>\r\n// // //                     </button>\r\n// // //                 </div>\r\n// // //             </div>\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default ChatPage;\r\n\r\n\r\n\r\n\r\n\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { useNavigate, useParams } from 'react-router-dom';\r\n// // import { io } from 'socket.io-client';\r\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// // import 'webrtc-adapter';\r\n\r\n\r\n// // // const handleStartCall = () => {\r\n// // //     navigate('/video-call');\r\n// // // };\r\n\r\n\r\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // const ChatPage = () => {\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [messageText, setMessageText] = useState('');\r\n// //     const [reactions, setReactions] = useState({});\r\n// //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n// //     const messageEndRef = useRef(null);\r\n// //     const navigate = useNavigate();\r\n// //     const { receiverId } = useParams();\r\n\r\n// //     const userId = localStorage.getItem('userId');\r\n// //     const storedToUserId = localStorage.getItem('touserId');\r\n// //     const [localStream, setLocalStream] = useState(null);\r\n// //     const [remoteStream, setRemoteStream] = useState(null);\r\n// //     const [peerConnection, setPeerConnection] = useState(null);\r\n// //     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n\r\n\r\n// //     const formatTimestamp = (timestamp) => {\r\n// //         const messageDate = new Date(timestamp);\r\n// //         const today = new Date();\r\n// //         const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n// //         if (\r\n// //             messageDate.getFullYear() === today.getFullYear() &&\r\n// //             messageDate.getMonth() === today.getMonth() &&\r\n// //             messageDate.getDate() === today.getDate()\r\n// //         ) {\r\n// //             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n// //         } else {\r\n// //             return messageDate.toLocaleDateString(undefined, options);\r\n// //         }\r\n// //     };\r\n\r\n\r\n// //     useEffect(() => {\r\n// //         if (!receiverId) return;\r\n\r\n// //         socket.on('connect', () => {\r\n// //             console.log('Connected to socket server');\r\n// //         });\r\n\r\n// //         socket.on('disconnect', () => {\r\n// //             console.log('Disconnected from socket server');\r\n// //         });\r\n\r\n// //         const fetchMessages = async () => {\r\n// //             const receiverId = localStorage.getItem('userId');\r\n// //             const senderId = localStorage.getItem('touserId');\r\n// //             try {\r\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// //                 const result = await response.json();\r\n// //                 if (Array.isArray(result.messages)) {\r\n// //                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n// //                     setMessages(sortedMessages);\r\n// //                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\r\n// //                 } else {\r\n// //                     throw new Error('Unexpected response format');\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('Failed to fetch messages:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         const fetchReactions = async (messageIds) => {\r\n// //             try {\r\n// //                 const response = await fetch('http://localhost:3001/getReactions', {\r\n// //                     method: 'POST',\r\n// //                     headers: {\r\n// //                         'Content-Type': 'application/json',\r\n// //                     },\r\n// //                     body: JSON.stringify({ messageIds }),\r\n// //                 });\r\n// //                 const result = await response.json();\r\n// //                 setReactions(result.reactions);\r\n// //             } catch (error) {\r\n// //                 console.error('Failed to fetch reactions:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         fetchMessages();\r\n\r\n// //         socket.emit('joinRoom', receiverId);\r\n\r\n// //         socket.on('message', (message) => {\r\n// //             console.log('Received message:', message);\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //         });\r\n\r\n// //         socket.on('messageDeleted', (messageId) => {\r\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// //         });\r\n\r\n// //         socket.on('reaction', (reaction) => {\r\n// //             setReactions((prevReactions) => {\r\n// //                 const updatedReactions = { ...prevReactions };\r\n// //                 if (!updatedReactions[reaction.messageId]) {\r\n// //                     updatedReactions[reaction.messageId] = [];\r\n// //                 }\r\n// //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n// //                     (r) => r.userId !== reaction.userId\r\n// //                 );\r\n// //                 updatedReactions[reaction.messageId].push(reaction);\r\n// //                 return updatedReactions;\r\n// //             });\r\n// //         });\r\n\r\n// //             socket.on('callOffer', async (offer) => {\r\n// //                 if (peerConnection) {\r\n// //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n// //                     const answer = await peerConnection.createAnswer();\r\n// //                     await peerConnection.setLocalDescription(answer);\r\n// //                     socket.emit('callAnswer', { answer, to: receiverId });\r\n// //                     setIsCallActive(true);\r\n// //                 }\r\n// //             });\r\n\r\n// //             // Handle incoming answer\r\n// //             socket.on('callAnswer', async (answer) => {\r\n// //                 if (peerConnection) {\r\n// //                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n// //                 }\r\n// //             });\r\n\r\n// //             // Handle incoming ICE candidates\r\n// //             socket.on('iceCandidate', async (candidate) => {\r\n// //                 if (peerConnection) {\r\n// //                     try {\r\n// //                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n// //                     } catch (error) {\r\n// //                         console.error('Error adding ICE candidate:', error);\r\n// //                     }\r\n// //                 }\r\n// //             });\r\n// //         // };\r\n\r\n// //         // setupWebRTC();\r\n\r\n// //         return () => {\r\n// //             socket.off('connect');\r\n// //             socket.off('disconnect');\r\n// //             socket.off('message');\r\n// //             socket.off('messageDeleted');\r\n// //             socket.off('reaction');\r\n// //             socket.off('callOffer');\r\n// //             socket.off('callAnswer');\r\n// //             socket.off('iceCandidate');\r\n// //             if (peerConnection) {\r\n// //                 peerConnection.close();\r\n// //             }\r\n// //             if (localStream) {\r\n// //                 localStream.getTracks().forEach(track => track.stop());\r\n// //             }\r\n// //         };\r\n// //     }, [receiverId, userId, peerConnection, localStream]);\r\n\r\n// //     const setupWebRTC = async () => {\r\n// //         const pc = new RTCPeerConnection();\r\n    \r\n// //         // Handle incoming remote stream\r\n// //         pc.ontrack = (event) => {\r\n// //             setRemoteStream(event.streams[0]);\r\n// //         };\r\n    \r\n// //         // Handle ICE candidates\r\n// //         pc.onicecandidate = (event) => {\r\n// //             if (event.candidate) {\r\n// //                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n// //             }\r\n// //         };\r\n    \r\n// //         // Get local media\r\n// //         try {\r\n// //             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n// //             setLocalStream(stream);\r\n// //             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n// //         } catch (error) {\r\n// //             console.error('Error getting local media:', error);\r\n// //         }\r\n    \r\n// //         setPeerConnection(pc);\r\n// //     };\r\n    \r\n\r\n// //     const handleSendMessage = async () => {\r\n// //         if (messageText.trim()) {\r\n// //             try {\r\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// //                     method: 'POST',\r\n// //                     headers: {\r\n// //                         'Content-Type': 'application/json',\r\n// //                     },\r\n// //                     body: JSON.stringify({\r\n// //                         senderId: userId,\r\n// //                         receiverId: storedToUserId,\r\n// //                         text: messageText,\r\n// //                     }),\r\n// //                 });\r\n// //                 const result = await response.json();\r\n// //                 if (response.ok) {\r\n// //                     setMessageText(''); // Clear the input box\r\n// //                 } else {\r\n// //                     console.error('SendMessage Error:', result.message);\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('SendMessage Fetch Error:', error);\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     // const handleDeleteMessage = async (messageId) => {\r\n// //     //     try {\r\n// //     //         const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// //     //             method: 'POST',\r\n// //     //             headers: {\r\n// //     //                 'Content-Type': 'application/json',\r\n// //     //             },\r\n// //     //             body: JSON.stringify({ messageId }),\r\n// //     //         });\r\n// //     //         const result = await response.json();\r\n// //     //         if (response.ok) {\r\n// //     //             // Optionally, you can provide user feedback here\r\n// //     //         } else {\r\n// //     //             console.error('DeleteMessage Error:', result.message);\r\n// //     //         }\r\n// //     //     } catch (error) {\r\n// //     //         console.error('DeleteMessage Fetch Error:', error);\r\n// //     //     }\r\n// //     // };\r\n\r\n// //     const handleDeleteMessage = async (messageId) => {\r\n// //         try {\r\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// //                 method: 'POST',\r\n// //                 headers: {\r\n// //                     'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: JSON.stringify({ messageId }),\r\n// //             });\r\n    \r\n// //             const result = await response.json();\r\n// //             if (response.ok) {\r\n// //                 console.log('DeleteMessage success:', result);\r\n// //                 // Optionally update UI here if needed\r\n// //             } else {\r\n// //                 console.error('DeleteMessage Error:', result.message);\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('DeleteMessage Fetch Error:', error);\r\n// //         }\r\n// //     };\r\n    \r\n\r\n// //     const handleAddReaction = async (messageId, reactionType) => {\r\n// //         try {\r\n// //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n// //                 method: 'POST',\r\n// //                 headers: {\r\n// //                     'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n// //             });\r\n    \r\n// //             if (response.ok) {\r\n// //                 const result = await response.json();\r\n// //                 console.log('Reaction added successfully:', result);\r\n// //             } else {\r\n// //                 const errorText = await response.text();\r\n// //                 console.error('AddReaction Error:', errorText);\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('AddReaction Fetch Error:', error);\r\n// //         }\r\n// //     };\r\n    \r\n\r\n// //     const isMessageDeletable = (createdAt) => {\r\n// //         const messageTime = new Date(createdAt);\r\n// //         const currentTime = new Date();\r\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// //         return diffMinutes <= 2;\r\n// //     };\r\n\r\n// //     const handleBack = () => {\r\n// //         navigate('/home');\r\n// //     };\r\n\r\n// //     const handleCallUser = async (callType) => {\r\n// //         console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n// //         if (!peerConnection || peerConnection.signalingState === 'closed') {\r\n// //             await setupWebRTC(); // Set up WebRTC and get local media stream\r\n// //         }\r\n    \r\n// //         if (peerConnection) {\r\n// //             try {\r\n// //                 const offer = await peerConnection.createOffer();\r\n// //                 await peerConnection.setLocalDescription(offer);\r\n// //                 socket.emit('callOffer', { offer, to: receiverId });\r\n// //                 setIsCallActive(true);\r\n// //             } catch (error) {\r\n// //                 console.error('Error creating offer:', error);\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleEndCall = () => {\r\n// //         if (peerConnection) {\r\n// //             peerConnection.close();\r\n// //             setPeerConnection(null);\r\n// //         }\r\n// //         if (localStream) {\r\n// //             localStream.getTracks().forEach(track => track.stop());\r\n// //             setLocalStream(null);\r\n// //         }\r\n// //         if (remoteStream) {\r\n// //             setRemoteStream(null);\r\n// //         }\r\n// //         setIsCallActive(false);\r\n// //     socket.emit('callEnd', { to: receiverId });\r\n// //         // socket.emit('callEnd', { to: receiverId });\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// //             <div className=\"flex items-center mb-4\">\r\n// //                 <img\r\n// //                     src={defaultAvatar}\r\n// //                     alt=\"Avatar\"\r\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// //                 />\r\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// //             </div>\r\n\r\n// //             <button\r\n// //                 onClick={handleBack}\r\n// //                 type=\"button\"\r\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// //             >\r\n// //                 <div\r\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// //                 >\r\n// //                     <svg\r\n// //                         width=\"25px\"\r\n// //                         height=\"25px\"\r\n// //                         viewBox=\"0 0 1024 1024\"\r\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                     >\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// //                         ></path>\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// //                         ></path>\r\n// //                     </svg>\r\n// //                 </div>\r\n// //                 <p className=\"translate-x-2\">Go Back</p>\r\n// //             </button>\r\n\r\n// //             <div className=\"flex justify-end mb-4\">\r\n// //                 <button\r\n// //                     onClick={() => handleCallUser('voice')}\r\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// //                 >\r\n// //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //                 <button\r\n// //                     onClick={() => handleCallUser('video')}\r\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// //                 >\r\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //                 {isCallActive && (\r\n// //         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n// //             End Call\r\n// //         </button>\r\n// //     )}\r\n// //             </div>\r\n\r\n// //             {localStream && (\r\n// //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n// //                     <video\r\n// //                         autoPlay\r\n// //                         muted\r\n// //                         ref={(video) => {\r\n// //                             if (video) {\r\n// //                                 video.srcObject = localStream;\r\n// //                             }\r\n// //                         }}\r\n// //                         className=\"w-full h-full object-cover\"\r\n// //                     />\r\n// //                 </div>\r\n// //             )}\r\n\r\n// // {remoteStream && (\r\n// //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n// //                     <video\r\n// //                         autoPlay\r\n// //                         ref={(video) => {\r\n// //                             if (video) {\r\n// //                                 video.srcObject = remoteStream;\r\n// //                             }\r\n// //                         }}\r\n// //                         className=\"w-full h-full object-cover\"\r\n// //                     />\r\n// //                 </div>\r\n// //             )}\r\n\r\n\r\n// //             <div className=\"flex flex-col flex-grow\">\r\n// //                 {/* Fixed Size Message Container */}\r\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// //                     <div className=\"flex flex-col gap-2\">\r\n// //                         {messages.length > 0 ? (\r\n// //                             messages.map((message) => (\r\n// //                                 <div\r\n// //                                     key={message.id}\r\n// //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n// //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n// //                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n// //                                 >\r\n// //                                     {/* <div className=\"text-sm\">{message.content}</div> */}\r\n// //                                     <p>{message.content}</p>\r\n// //                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n// //                                     {hoveredMessageId === message.id && (\r\n// //                                         <div className=\"absolute bottom-0 right-2 flex space-x-1\">\r\n// //                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n// //                                                 <button\r\n// //                                                     key={reaction}\r\n// //                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n// //                                                     className=\"text-xl\"\r\n// //                                                 >\r\n// //                                                     {reaction}\r\n// //                                                 </button>\r\n// //                                             ))}\r\n// //                                         </div>\r\n// //                                     )}\r\n// //                                     <div className=\"flex space-x-2\">\r\n// //                                         {reactions[message.id]?.map((reaction, index) => (\r\n// //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n// //                                         ))}\r\n// //                                     </div>\r\n// //                                     {isMessageDeletable(message.created_at) && (\r\n// //                                         <button\r\n// //                                              className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n// //                                             onClick={() => {\r\n// //                                                 handleDeleteMessage(message.id);\r\n// //                                                 setMessages((prevMessages) =>\r\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// //                                                 );\r\n// //                                             }}\r\n// //                                             // className=\"text-red-500 absolute top-0 right-2\"\r\n// //                                         >\r\n// //                                             Delete\r\n// //                                         </button>\r\n// //                                     )}\r\n                                    \r\n\r\n// //                                 {/* {message.from_user_id === userId && (\r\n// //                                 <button\r\n// //                                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n// //                                     onClick={() => handleDeleteMessage(message.id)}\r\n// //                                 >\r\n// //                                     Delete\r\n// //                                 </button>\r\n// //                             )} */}\r\n// //                                 </div>\r\n// //                             ))\r\n// //                         ) : (\r\n// //                             <p>No messages yet.</p>\r\n// //                         )}\r\n// //                         <div ref={messageEndRef} />\r\n// //                     </div>\r\n// //                 </div>\r\n\r\n// //                 <div className=\"flex mt-4\">\r\n// //                     <input\r\n// //                         type=\"text\"\r\n// //                         value={messageText}\r\n// //                         onChange={(e) => setMessageText(e.target.value)}\r\n// //                         placeholder=\"Type your message...\"\r\n// //                         className=\"w-full px-3 py-2 border rounded\"\r\n// //                     />\r\n// //                     <button\r\n// //                         onClick={() => {\r\n// //                             handleSendMessage();\r\n// //                             setMessages((prevMessages) => [\r\n// //                                 ...prevMessages,\r\n// //                                 {\r\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// //                                     content: messageText,\r\n// //                                     from_user_id: userId,\r\n// //                                     created_at: new Date().toISOString(),\r\n// //                                 },\r\n// //                             ]);\r\n// //                         }}\r\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// //                     >\r\n// //                         Send\r\n// //                         <svg\r\n// //                             className=\"w-5 h-5\"\r\n// //                             stroke=\"currentColor\"\r\n// //                             strokeWidth=\"1.5\"\r\n// //                             viewBox=\"0 0 24 24\"\r\n// //                             fill=\"none\"\r\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                         >\r\n// //                             <path\r\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// //                                 strokeLinejoin=\"round\"\r\n// //                                 strokeLinecap=\"round\"\r\n// //                             ></path>\r\n// //                         </svg>\r\n// //                     </button>\r\n// //                 </div>\r\n// //             </div>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default ChatPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { io } from 'socket.io-client';\r\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// import 'webrtc-adapter';\r\n\r\n\r\n// // const handleStartCall = () => {\r\n// //     navigate('/video-call');\r\n// // };\r\n\r\n\r\n// const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// const ChatPage = () => {\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [messageText, setMessageText] = useState('');\r\n//     const [reactions, setReactions] = useState({});\r\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n//     const messageEndRef = useRef(null);\r\n//     const navigate = useNavigate();\r\n//     const { receiverId } = useParams();\r\n\r\n//     const userId = localStorage.getItem('userId');\r\n//     const storedToUserId = localStorage.getItem('touserId');\r\n//     const [localStream, setLocalStream] = useState(null);\r\n//     const [remoteStream, setRemoteStream] = useState(null);\r\n//     const [peerConnection, setPeerConnection] = useState(null);\r\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n\r\n\r\n//     const formatTimestamp = (timestamp) => {\r\n//         const messageDate = new Date(timestamp);\r\n//         const today = new Date();\r\n//         const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n//         if (\r\n//             messageDate.getFullYear() === today.getFullYear() &&\r\n//             messageDate.getMonth() === today.getMonth() &&\r\n//             messageDate.getDate() === today.getDate()\r\n//         ) {\r\n//             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n//         } else {\r\n//             return messageDate.toLocaleDateString(undefined, options);\r\n//         }\r\n//     };\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (!receiverId) return;\r\n\r\n//         socket.on('connect', () => {\r\n//             console.log('Connected to socket server');\r\n//         });\r\n\r\n//         socket.on('disconnect', () => {\r\n//             console.log('Disconnected from socket server');\r\n//         });\r\n\r\n//         const fetchMessages = async () => {\r\n//             const receiverId = localStorage.getItem('userId');\r\n//             const senderId = localStorage.getItem('touserId');\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n//                 const result = await response.json();\r\n//                 if (Array.isArray(result.messages)) {\r\n//                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n//                     setMessages(sortedMessages);\r\n//                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\r\n//                 } else {\r\n//                     throw new Error('Unexpected response format');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         const fetchReactions = async (messageIds) => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/getReactions', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({ messageIds }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 setReactions(result.reactions);\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch reactions:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n\r\n//         socket.emit('joinRoom', receiverId);\r\n\r\n//         socket.on('message', (message) => {\r\n//             console.log('Received message:', message);\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//         });\r\n\r\n//         socket.on('messageDeleted', (messageId) => {\r\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n//         });\r\n\r\n//         socket.on('reaction', (reaction) => {\r\n//             setReactions((prevReactions) => {\r\n//                 const updatedReactions = { ...prevReactions };\r\n//                 if (!updatedReactions[reaction.messageId]) {\r\n//                     updatedReactions[reaction.messageId] = [];\r\n//                 }\r\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n//                     (r) => r.userId !== reaction.userId\r\n//                 );\r\n//                 updatedReactions[reaction.messageId].push(reaction);\r\n//                 return updatedReactions;\r\n//             });\r\n//         });\r\n\r\n//             socket.on('callOffer', async (offer) => {\r\n//                 if (peerConnection) {\r\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n//                     const answer = await peerConnection.createAnswer();\r\n//                     await peerConnection.setLocalDescription(answer);\r\n//                     socket.emit('callAnswer', { answer, to: receiverId });\r\n//                     setIsCallActive(true);\r\n//                 }\r\n//             });\r\n\r\n//             // Handle incoming answer\r\n//             socket.on('callAnswer', async (answer) => {\r\n//                 if (peerConnection) {\r\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n//                 }\r\n//             });\r\n\r\n//             // Handle incoming ICE candidates\r\n//             socket.on('iceCandidate', async (candidate) => {\r\n//                 if (peerConnection) {\r\n//                     try {\r\n//                         await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n//                     } catch (error) {\r\n//                         console.error('Error adding ICE candidate:', error);\r\n//                     }\r\n//                 }\r\n//             });\r\n//         // };\r\n\r\n//         // setupWebRTC();\r\n\r\n//         return () => {\r\n//             socket.off('connect');\r\n//             socket.off('disconnect');\r\n//             socket.off('message');\r\n//             socket.off('messageDeleted');\r\n//             socket.off('reaction');\r\n//             socket.off('callOffer');\r\n//             socket.off('callAnswer');\r\n//             socket.off('iceCandidate');\r\n//             if (peerConnection) {\r\n//                 peerConnection.close();\r\n//             }\r\n//             if (localStream) {\r\n//                 localStream.getTracks().forEach(track => track.stop());\r\n//             }\r\n//         };\r\n//     }, [receiverId, userId, peerConnection, localStream]);\r\n\r\n//     const setupWebRTC = async () => {\r\n//         const pc = new RTCPeerConnection();\r\n    \r\n//         // Handle incoming remote stream\r\n//         pc.ontrack = (event) => {\r\n//             setRemoteStream(event.streams[0]);\r\n//         };\r\n    \r\n//         // Handle ICE candidates\r\n//         pc.onicecandidate = (event) => {\r\n//             if (event.candidate) {\r\n//                 socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n//             }\r\n//         };\r\n    \r\n//         // Get local media\r\n//         try {\r\n//             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n//             setLocalStream(stream);\r\n//             stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n//         } catch (error) {\r\n//             console.error('Error getting local media:', error);\r\n//         }\r\n    \r\n//         setPeerConnection(pc);\r\n//     };\r\n    \r\n\r\n//     const handleSendMessage = async () => {\r\n//         if (messageText.trim()) {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({\r\n//                         senderId: userId,\r\n//                         receiverId: storedToUserId,\r\n//                         text: messageText,\r\n//                     }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 if (response.ok) {\r\n//                     setMessageText(''); // Clear the input box\r\n//                 } else {\r\n//                     console.error('SendMessage Error:', result.message);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('SendMessage Fetch Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     // const handleDeleteMessage = async (messageId) => {\r\n//     //     try {\r\n//     //         const response = await fetch('http://localhost:3001/deleteMessage', {\r\n//     //             method: 'POST',\r\n//     //             headers: {\r\n//     //                 'Content-Type': 'application/json',\r\n//     //             },\r\n//     //             body: JSON.stringify({ messageId }),\r\n//     //         });\r\n//     //         const result = await response.json();\r\n//     //         if (response.ok) {\r\n//     //             // Optionally, you can provide user feedback here\r\n//     //         } else {\r\n//     //             console.error('DeleteMessage Error:', result.message);\r\n//     //         }\r\n//     //     } catch (error) {\r\n//     //         console.error('DeleteMessage Fetch Error:', error);\r\n//     //     }\r\n//     // };\r\n\r\n//     const handleDeleteMessage = async (messageId) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId }),\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n//             if (response.ok) {\r\n//                 console.log('DeleteMessage success:', result);\r\n//                 // Optionally update UI here if needed\r\n//             } else {\r\n//                 console.error('DeleteMessage Error:', result.message);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('DeleteMessage Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const handleAddReaction = async (messageId, reactionType) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 const result = await response.json();\r\n//                 console.log('Reaction added successfully:', result);\r\n//             } else {\r\n//                 const errorText = await response.text();\r\n//                 console.error('AddReaction Error:', errorText);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('AddReaction Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const isMessageDeletable = (createdAt) => {\r\n//         const messageTime = new Date(createdAt);\r\n//         const currentTime = new Date();\r\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n//         return diffMinutes <= 2;\r\n//     };\r\n\r\n//     const handleBack = () => {\r\n//         navigate('/home');\r\n//     };\r\n\r\n//     const handleCallUser = async (callType) => {\r\n//         console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n//         if (!peerConnection || peerConnection.signalingState === 'closed') {\r\n//             await setupWebRTC(); // Set up WebRTC and get local media stream\r\n//         }\r\n    \r\n//         if (peerConnection) {\r\n//             try {\r\n//                 const offer = await peerConnection.createOffer();\r\n//                 await peerConnection.setLocalDescription(offer);\r\n//                 socket.emit('callOffer', { offer, to: receiverId });\r\n//                 setIsCallActive(true);\r\n//             } catch (error) {\r\n//                 console.error('Error creating offer:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleEndCall = () => {\r\n//         if (peerConnection) {\r\n//             peerConnection.close();\r\n//             setPeerConnection(null);\r\n//         }\r\n//         if (localStream) {\r\n//             localStream.getTracks().forEach(track => track.stop());\r\n//             setLocalStream(null);\r\n//         }\r\n//         if (remoteStream) {\r\n//             setRemoteStream(null);\r\n//         }\r\n//         setIsCallActive(false);\r\n//     socket.emit('callEnd', { to: receiverId });\r\n//         // socket.emit('callEnd', { to: receiverId });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n//             <div className=\"flex items-center mb-4\">\r\n//                 <img\r\n//                     src={defaultAvatar}\r\n//                     alt=\"Avatar\"\r\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n//                 />\r\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n//             </div>\r\n\r\n//             <button\r\n//                 onClick={handleBack}\r\n//                 type=\"button\"\r\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n//             >\r\n//                 <div\r\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n//                 >\r\n//                     <svg\r\n//                         width=\"25px\"\r\n//                         height=\"25px\"\r\n//                         viewBox=\"0 0 1024 1024\"\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                     >\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n//                         ></path>\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n//                         ></path>\r\n//                     </svg>\r\n//                 </div>\r\n//                 <p className=\"translate-x-2\">Go Back</p>\r\n//             </button>\r\n\r\n//             <div className=\"flex justify-end mb-4\">\r\n//                 <button\r\n//                     onClick={() => handleCallUser('voice')}\r\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n//                 >\r\n//                     <PhoneIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 <button\r\n//                     onClick={() => handleCallUser('video')}\r\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n//                 >\r\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 {isCallActive && (\r\n//         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n//             End Call\r\n//         </button>\r\n//     )}\r\n//             </div>\r\n\r\n//             {localStream && (\r\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         muted\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = localStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n// {remoteStream && (\r\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = remoteStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//             <div className=\"flex flex-col flex-grow\">\r\n//                 {/* Fixed Size Message Container */}\r\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n//                     <div className=\"flex flex-col gap-2\">\r\n//                         {messages.length > 0 ? (\r\n//                             messages.map((message) => (\r\n//                                 <div\r\n//                                     key={message.id}\r\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n//                                 >\r\n//                                     {/* <div className=\"text-sm\">{message.content}</div> */}\r\n//                                     <p>{message.content}</p>\r\n//                                     <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n//                                     {hoveredMessageId === message.id && (\r\n//                                         <div className=\"absolute bottom-10 right-0 flex space-x-1\">\r\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n//                                                 <button\r\n//                                                     key={reaction}\r\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n//                                                     className=\"text-xl\"\r\n//                                                 >\r\n//                                                     {reaction}\r\n//                                                 </button>\r\n//                                             ))}\r\n//                                         </div>\r\n//                                     )}\r\n//                                     <div className=\"flex space-x-2\">\r\n//                                         {reactions[message.id]?.map((reaction, index) => (\r\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n//                                         ))}\r\n//                                     </div>\r\n//                                     {isMessageDeletable(message.created_at) && (\r\n//                                         <button\r\n//                                              className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n//                                             onClick={() => {\r\n//                                                 handleDeleteMessage(message.id);\r\n//                                                 setMessages((prevMessages) =>\r\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n//                                                 );\r\n//                                             }}\r\n//                                             // className=\"text-red-500 absolute top-0 right-2\"\r\n//                                         >\r\n//                                             Delete\r\n//                                         </button>\r\n//                                     )}\r\n                                    \r\n\r\n//                                 {/* {message.from_user_id === userId && (\r\n//                                 <button\r\n//                                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n//                                     onClick={() => handleDeleteMessage(message.id)}\r\n//                                 >\r\n//                                     Delete\r\n//                                 </button>\r\n//                             )} */}\r\n//                                 </div>\r\n//                             ))\r\n//                         ) : (\r\n//                             <p>No messages yet.</p>\r\n//                         )}\r\n//                         <div ref={messageEndRef} />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"flex mt-4\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={messageText}\r\n//                         onChange={(e) => setMessageText(e.target.value)}\r\n//                         placeholder=\"Type your message...\"\r\n//                         className=\"w-full px-3 py-2 border rounded\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={() => {\r\n//                             handleSendMessage();\r\n//                             setMessages((prevMessages) => [\r\n//                                 ...prevMessages,\r\n//                                 {\r\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n//                                     content: messageText,\r\n//                                     from_user_id: userId,\r\n//                                     created_at: new Date().toISOString(),\r\n//                                 },\r\n//                             ]);\r\n//                         }}\r\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n//                     >\r\n//                         Send\r\n//                         <svg\r\n//                             className=\"w-5 h-5\"\r\n//                             stroke=\"currentColor\"\r\n//                             strokeWidth=\"1.5\"\r\n//                             viewBox=\"0 0 24 24\"\r\n//                             fill=\"none\"\r\n//                             xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         >\r\n//                             <path\r\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n//                                 strokeLinejoin=\"round\"\r\n//                                 strokeLinecap=\"round\"\r\n//                             ></path>\r\n//                         </svg>\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatPage;\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport defaultAvatar from '../assets/user (1).png'; \r\nimport CallPage from '../components/CallPage'\r\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n//This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\nimport 'webrtc-adapter';\r\n// import React, { useState } from 'react';\r\n// import CallPage from '../callPage'\r\nimport AudioCall from './AudioCall'; // Import AudioCall component\r\n\r\n\r\n\r\n\r\n\r\nconst socket = io('http://localhost:3001'); \r\n\r\nconst ChatPage = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [messageText, setMessageText] = useState('');\r\n    const [reactions, setReactions] = useState({});\r\n    const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n    const messageEndRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    const { receiverId } = useParams();\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const storedToUserId = localStorage.getItem('touserId');\r\n    const [localStream, setLocalStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [peerConnection, setPeerConnection] = useState(null);\r\n    const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n    // const [isCallActive, setIsCallActive] = useState(false);\r\n    const [incomingCall, setIncomingCall] = useState(null);\r\n    const [notification, setNotification] = useState(null);\r\n    const [showCallPopup, setShowCallPopup] = useState(false);\r\n    const [selectedUserId, setSelectedUserId] = useState(null);\r\n    // const messageEndRef = useRef(null);\r\n    // const [socket] = useState(io('http://localhost:3000')); \r\n    const [showAudioCall, setShowAudioCall] = useState(false);\r\n\r\n\r\n\r\n    const handleCallButtonClick = (userId) => {\r\n        setSelectedUserId(userId);\r\n        setShowCallPopup(true);\r\n        console.log(userId)\r\n    };\r\n    const handleCloseCallPage = () => {\r\n        setShowCallPopup(false);\r\n    };\r\n\r\n    const initiateCall = (toUserId) => {\r\n        navigate('/call', { state: { userId: toUserId } });\r\n      };\r\n\r\n    const formatTimestamp = (timestamp) => {\r\n        const messageDate = new Date(timestamp);\r\n        const today = new Date();\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n        if (\r\n            messageDate.getFullYear() === today.getFullYear() &&\r\n            messageDate.getMonth() === today.getMonth() &&\r\n            messageDate.getDate() === today.getDate()\r\n        ) {\r\n            return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            return messageDate.toLocaleDateString(undefined, options);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // const pc = new RTCPeerConnection();\r\n        // setPeerConnection(pc);\r\n\r\n        if (!receiverId) return;\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to socket server');\r\n            console.log('Socket connected:', socket.id);\r\n\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected from socket server');\r\n            console.log('Socket disconnected');\r\n        });\r\n\r\n        // In chatpage.js\r\n        socket.on('incomingCall', (data) => {\r\n            console.log('Incoming call data:', data);\r\n            const { offer, from } = data;\r\n            showNotification(`Incoming call from user: ${from}`);\r\n\r\n\r\n    return () => {\r\n        socket.off('incomingCall');\r\n    };\r\n}, []);\r\n\r\n\r\n        \r\n        const fetchMessages = async () => {\r\n            const receiverId = localStorage.getItem('userId');\r\n            const senderId = localStorage.getItem('touserId');\r\n            try {\r\n                const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n                const result = await response.json();\r\n                if (Array.isArray(result.messages)) {\r\n                    const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n                    setMessages(sortedMessages);\r\n                    fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\r\n                } else {\r\n                    throw new Error('Unexpected response format');\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to fetch messages:', error);\r\n            }\r\n        };\r\n\r\n\r\n        const fetchReactions = async (messageIds) => {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/getReactions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ messageIds }),\r\n                });\r\n                const result = await response.json();\r\n                setReactions(result.reactions);\r\n            } catch (error) {\r\n                console.error('Failed to fetch reactions:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        socket.emit('joinRoom', receiverId);\r\n\r\n        socket.on('message', (message) => {\r\n            console.log('Received message:', message);\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n            messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n\r\n        socket.on('messageDeleted', (messageId) => {\r\n            setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n        });\r\n\r\n        socket.on('reaction', (reaction) => {\r\n            setReactions((prevReactions) => {\r\n                const updatedReactions = { ...prevReactions };\r\n                if (!updatedReactions[reaction.messageId]) {\r\n                    updatedReactions[reaction.messageId] = [];\r\n                }\r\n                updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n                    (r) => r.userId !== reaction.userId\r\n                );\r\n                updatedReactions[reaction.messageId].push(reaction);\r\n                return updatedReactions;\r\n            });\r\n        });\r\n\r\n                socket.on('callNotification', async (notification) => {\r\n                    const { offer, from } = notification;\r\n                    setIncomingCall({ offer, from });\r\n                    setNotification(`Incoming call from user ${from}`);\r\n                    if (Notification.permission === 'granted') {\r\n                        new Notification('Incoming Call', {\r\n                            body: `User ${from} is calling you`,\r\n                            icon: defaultAvatar,\r\n                        });\r\n                    }\r\n                });\r\n\r\n            socket.on('callOffer', async (offer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    const answer = await peerConnection.createAnswer();\r\n                    await peerConnection.setLocalDescription(answer);\r\n                    socket.emit('callAnswer', { answer, to: receiverId });\r\n                    setIsCallActive(true);\r\n                }\r\n            });\r\n\r\n            // Handle incoming answer\r\n            socket.on('callAnswer', async (answer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n                }\r\n            });\r\n\r\n            // Handle incoming ICE candidates\r\n            socket.on('iceCandidate', async (candidate) => {\r\n                if (peerConnection) {\r\n                    try {\r\n                        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n                    } catch (error) {\r\n                        console.error('Error adding ICE candidate:', error);\r\n                    }\r\n                }\r\n            });\r\n        // };\r\n\r\n        // setupWebRTC();\r\n\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('disconnect');\r\n            socket.off('message');\r\n            socket.off('messageDeleted');\r\n            socket.off('reaction');\r\n            socket.off('callNotification');\r\n            socket.off('callOffer');\r\n            socket.off('callAnswer');\r\n            socket.off('iceCandidate');\r\n            if (peerConnection) {\r\n                peerConnection.close();\r\n            }\r\n            if (localStream) {\r\n                localStream.getTracks().forEach(track => track.stop());\r\n            }\r\n        };\r\n    }, [receiverId, userId, peerConnection, localStream]);\r\n\r\n    \r\n    const setupWebRTC = async () => {\r\n        try {\r\n            const pc = new RTCPeerConnection();\r\n    \r\n            pc.ontrack = (event) => {\r\n                setRemoteStream(event.streams[0]);\r\n            };\r\n    \r\n            pc.onicecandidate = (event) => {\r\n                if (event.candidate) {\r\n                    socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n                }\r\n            };\r\n    \r\n            // Get user media and add tracks\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n            setLocalStream(stream);\r\n            stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n    \r\n            setPeerConnection(pc); // Make sure this is set after everything is configured\r\n        } catch (error) {\r\n            console.error('Error setting up WebRTC:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const handleSendMessage = async () => {\r\n        if (messageText.trim()) {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/sendMessage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        senderId: userId,\r\n                        receiverId: storedToUserId,\r\n                        text: messageText,\r\n                    }),\r\n                });\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    // window.location.reload();\r\n                } else {\r\n                    console.error('SendMessage Error:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('SendMessage Fetch Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/deleteMessage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId }), // Ensure `messageId` is being sent\r\n            });\r\n    \r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                console.log('DeleteMessage success:', result);\r\n                \r\n                // Optionally update UI here if needed\r\n            } else {\r\n                console.error('DeleteMessage Error:', result.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('DeleteMessage Fetch Error:', error);\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    const handleAddReaction = async (messageId, reactionType) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId, userId, reactionType }),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('Reaction added successfully:', result);\r\n            } else {\r\n                const errorText = await response.text();\r\n                console.error('AddReaction Error:', errorText);\r\n            }\r\n        } catch (error) {\r\n            console.error('AddReaction Fetch Error:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const isMessageDeletable = (createdAt) => {\r\n        const messageTime = new Date(createdAt);\r\n        const currentTime = new Date();\r\n        const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n        return diffMinutes <= 2;\r\n    };\r\n\r\n    const handleBack = () => {\r\n        navigate('/home');\r\n    };\r\n\r\n   \r\n    const handleCallUser = (userId) => {\r\n        setSelectedUserId(userId);\r\n        setupWebRTC(); // Setup WebRTC before making a call\r\n        socket.emit('initiateCall', { to: userId });\r\n        setShowCallPopup(true);\r\n    };\r\n    \r\n\r\n    // };\r\n    const handleEndCall = () => {\r\n        if (peerConnection) {\r\n            peerConnection.close();\r\n            setPeerConnection(null);\r\n            setLocalStream(null);\r\n            setRemoteStream(null);\r\n        }\r\n        setIsCallActive(false);\r\n        socket.emit('endCall', { to: receiverId });\r\n    };\r\n\r\n\r\n    const handleAcceptCall = async () => {\r\n        if (incomingCall) {\r\n            await setupWebRTC();\r\n            await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\r\n            const answer = await peerConnection.createAnswer();\r\n            await peerConnection.setLocalDescription(answer);\r\n            socket.emit('callAnswer', { answer, to: incomingCall.from });\r\n            setIsCallActive(true);\r\n            setIncomingCall(null);\r\n        }\r\n    };\r\n\r\n    const handleRejectCall = () => {\r\n        setIncomingCall(null);\r\n        setNotification(null);\r\n    };\r\n\r\n    const showNotification = (message) => {\r\n        console.log('Attempting to show notification:', message);\r\n        if (Notification.permission === 'granted') {\r\n            new Notification(message);\r\n        } else if (Notification.permission === 'default') {\r\n            Notification.requestPermission().then((permission) => {\r\n                if (permission === 'granted') {\r\n                    new Notification(message);\r\n                } else {\r\n                    console.error('Notification permission denied.');\r\n                }\r\n            });\r\n        } else {\r\n            console.error('Notification permission denied.');\r\n        }\r\n    };\r\n    \r\n    \r\n    // Call this function to test notifications\r\n    showNotification('Test notification message');\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n            <div className=\"flex items-center mb-4\">\r\n                <img\r\n                    src={defaultAvatar}\r\n                    alt=\"Avatar\"\r\n                    className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n                />\r\n                <h1 className=\"text-2xl font-bold\">{localStorage.getItem('tousername')}</h1>\r\n            </div>\r\n\r\n            <button\r\n                onClick={handleBack}\r\n                type=\"button\"\r\n                className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n            >\r\n                <div\r\n                    className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n                >\r\n                    <svg\r\n                        width=\"25px\"\r\n                        height=\"25px\"\r\n                        viewBox=\"0 0 1024 1024\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n                <p className=\"translate-x-2\">Go Back</p>\r\n            </button>\r\n\r\n            <div className=\"flex justify-end mb-4\">\r\n                {/* <button\r\n                 \r\n                //  onClick={() => {\r\n                //     const userId = localStorage.getItem('userId'); // Fetch userId from localStorage\r\n                //     initiateCall(userId); // Pass userId to initiateCall\r\n                //     console.log('the userid is: '+userId)\r\n                //   }}\r\n                onClick={() => setShowAudioCall(true)}>Start Audio Call\r\n\r\n                    className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n                    // className=\"bg-blue-500 p-2 rounded\"\r\n                >\r\n                    <PhoneIcon className=\"w-6 h-6\" />\r\n                </button> */}\r\n                <button\r\n                    onClick={() => handleCallUser('video')}\r\n                    className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n                >\r\n                    <VideoCameraIcon className=\"w-6 h-6\" />\r\n                </button>\r\n                {showCallPopup && (\r\n                <div className=\"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75\">\r\n                    <div className=\"bg-white p-6 rounded-lg shadow-lg\">\r\n                        <CallPage\r\n                            receiverId={selectedUserId}\r\n                            onClose={handleCloseCallPage}\r\n                            isCallActive={isCallActive}\r\n                            onEndCall={handleEndCall}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n                {isCallActive && (\r\n        <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n            End Call\r\n        </button>\r\n    )}\r\n            </div>\r\n\r\n            {localStream && (\r\n                <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        muted\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = localStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n{remoteStream && (\r\n                <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = remoteStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n\r\n            <div className=\"flex flex-col flex-grow\">\r\n                <div className=\"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\">\r\n\r\n                    <div className=\"flex flex-col gap-2\">\r\n                        {messages.length > 0 ? (\r\n                            messages.map((message) => (\r\n                                <div\r\n                                    key={message.id}\r\n                                    className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n                                    onMouseEnter={() => setHoveredMessageId(message.id)}\r\n                                    onMouseLeave={() => setHoveredMessageId(null)}\r\n                                >\r\n                                    {/* <div className=\"text-sm\">{message.content}</div> */}\r\n                                    <p>{message.content}</p>\r\n                                    {message.reaction && (\r\n              <div className=\"text-xs mt-3\">\r\n                <span>{message.reaction}</span>\r\n              </div>\r\n            )}\r\n                                    <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n                                     {/* Display reaction */}\r\n            \r\n                                    {hoveredMessageId === message.id && (\r\n                                        <div className=\"absolute bottom-10 right-0 flex space-x-1\">\r\n                                            {['👍', '❤️', '😂'].map((reaction) => (\r\n                                                <button\r\n                                                    key={reaction}\r\n                                                    onClick={() => handleAddReaction(message.id, reaction)}\r\n                                                    className=\"text-xl\"\r\n                                                >\r\n                                                    {reaction}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    )}\r\n                                    <div className=\"flex space-x-2\">\r\n                                        {reactions[message.id]?.map((reaction, index) => (\r\n                                            <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n                                        ))}\r\n                                    </div>\r\n                                    {isMessageDeletable(message.created_at) && (\r\n                                        <button\r\n                                             className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n                                            onClick={() => {\r\n                                                handleDeleteMessage(message.id);\r\n                                                setMessages((prevMessages) =>\r\n                                                    prevMessages.filter((msg) => msg.id !== message.id)\r\n                                                );\r\n                                            }}\r\n                                            // className=\"text-red-500 absolute top-0 right-2\"\r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                    )}\r\n                                    \r\n\r\n                                {/* {message.from_user_id === userId && (\r\n                                <button\r\n                                    className={`delete-button ${hoveredMessageId === message.id ? 'visible' : ''}`}\r\n                                    onClick={() => handleDeleteMessage(message.id)}\r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                            )} */}\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            <p>No messages yet.</p>\r\n                        )}\r\n                        <div ref={messageEndRef} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex mt-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={messageText}\r\n                        onChange={(e) => setMessageText(e.target.value)}\r\n                        placeholder=\"Type your message...\"\r\n                        className=\"w-full px-3 py-2 border rounded\"\r\n                    />\r\n                    <button\r\n                        onClick={() => {\r\n                            handleSendMessage();\r\n                            setMessages((prevMessages) => [\r\n                                ...prevMessages,\r\n                                {\r\n                                    id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n                                    content: messageText,\r\n                                    from_user_id: userId,\r\n                                    created_at: new Date().toISOString(),\r\n                                },\r\n                            ]);\r\n                            \r\n                        }}\r\n                        className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n                    >\r\n                        Send\r\n                        <svg\r\n                            className=\"w-5 h-5\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"1.5\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeLinecap=\"round\"\r\n                            ></path>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}