{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\VoiceCalls.js\",\n  _s = $RefreshSig$();\n// // // // // // // // import React, { useState, useRef, useEffect } from 'react';\n// // // // // // // // import io from 'socket.io-client';\n// // // // // // // // import SimplePeer from 'simple-peer';\n\n// // // // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // // // // // // // const AudioCall = ({ receiverId }) => {\n// // // // // // // //   const [stream, setStream] = useState(null);\n// // // // // // // //   const [peer, setPeer] = useState(null);\n// // // // // // // //   const [calling, setCalling] = useState(false);\n// // // // // // // //   const localAudioRef = useRef(null);\n// // // // // // // //   const remoteAudioRef = useRef(null);\n\n// // // // // // // //   useEffect(() => {\n// // // // // // // //     // Request user media\n// // // // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\n// // // // // // // //       .then(mediaStream => {\n// // // // // // // //         setStream(mediaStream);\n// // // // // // // //         if (localAudioRef.current) {\n// // // // // // // //           localAudioRef.current.srcObject = mediaStream;\n// // // // // // // //         }\n// // // // // // // //       })\n// // // // // // // //       .catch(error => {\n// // // // // // // //         console.error('Error accessing media devices.', error);\n// // // // // // // //       });\n\n// // // // // // // //     socket.on('offer', handleOffer);\n// // // // // // // //     socket.on('answer', handleAnswer);\n// // // // // // // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // // // // // // //     return () => {\n// // // // // // // //       socket.off('offer', handleOffer);\n// // // // // // // //       socket.off('answer', handleAnswer);\n// // // // // // // //       socket.off('ice-candidate', handleIceCandidate);\n// // // // // // // //     };\n// // // // // // // //   }, []);\n\n// // // // // // // //   const startCall = () => {\n// // // // // // // //     const newPeer = new SimplePeer({\n// // // // // // // //       initiator: true,\n// // // // // // // //       trickle: false,\n// // // // // // // //       stream: stream,\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('signal', (data) => {\n// // // // // // // //       socket.emit('offer', { offer: data, to: receiverId });\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // // // //       if (remoteAudioRef.current) {\n// // // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // // // //       }\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // // // //     setPeer(newPeer);\n// // // // // // // //     setCalling(true);\n// // // // // // // //   };\n\n// // // // // // // //   const handleOffer = (data) => {\n// // // // // // // //     const newPeer = new SimplePeer({\n// // // // // // // //       initiator: false,\n// // // // // // // //       trickle: false,\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('signal', (signal) => {\n// // // // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // // // //       if (remoteAudioRef.current) {\n// // // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // // // //       }\n// // // // // // // //     });\n\n// // // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // // // //     newPeer.signal(data.offer);\n// // // // // // // //     setPeer(newPeer);\n// // // // // // // //     setCalling(true);\n// // // // // // // //   };\n\n// // // // // // // //   const handleAnswer = (data) => {\n// // // // // // // //     if (peer) {\n// // // // // // // //       peer.signal(data.answer);\n// // // // // // // //     } else {\n// // // // // // // //       console.error('Peer connection is not initialized.');\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   const handleIceCandidate = (data) => {\n// // // // // // // //     if (peer) {\n// // // // // // // //       peer.signal(data.candidate);\n// // // // // // // //     } else {\n// // // // // // // //       console.error('Peer connection is not initialized.');\n// // // // // // // //     }\n// // // // // // // //   };\n\n// // // // // // // //   return (\n// // // // // // // //     <div>\n// // // // // // // //       <h2>Audio Call</h2>\n// // // // // // // //       <audio ref={localAudioRef} autoPlay muted />\n// // // // // // // //       <audio ref={remoteAudioRef} autoPlay />\n// // // // // // // //       <button onClick={startCall} disabled={calling}>Start Call</button>\n// // // // // // // //     </div>\n// // // // // // // //   );\n// // // // // // // // };\n\n// // // // // // // // export default AudioCall;\n\n// // // // // // // import React, { useState, useRef, useEffect } from 'react';\n// // // // // // // import io from 'socket.io-client';\n// // // // // // // import SimplePeer from 'simple-peer';\n\n// // // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // // // // // // const AudioCall = ({ receiverId }) => {\n// // // // // // //   const [stream, setStream] = useState(null);\n// // // // // // //   const [peer, setPeer] = useState(null);\n// // // // // // //   const [calling, setCalling] = useState(false);\n// // // // // // //   const localAudioRef = useRef(null);\n// // // // // // //   const remoteAudioRef = useRef(null);\n\n// // // // // // //   useEffect(() => {\n// // // // // // //     // Request user media\n// // // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\n// // // // // // //       .then(mediaStream => {\n// // // // // // //         setStream(mediaStream);\n// // // // // // //         if (localAudioRef.current) {\n// // // // // // //           localAudioRef.current.srcObject = mediaStream;\n// // // // // // //         }\n// // // // // // //       })\n// // // // // // //       .catch(error => {\n// // // // // // //         console.error('Error accessing media devices.', error);\n// // // // // // //       });\n\n// // // // // // //     socket.on('offer', handleOffer);\n// // // // // // //     socket.on('answer', handleAnswer);\n// // // // // // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // // // // // //     return () => {\n// // // // // // //       socket.off('offer', handleOffer);\n// // // // // // //       socket.off('answer', handleAnswer);\n// // // // // // //       socket.off('ice-candidate', handleIceCandidate);\n// // // // // // //       // Clean up on component unmount\n// // // // // // //       if (stream) {\n// // // // // // //         stream.getTracks().forEach(track => track.stop());\n// // // // // // //       }\n// // // // // // //       if (peer) {\n// // // // // // //         peer.destroy();\n// // // // // // //       }\n// // // // // // //     };\n// // // // // // //   }, []);\n\n// // // // // // //   const startCall = () => {\n// // // // // // //     const newPeer = new SimplePeer({\n// // // // // // //       initiator: true,\n// // // // // // //       trickle: false,\n// // // // // // //       stream: stream,\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('signal', (data) => {\n// // // // // // //       socket.emit('offer', { offer: data, to: receiverId });\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // // //       if (remoteAudioRef.current) {\n// // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // // //       }\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // // //     setPeer(newPeer);\n// // // // // // //     setCalling(true);\n// // // // // // //   };\n\n// // // // // // //   const handleOffer = (data) => {\n// // // // // // //     const newPeer = new SimplePeer({\n// // // // // // //       initiator: false,\n// // // // // // //       trickle: false,\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('signal', (signal) => {\n// // // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // // //       if (remoteAudioRef.current) {\n// // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // // //       }\n// // // // // // //     });\n\n// // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // // //     newPeer.signal(data.offer);\n// // // // // // //     setPeer(newPeer);\n// // // // // // //     setCalling(true);\n// // // // // // //   };\n\n// // // // // // //   const handleAnswer = (data) => {\n// // // // // // //     if (peer) {\n// // // // // // //       peer.signal(data.answer);\n// // // // // // //     } else {\n// // // // // // //       console.error('Peer connection is not initialized.');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const handleIceCandidate = (data) => {\n// // // // // // //     if (peer) {\n// // // // // // //       peer.signal(data.candidate);\n// // // // // // //     } else {\n// // // // // // //       console.error('Peer connection is not initialized.');\n// // // // // // //     }\n// // // // // // //   };\n\n// // // // // // //   const endCall = () => {\n// // // // // // //     if (peer) {\n// // // // // // //       peer.destroy();\n// // // // // // //       setPeer(null);\n// // // // // // //     }\n// // // // // // //     if (stream) {\n// // // // // // //       stream.getTracks().forEach(track => track.stop());\n// // // // // // //       setStream(null);\n// // // // // // //     }\n// // // // // // //     setCalling(false);\n// // // // // // //   };\n\n// // // // // // //   return (\n// // // // // // //     <div>\n// // // // // // //       <h2>Audio Call</h2>\n// // // // // // //       <audio ref={localAudioRef} autoPlay muted />\n// // // // // // //       <audio ref={remoteAudioRef} autoPlay />\n// // // // // // //       {calling ? (\n// // // // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n// // // // // // //           End Call\n// // // // // // //         </button>\n// // // // // // //       ) : (\n// // // // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n// // // // // // //           Start Call\n// // // // // // //         </button>\n// // // // // // //       )}\n// // // // // // //     </div>\n// // // // // // //   );\n// // // // // // // };\n\n// // // // // // // export default AudioCall;\n\n// // // // // // import React, { useState, useRef, useEffect } from 'react';\n// // // // // // import io from 'socket.io-client';\n// // // // // // import SimplePeer from 'simple-peer';\n// // // // // // import { toast } from 'react-toastify'; // Import React Toastify\n\n// // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // // // // // const AudioCall = ({ receiverId }) => {\n// // // // // //   const [stream, setStream] = useState(null);\n// // // // // //   const [peer, setPeer] = useState(null);\n// // // // // //   const [calling, setCalling] = useState(false);\n// // // // // //   const localAudioRef = useRef(null);\n// // // // // //   const remoteAudioRef = useRef(null);\n\n// // // // // //   useEffect(() => {\n// // // // // //     // Request user media\n// // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\n// // // // // //       .then(mediaStream => {\n// // // // // //         setStream(mediaStream);\n// // // // // //         if (localAudioRef.current) {\n// // // // // //           localAudioRef.current.srcObject = mediaStream;\n// // // // // //         }\n// // // // // //       })\n// // // // // //       .catch(error => {\n// // // // // //         console.error('Error accessing media devices.', error);\n// // // // // //       });\n\n// // // // // //     socket.on('offer', handleOffer);\n// // // // // //     socket.on('answer', handleAnswer);\n// // // // // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // // // // //     return () => {\n// // // // // //       socket.off('offer', handleOffer);\n// // // // // //       socket.off('answer', handleAnswer);\n// // // // // //       socket.off('ice-candidate', handleIceCandidate);\n// // // // // //       // Clean up on component unmount\n// // // // // //       if (stream) {\n// // // // // //         stream.getTracks().forEach(track => track.stop());\n// // // // // //       }\n// // // // // //       if (peer) {\n// // // // // //         peer.destroy();\n// // // // // //       }\n// // // // // //     };\n// // // // // //   }, []);\n\n// // // // // //   const startCall = () => {\n// // // // // //     const newPeer = new SimplePeer({\n// // // // // //       initiator: true,\n// // // // // //       trickle: false,\n// // // // // //       stream: stream,\n// // // // // //     });\n\n// // // // // //     newPeer.on('signal', (data) => {\n// // // // // //       socket.emit('offer', { offer: data, to: receiverId });\n// // // // // //     });\n\n// // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // //       if (remoteAudioRef.current) {\n// // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // //       }\n// // // // // //     });\n\n// // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // //     setPeer(newPeer);\n// // // // // //     setCalling(true);\n// // // // // //   };\n\n// // // // // //   const handleOffer = (data) => {\n// // // // // //     if (Notification.permission === 'granted') {\n// // // // // //       toast('Incoming call from user'); // Show toast notification\n// // // // // //     }\n\n// // // // // //     const newPeer = new SimplePeer({\n// // // // // //       initiator: false,\n// // // // // //       trickle: false,\n// // // // // //     });\n\n// // // // // //     newPeer.on('signal', (signal) => {\n// // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // // // // //     });\n\n// // // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // // //       if (remoteAudioRef.current) {\n// // // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // // //       }\n// // // // // //     });\n\n// // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // // //     newPeer.signal(data.offer);\n// // // // // //     setPeer(newPeer);\n// // // // // //     setCalling(true);\n// // // // // //   };\n\n// // // // // //   const handleAnswer = (data) => {\n// // // // // //     if (peer) {\n// // // // // //       peer.signal(data.answer);\n// // // // // //     } else {\n// // // // // //       console.error('Peer connection is not initialized.');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const handleIceCandidate = (data) => {\n// // // // // //     if (peer) {\n// // // // // //       peer.signal(data.candidate);\n// // // // // //     } else {\n// // // // // //       console.error('Peer connection is not initialized.');\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const endCall = () => {\n// // // // // //     if (peer) {\n// // // // // //       peer.destroy();\n// // // // // //       setPeer(null);\n// // // // // //     }\n// // // // // //     if (stream) {\n// // // // // //       stream.getTracks().forEach(track => track.stop());\n// // // // // //       setStream(null);\n// // // // // //     }\n// // // // // //     setCalling(false);\n// // // // // //   };\n\n// // // // // //   return (\n// // // // // //     <div>\n// // // // // //       <h2>Audio Call</h2>\n// // // // // //       <audio ref={localAudioRef} autoPlay muted />\n// // // // // //       <audio ref={remoteAudioRef} autoPlay />\n// // // // // //       {calling ? (\n// // // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n// // // // // //           End Call\n// // // // // //         </button>\n// // // // // //       ) : (\n// // // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n// // // // // //           Start Call\n// // // // // //         </button>\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // export default AudioCall;\n\n// // // // // import React, { useState, useRef, useEffect } from 'react';\n// // // // // import io from 'socket.io-client';\n// // // // // import SimplePeer from 'simple-peer';\n// // // // // import { toast } from 'react-toastify'; // Import React Toastify\n// // // // // import 'react-toastify/dist/ReactToastify.css'; // Import CSS for React Toastify\n\n// // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // // // // const AudioCall = ({ receiverId }) => {\n// // // // //   const [stream, setStream] = useState(null);\n// // // // //   const [peer, setPeer] = useState(null);\n// // // // //   const [calling, setCalling] = useState(false);\n// // // // //   const localAudioRef = useRef(null);\n// // // // //   const remoteAudioRef = useRef(null);\n\n// // // // //   useEffect(() => {\n// // // // //     // Request user media\n// // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\n// // // // //       .then(mediaStream => {\n// // // // //         setStream(mediaStream);\n// // // // //         if (localAudioRef.current) {\n// // // // //           localAudioRef.current.srcObject = mediaStream;\n// // // // //         }\n// // // // //       })\n// // // // //       .catch(error => {\n// // // // //         console.error('Error accessing media devices.', error);\n// // // // //       });\n\n// // // // //     // Request user permission for notifications\n// // // // //     if ('Notification' in window) {\n// // // // //       Notification.requestPermission().then(permission => {\n// // // // //         if (permission !== 'granted') {\n// // // // //           console.log('Notification permission denied');\n// // // // //         }\n// // // // //       });\n// // // // //     }\n\n// // // // //     socket.on('offer', handleOffer);\n// // // // //     socket.on('answer', handleAnswer);\n// // // // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // // // //     return () => {\n// // // // //       socket.off('offer', handleOffer);\n// // // // //       socket.off('answer', handleAnswer);\n// // // // //       socket.off('ice-candidate', handleIceCandidate);\n// // // // //       // Clean up on component unmount\n// // // // //       if (stream) {\n// // // // //         stream.getTracks().forEach(track => track.stop());\n// // // // //       }\n// // // // //       if (peer) {\n// // // // //         peer.destroy();\n// // // // //       }\n// // // // //     };\n// // // // //   }, []);\n\n// // // // //   const startCall = () => {\n// // // // //     const newPeer = new SimplePeer({\n// // // // //       initiator: true,\n// // // // //       trickle: false,\n// // // // //       stream: stream,\n// // // // //     });\n\n// // // // //     newPeer.on('signal', (data) => {\n// // // // //       socket.emit('offer', { offer: data, to: receiverId });\n// // // // //     });\n\n// // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // //       if (remoteAudioRef.current) {\n// // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // //       }\n// // // // //     });\n\n// // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // //     setPeer(newPeer);\n// // // // //     setCalling(true);\n// // // // //   };\n\n// // // // //   const handleOffer = (data) => {\n// // // // //     if (Notification.permission === 'granted') {\n// // // // //       new Notification('Incoming Call', {\n// // // // //         body: 'You have an incoming audio call from a user.',\n// // // // //         icon: '/path/to/icon.png'  // Optional: add an icon\n// // // // //       });\n// // // // //     }\n\n// // // // //     toast('Incoming call from user'); // Show toast notification\n\n// // // // //     const newPeer = new SimplePeer({\n// // // // //       initiator: false,\n// // // // //       trickle: false,\n// // // // //     });\n\n// // // // //     newPeer.on('signal', (signal) => {\n// // // // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // // // //     });\n\n// // // // //     newPeer.on('stream', (remoteStream) => {\n// // // // //       if (remoteAudioRef.current) {\n// // // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // // //       }\n// // // // //     });\n\n// // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // // //     newPeer.signal(data.offer);\n// // // // //     setPeer(newPeer);\n// // // // //     setCalling(true);\n// // // // //   };\n\n// // // // //   const handleAnswer = (data) => {\n// // // // //     if (peer) {\n// // // // //       peer.signal(data.answer);\n// // // // //     } else {\n// // // // //       console.error('Peer connection is not initialized.');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleIceCandidate = (data) => {\n// // // // //     if (peer) {\n// // // // //       peer.signal(data.candidate);\n// // // // //     } else {\n// // // // //       console.error('Peer connection is not initialized.');\n// // // // //     }\n// // // // //   };\n\n// // // // //   const endCall = () => {\n// // // // //     if (peer) {\n// // // // //       peer.destroy();\n// // // // //       setPeer(null);\n// // // // //     }\n// // // // //     if (stream) {\n// // // // //       stream.getTracks().forEach(track => track.stop());\n// // // // //       setStream(null);\n// // // // //     }\n// // // // //     setCalling(false);\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div>\n// // // // //       <h2>Audio Call</h2>\n// // // // //       <audio ref={localAudioRef} autoPlay muted />\n// // // // //       <audio ref={remoteAudioRef} autoPlay />\n// // // // //       {calling ? (\n// // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n// // // // //           End Call\n// // // // //         </button>\n// // // // //       ) : (\n// // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n// // // // //           Start Call\n// // // // //         </button>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // export default AudioCall;\n\n// // // // import React, { useState, useRef, useEffect } from 'react';\n// // // // import io from 'socket.io-client';\n// // // // import SimplePeer from 'simple-peer';\n// // // // import { toast, ToastContainer } from 'react-toastify'; // Import React Toastify\n// // // // import 'react-toastify/dist/ReactToastify.css'; // Import CSS for React Toastify\n\n// // // // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // // // const AudioCall = ({ receiverId }) => {\n// // // //   const [stream, setStream] = useState(null);\n// // // //   const [peer, setPeer] = useState(null);\n// // // //   const [calling, setCalling] = useState(false);\n// // // //   const localAudioRef = useRef(null);\n// // // //   const remoteAudioRef = useRef(null);\n\n// // // //   useEffect(() => {\n// // // //     // Request user media\n// // // //     navigator.mediaDevices.getUserMedia({ audio: true })\n// // // //       .then(mediaStream => {\n// // // //         setStream(mediaStream);\n// // // //         if (localAudioRef.current) {\n// // // //           localAudioRef.current.srcObject = mediaStream;\n// // // //         }\n// // // //       })\n// // // //       .catch(error => {\n// // // //         console.error('Error accessing media devices.', error);\n// // // //       });\n\n// // // //     // Request user permission for notifications\n// // // //     if ('Notification' in window) {\n// // // //       Notification.requestPermission().then(permission => {\n// // // //         if (permission !== 'granted') {\n// // // //           console.log('Notification permission denied');\n// // // //         }\n// // // //       });\n// // // //     }\n\n// // // //     socket.on('offer', handleOffer);\n// // // //     socket.on('answer', handleAnswer);\n// // // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // // //     return () => {\n// // // //       socket.off('offer', handleOffer);\n// // // //       socket.off('answer', handleAnswer);\n// // // //       socket.off('ice-candidate', handleIceCandidate);\n// // // //       // Clean up on component unmount\n// // // //       if (stream) {\n// // // //         stream.getTracks().forEach(track => track.stop());\n// // // //       }\n// // // //       if (peer) {\n// // // //         peer.destroy();\n// // // //       }\n// // // //     };\n// // // //   }, [stream, peer]);\n\n// // // //   const startCall = () => {\n// // // //     const newPeer = new SimplePeer({\n// // // //       initiator: true,\n// // // //       trickle: false,\n// // // //       stream: stream,\n// // // //     });\n\n// // // //     newPeer.on('signal', (data) => {\n// // // //       console.log('Sending offer to server:', data);\n// // // //       socket.emit('offer', { offer: data, to: receiverId });\n// // // //     });\n\n// // // //     newPeer.on('stream', (remoteStream) => {\n// // // //       if (remoteAudioRef.current) {\n// // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // //       }\n// // // //     });\n\n// // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // //     setPeer(newPeer);\n// // // //     setCalling(true);\n// // // //   };\n\n// // // //   const handleOffer = (data) => {\n// // // //     console.log('Received offer from server:', data);\n\n// // // //     if (Notification.permission === 'granted') {\n// // // //       new Notification('Incoming Call', {\n// // // //         body: 'You have an incoming audio call from a user.',\n// // // //         icon: '/path/to/icon.png'  // Optional: add an icon\n// // // //       });\n// // // //     }\n\n// // // //     toast('Incoming call from user'); // Show toast notification\n\n// // // //     const newPeer = new SimplePeer({\n// // // //       initiator: false,\n// // // //       trickle: false,\n// // // //     });\n\n// // // //     newPeer.on('signal', (signal) => {\n// // // //       console.log('Sending answer to server:', signal);\n// // // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // // //     });\n\n// // // //     newPeer.on('stream', (remoteStream) => {\n// // // //       if (remoteAudioRef.current) {\n// // // //         remoteAudioRef.current.srcObject = remoteStream;\n// // // //       }\n// // // //     });\n\n// // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // // //     newPeer.signal(data.offer);\n// // // //     setPeer(newPeer);\n// // // //     setCalling(true);\n// // // //   };\n\n// // // //   const handleAnswer = (data) => {\n// // // //     console.log('Received answer from server:', data);\n// // // //     if (peer) {\n// // // //       peer.signal(data.answer);\n// // // //     } else {\n// // // //       console.error('Peer connection is not initialized.');\n// // // //     }\n// // // //   };\n\n// // // //   const handleIceCandidate = (data) => {\n// // // //     console.log('Received ICE candidate from server:', data);\n// // // //     if (peer) {\n// // // //       peer.signal(data.candidate);\n// // // //     } else {\n// // // //       console.error('Peer connection is not initialized.');\n// // // //     }\n// // // //   };\n\n// // // //   const endCall = () => {\n// // // //     if (peer) {\n// // // //       peer.destroy();\n// // // //       setPeer(null);\n// // // //     }\n// // // //     if (stream) {\n// // // //       stream.getTracks().forEach(track => track.stop());\n// // // //       setStream(null);\n// // // //     }\n// // // //     setCalling(false);\n// // // //   };\n\n// // // //   return (\n// // // //     <div>\n// // // //       <h2>Audio Call</h2>\n// // // //       <audio ref={localAudioRef} autoPlay muted />\n// // // //       <audio ref={remoteAudioRef} autoPlay />\n// // // //       {calling ? (\n// // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n// // // //           End Call\n// // // //         </button>\n// // // //       ) : (\n// // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n// // // //           Start Call\n// // // //         </button>\n// // // //       )}\n// // // //       <ToastContainer /> {/* Add ToastContainer for toast notifications */}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default AudioCall;\n// // // import React, { useState, useRef, useEffect } from 'react';\n// // // import io from 'socket.io-client';\n// // // import SimplePeer from 'simple-peer';\n// // // import { toast } from 'react-toastify';\n// // // import 'react-toastify/dist/ReactToastify.css';\n\n// // // // Ensure the URL matches your backend server\n// // // const socket = io('http://localhost:3000', {\n// // //   transports: ['websocket'],\n// // //   withCredentials: true\n// // // });\n\n// // // const AudioCall = ({ receiverId }) => {\n// // //   const [stream, setStream] = useState(null);\n// // //   const [peer, setPeer] = useState(null);\n// // //   const [calling, setCalling] = useState(false);\n// // //   const localAudioRef = useRef(null);\n// // //   const remoteAudioRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const initMediaStream = async () => {\n// // //       try {\n// // //         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n// // //         setStream(mediaStream);\n// // //         if (localAudioRef.current) {\n// // //           localAudioRef.current.srcObject = mediaStream;\n// // //         }\n// // //       } catch (error) {\n// // //         console.error('Error accessing media devices:', error);\n// // //       }\n// // //     };\n\n// // //     initMediaStream();\n\n// // //     if ('Notification' in window) {\n// // //       Notification.requestPermission().then(permission => {\n// // //         if (permission !== 'granted') {\n// // //           console.log('Notification permission denied');\n// // //         }\n// // //       });\n// // //     }\n\n// // //     socket.on('offer', handleOffer);\n// // //     socket.on('answer', handleAnswer);\n// // //     socket.on('ice-candidate', handleIceCandidate);\n\n// // //     return () => {\n// // //       socket.off('offer', handleOffer);\n// // //       socket.off('answer', handleAnswer);\n// // //       socket.off('ice-candidate', handleIceCandidate);\n// // //       if (stream) {\n// // //         stream.getTracks().forEach(track => track.stop());\n// // //       }\n// // //       if (peer) {\n// // //         peer.destroy();\n// // //       }\n// // //     };\n// // //   }, [stream, peer]);\n\n// // //   const startCall = () => {\n// // //     const newPeer = new SimplePeer({\n// // //       initiator: true,\n// // //       trickle: false,\n// // //       stream: stream,\n// // //     });\n\n// // //     newPeer.on('signal', (data) => {\n// // //       socket.emit('offer', { offer: data, to: receiverId });\n// // //     });\n\n// // //     newPeer.on('stream', (remoteStream) => {\n// // //       if (remoteAudioRef.current) {\n// // //         remoteAudioRef.current.srcObject = remoteStream;\n// // //       }\n// // //     });\n\n// // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // //     setPeer(newPeer);\n// // //     setCalling(true);\n// // //   };\n\n// // //   const handleOffer = (data) => {\n// // //     if (Notification.permission === 'granted') {\n// // //       new Notification('Incoming Call', {\n// // //         body: 'You have an incoming audio call from a user.',\n// // //         icon: '/path/to/icon.png'\n// // //       });\n// // //     }\n\n// // //     toast('Incoming call from user');\n\n// // //     const newPeer = new SimplePeer({\n// // //       initiator: false,\n// // //       trickle: false,\n// // //     });\n\n// // //     newPeer.on('signal', (signal) => {\n// // //       socket.emit('answer', { answer: signal, to: receiverId });\n// // //     });\n\n// // //     newPeer.on('stream', (remoteStream) => {\n// // //       if (remoteAudioRef.current) {\n// // //         remoteAudioRef.current.srcObject = remoteStream;\n// // //       }\n// // //     });\n\n// // //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// // //     newPeer.signal(data.offer);\n// // //     setPeer(newPeer);\n// // //     setCalling(true);\n// // //   };\n\n// // //   const handleAnswer = (data) => {\n// // //     if (peer) {\n// // //       peer.signal(data.answer);\n// // //     } else {\n// // //       console.error('Peer connection is not initialized.');\n// // //     }\n// // //   };\n\n// // //   const handleIceCandidate = (data) => {\n// // //     if (peer) {\n// // //       peer.signal(data.candidate);\n// // //     } else {\n// // //       console.error('Peer connection is not initialized.');\n// // //     }\n// // //   };\n\n// // //   const endCall = () => {\n// // //     if (peer) {\n// // //       peer.destroy();\n// // //       setPeer(null);\n// // //     }\n// // //     if (stream) {\n// // //       stream.getTracks().forEach(track => track.stop());\n// // //       setStream(null);\n// // //     }\n// // //     setCalling(false);\n// // //   };\n\n// // //   return (\n// // //     <div>\n// // //       <h1>Audio Call</h1>\n// // //       <audio ref={localAudioRef} autoPlay muted />\n// // //       <audio ref={remoteAudioRef} autoPlay />\n// // //       {calling ? (\n// // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n// // //           End Call\n// // //         </button>\n// // //       ) : (\n// // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n// // //           Start Call\n// // //         </button>\n// // //       )}<div\n// // //       class=\"w-32 aspect-square rounded-full relative flex justify-center items-center animate-[spin_3s_linear_infinite] z-40 bg-[conic-gradient(white_0deg,white_300deg,transparent_270deg,transparent_360deg)] before:animate-[spin_2s_linear_infinite] before:absolute before:w-[60%] before:aspect-square before:rounded-full before:z-[80] before:bg-[conic-gradient(white_0deg,white_270deg,transparent_180deg,transparent_360deg)] after:absolute after:w-3/4 after:aspect-square after:rounded-full after:z-[60] after:animate-[spin_3s_linear_infinite] after:bg-[conic-gradient(#065f46_0deg,#065f46_180deg,transparent_180deg,transparent_360deg)]\"\n// // //     >\n// // //       <span\n// // //         class=\"absolute w-[85%] aspect-square rounded-full z-[60] animate-[spin_5s_linear_infinite] bg-[conic-gradient(#34d399_0deg,#34d399_180deg,transparent_180deg,transparent_360deg)]\"\n// // //       >\n// // //       </span>\n// // //     </div>\n\n// // //     </div>\n\n// // //   );\n// // // };\n\n// // // export default AudioCall;\n\n// // import React, { useState, useRef, useEffect } from 'react';\n// // import io from 'socket.io-client';\n// // import SimplePeer from 'simple-peer';\n// // import { toast } from 'react-toastify';\n// // import 'react-toastify/dist/ReactToastify.css';\n\n// // const socket = io('http://localhost:3000', {\n// //   transports: ['websocket'],\n// //   withCredentials: true\n// // });\n\n// // const AudioCall = ({ receiverId }) => {\n// //   const [stream, setStream] = useState(null);\n// //   const [peer, setPeer] = useState(null);\n// //   const [calling, setCalling] = useState(false);\n// //   const localAudioRef = useRef(null);\n// //   const remoteAudioRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const initMediaStream = async () => {\n// //       try {\n// //         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n// //         setStream(mediaStream);\n// //         if (localAudioRef.current) {\n// //           localAudioRef.current.srcObject = mediaStream;\n// //         }\n// //       } catch (error) {\n// //         console.error('Error accessing media devices:', error);\n// //       }\n// //     };\n\n// //     initMediaStream();\n\n// //     if ('Notification' in window) {\n// //       Notification.requestPermission().then(permission => {\n// //         if (permission !== 'granted') {\n// //           console.log('Notification permission denied');\n// //         }\n// //       });\n// //     }\n\n// //     socket.on('offer', handleOffer);\n// //     socket.on('answer', handleAnswer);\n// //     socket.on('ice-candidate', handleIceCandidate);\n\n// //     return () => {\n// //       socket.off('offer', handleOffer);\n// //       socket.off('answer', handleAnswer);\n// //       socket.off('ice-candidate', handleIceCandidate);\n// //       if (stream) {\n// //         stream.getTracks().forEach(track => track.stop());\n// //       }\n// //       if (peer) {\n// //         peer.destroy();\n// //       }\n// //     };\n// //   }, [stream, peer]);\n\n// //   const startCall = () => {\n// //     const newPeer = new SimplePeer({\n// //       initiator: true,\n// //       trickle: false,\n// //       stream: stream,\n// //     });\n\n// //     newPeer.on('signal', (data) => {\n// //       socket.emit('offer', { offer: data, to: receiverId });\n// //     });\n\n// //     newPeer.on('stream', (remoteStream) => {\n// //       if (remoteAudioRef.current) {\n// //         remoteAudioRef.current.srcObject = remoteStream;\n// //       }\n// //     });\n\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// //     setPeer(newPeer);\n// //     setCalling(true);\n// //   };\n\n// //   const handleOffer = (data) => {\n// //     if (Notification.permission === 'granted') {\n// //       new Notification('Incoming Call', {\n// //         body: 'You have an incoming audio call from a user.',\n// //         icon: '/path/to/icon.png'\n// //       });\n// //     }\n\n// //     toast('Incoming call from user');\n\n// //     const newPeer = new SimplePeer({\n// //       initiator: false,\n// //       trickle: false,\n// //     });\n\n// //     newPeer.on('signal', (signal) => {\n// //       socket.emit('answer', { answer: signal, to: receiverId });\n// //     });\n\n// //     newPeer.on('stream', (remoteStream) => {\n// //       if (remoteAudioRef.current) {\n// //         remoteAudioRef.current.srcObject = remoteStream;\n// //       }\n// //     });\n\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// //     newPeer.signal(data.offer);\n// //     setPeer(newPeer);\n// //     setCalling(true);\n// //   };\n\n// //   const handleAnswer = (data) => {\n// //     if (peer) {\n// //       peer.signal(data.answer);\n// //     } else {\n// //       console.error('Peer connection is not initialized.');\n// //     }\n// //   };\n\n// //   const handleIceCandidate = (data) => {\n// //     if (peer) {\n// //       peer.signal(data.candidate);\n// //     } else {\n// //       console.error('Peer connection is not initialized.');\n// //     }\n// //   };\n\n// //   const endCall = () => {\n// //     if (peer) {\n// //       peer.destroy();\n// //       setPeer(null);\n// //     }\n// //     if (stream) {\n// //       stream.getTracks().forEach(track => track.stop());\n// //       setStream(null);\n// //     }\n// //     setCalling(false);\n// //   };\n\n// //   return (\n// //     <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n// //       <h1 className=\"text-2xl mb-4\">Audio Call</h1>\n// //       <div className=\"mb-4\">\n// //         <audio ref={localAudioRef} autoPlay muted />\n// //         <audio ref={remoteAudioRef} autoPlay />\n// //       </div>\n// //       {calling ? (\n// //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded mb-4\">\n// //           End Call\n// //         </button>\n// //       ) : (\n// //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded mb-4\">\n// //           Start Call\n// //         </button>\n// //       )}\n// // <div class=\"flex flex-row gap-2\">\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"></div>\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\"></div>\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"></div>\n// // </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default AudioCall;\n// import React, { useState, useRef, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import SimplePeer from 'simple-peer';\n// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n\n// // Make sure this URL matches your backend configuration\n// const socket = io('http://localhost:3002', {\n//   transports: ['websocket'],\n//   withCredentials: true\n// });\n\n// const AudioCall = ({ receiverId }) => {\n//   const [stream, setStream] = useState(null);\n//   const [peer, setPeer] = useState(null);\n//   const [calling, setCalling] = useState(false);\n//   const localAudioRef = useRef(null);\n//   const remoteAudioRef = useRef(null);\n\n//   useEffect(() => {\n//     const initMediaStream = async () => {\n//       try {\n//         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n//         setStream(mediaStream);\n//         if (localAudioRef.current) {\n//           localAudioRef.current.srcObject = mediaStream;\n//         }\n//       } catch (error) {\n//         console.error('Error accessing media devices:', error);\n//       }\n//     };\n\n//     initMediaStream();\n\n//     if ('Notification' in window) {\n//       Notification.requestPermission().then(permission => {\n//         if (permission !== 'granted') {\n//           console.log('Notification permission denied');\n//         }\n//       });\n//     }\n\n//     socket.on('offer', handleOffer);\n//     socket.on('answer', handleAnswer);\n//     socket.on('ice-candidate', handleIceCandidate);\n\n//     return () => {\n//       socket.off('offer', handleOffer);\n//       socket.off('answer', handleAnswer);\n//       socket.off('ice-candidate', handleIceCandidate);\n//       if (stream) {\n//         stream.getTracks().forEach(track => track.stop());\n//       }\n//       if (peer) {\n//         peer.destroy();\n//       }\n//     };\n//   }, [stream, peer]);\n\n//   const startCall = () => {\n//     const newPeer = new SimplePeer({\n//       initiator: true,\n//       trickle: false,\n//       stream: stream,\n//     });\n\n//     newPeer.on('signal', (data) => {\n//       socket.emit('offer', { offer: data, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleOffer = (data) => {\n//     if (Notification.permission === 'granted') {\n//       new Notification('Incoming Call', {\n//         body: 'You have an incoming audio call from a user.',\n//         icon: '/path/to/icon.png'\n//       });\n//     }\n\n//     toast('Incoming call from user');\n\n//     const newPeer = new SimplePeer({\n//       initiator: false,\n//       trickle: false,\n//     });\n\n//     newPeer.on('signal', (signal) => {\n//       socket.emit('answer', { answer: signal, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     newPeer.signal(data.offer);\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleAnswer = (data) => {\n//     if (peer) {\n//       peer.signal(data.answer);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   const handleIceCandidate = (data) => {\n//     if (peer) {\n//       peer.signal(data.candidate);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   const endCall = () => {\n//     if (peer) {\n//       peer.destroy();\n//       setPeer(null);\n//     }\n//     if (stream) {\n//       stream.getTracks().forEach(track => track.stop());\n//       setStream(null);\n//     }\n//     setCalling(false);\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n\n// <button\n//   type=\"button\"\n//   class=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group\"\n// >\n//   <div\n//     class=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n//   >\n//     <svg\n//       width=\"25px\"\n//       height=\"25px\"\n//       viewBox=\"0 0 1024 1024\"\n//       xmlns=\"http://www.w3.org/2000/svg\"\n//     >\n//       <path\n//         fill=\"#000000\"\n//         d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n//       ></path>\n//       <path\n//         fill=\"#000000\"\n//         d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n//       ></path>\n//     </svg>\n//   </div>\n//   <p class=\"translate-x-2\">Go Back</p>\n// </button>\n\n//       <h1 className=\"text-2xl mb-4\">Audio Call</h1>\n//       <div className=\"mb-4\">\n//         <audio ref={localAudioRef} autoPlay muted />\n//         <audio ref={remoteAudioRef} autoPlay />\n//       </div>\n//       {calling ? (\n//         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded mb-4\">\n//           End Call\n//         </button>\n//       ) : (\n//         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded mb-4\">\n//           Start Call\n//         </button>\n//       )}\n//       <div className=\"flex flex-row gap-2\">\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\" />\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default AudioCall;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport SimplePeer from 'simple-peer';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Make sure this URL matches your backend configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3002', {\n  transports: ['websocket'],\n  withCredentials: true\n});\nconst AudioCall = ({\n  receiverId\n}) => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [peer, setPeer] = useState(null);\n  const [calling, setCalling] = useState(false);\n  const localAudioRef = useRef(null);\n  const remoteAudioRef = useRef(null);\n  useEffect(() => {\n    const initMediaStream = async () => {\n      try {\n        const mediaStream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        setStream(mediaStream);\n        if (calling && localAudioRef.current) {\n          localAudioRef.current.srcObject = mediaStream;\n        }\n      } catch (error) {\n        console.error('Error accessing media devices:', error);\n      }\n    };\n    initMediaStream();\n    if ('Notification' in window) {\n      Notification.requestPermission().then(permission => {\n        if (permission !== 'granted') {\n          console.log('Notification permission denied');\n        }\n      });\n    }\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleIceCandidate);\n    return () => {\n      socket.off('offer', handleOffer);\n      socket.off('answer', handleAnswer);\n      socket.off('ice-candidate', handleIceCandidate);\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (peer) {\n        peer.destroy();\n      }\n    };\n  }, [stream, peer, calling]);\n  const startCall = () => {\n    const newPeer = new SimplePeer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    newPeer.on('signal', data => {\n      socket.emit('offer', {\n        offer: data,\n        to: receiverId\n      });\n    });\n    newPeer.on('stream', remoteStream => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStream;\n      }\n    });\n    newPeer.on('error', err => console.error('Peer error:', err));\n    setPeer(newPeer);\n    setCalling(true);\n  };\n  const handleOffer = data => {\n    if (Notification.permission === 'granted') {\n      new Notification('Incoming Call', {\n        body: 'You have an incoming audio call from a user.',\n        icon: '/path/to/icon.png'\n      });\n    }\n    toast('Incoming call from user');\n    const newPeer = new SimplePeer({\n      initiator: false,\n      trickle: false\n    });\n    newPeer.on('signal', signal => {\n      socket.emit('answer', {\n        answer: signal,\n        to: receiverId\n      });\n    });\n    newPeer.on('stream', remoteStream => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStream;\n      }\n    });\n    newPeer.on('error', err => console.error('Peer error:', err));\n    newPeer.signal(data.offer);\n    setPeer(newPeer);\n    setCalling(true);\n  };\n  const handleAnswer = data => {\n    if (peer) {\n      peer.signal(data.answer);\n    } else {\n      console.error('Peer connection is not initialized.');\n    }\n  };\n  const handleIceCandidate = data => {\n    if (peer) {\n      peer.signal(data.candidate);\n    } else {\n      console.error('Peer connection is not initialized.');\n    }\n  };\n  const handleBack = () => {\n    navigate('/home');\n  };\n  const endCall = () => {\n    if (peer) {\n      peer.destroy();\n      setPeer(null);\n    }\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    if (localAudioRef.current) {\n      localAudioRef.current.srcObject = null; // Clear local audio\n    }\n    if (remoteAudioRef.current) {\n      remoteAudioRef.current.srcObject = null; // Clear remote audio\n    }\n    setCalling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      type: \"button\",\n      className: \"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"25px\",\n          height: \"25px\",\n          viewBox: \"0 0 1024 1024\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1435,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"translate-x-2\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1417,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl mb-4\",\n      children: \"Audio Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: localAudioRef,\n        autoPlay: true,\n        muted: calling\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: remoteAudioRef,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1445,\n      columnNumber: 7\n    }, this), calling ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endCall,\n      className: \"bg-red-500 text-white p-2 rounded mb-4\",\n      children: \"End Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1450,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startCall,\n      className: \"bg-blue-500 text-white p-2 rounded mb-4\",\n      children: \"Start Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1454,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-row gap-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1458,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1416,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioCall, \"uSjBznZRr9zKDgG1tWkq23aYomo=\");\n_c = AudioCall;\nexport default AudioCall;\nvar _c;\n$RefreshReg$(_c, \"AudioCall\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","SimplePeer","toast","jsxDEV","_jsxDEV","socket","transports","withCredentials","AudioCall","receiverId","_s","stream","setStream","peer","setPeer","calling","setCalling","localAudioRef","remoteAudioRef","initMediaStream","mediaStream","navigator","mediaDevices","getUserMedia","audio","current","srcObject","error","console","window","Notification","requestPermission","then","permission","log","on","handleOffer","handleAnswer","handleIceCandidate","off","getTracks","forEach","track","stop","destroy","startCall","newPeer","initiator","trickle","data","emit","offer","to","remoteStream","err","body","icon","signal","answer","candidate","handleBack","navigate","endCall","className","children","onClick","type","width","height","viewBox","xmlns","fill","d","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/VoiceCalls.js"],"sourcesContent":["// // // // // // // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // // // // // // import io from 'socket.io-client';\r\n// // // // // // // // import SimplePeer from 'simple-peer';\r\n\r\n// // // // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // // // // // // // const AudioCall = ({ receiverId }) => {\r\n// // // // // // // //   const [stream, setStream] = useState(null);\r\n// // // // // // // //   const [peer, setPeer] = useState(null);\r\n// // // // // // // //   const [calling, setCalling] = useState(false);\r\n// // // // // // // //   const localAudioRef = useRef(null);\r\n// // // // // // // //   const remoteAudioRef = useRef(null);\r\n\r\n// // // // // // // //   useEffect(() => {\r\n// // // // // // // //     // Request user media\r\n// // // // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// // // // // // // //       .then(mediaStream => {\r\n// // // // // // // //         setStream(mediaStream);\r\n// // // // // // // //         if (localAudioRef.current) {\r\n// // // // // // // //           localAudioRef.current.srcObject = mediaStream;\r\n// // // // // // // //         }\r\n// // // // // // // //       })\r\n// // // // // // // //       .catch(error => {\r\n// // // // // // // //         console.error('Error accessing media devices.', error);\r\n// // // // // // // //       });\r\n\r\n// // // // // // // //     socket.on('offer', handleOffer);\r\n// // // // // // // //     socket.on('answer', handleAnswer);\r\n// // // // // // // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // // // // // // //     return () => {\r\n// // // // // // // //       socket.off('offer', handleOffer);\r\n// // // // // // // //       socket.off('answer', handleAnswer);\r\n// // // // // // // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // // // // // // //     };\r\n// // // // // // // //   }, []);\r\n\r\n// // // // // // // //   const startCall = () => {\r\n// // // // // // // //     const newPeer = new SimplePeer({\r\n// // // // // // // //       initiator: true,\r\n// // // // // // // //       trickle: false,\r\n// // // // // // // //       stream: stream,\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('signal', (data) => {\r\n// // // // // // // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // // // //       if (remoteAudioRef.current) {\r\n// // // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // // // //       }\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // // // //     setPeer(newPeer);\r\n// // // // // // // //     setCalling(true);\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   const handleOffer = (data) => {\r\n// // // // // // // //     const newPeer = new SimplePeer({\r\n// // // // // // // //       initiator: false,\r\n// // // // // // // //       trickle: false,\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('signal', (signal) => {\r\n// // // // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // // // //       if (remoteAudioRef.current) {\r\n// // // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // // // //       }\r\n// // // // // // // //     });\r\n\r\n// // // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // // // //     newPeer.signal(data.offer);\r\n// // // // // // // //     setPeer(newPeer);\r\n// // // // // // // //     setCalling(true);\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   const handleAnswer = (data) => {\r\n// // // // // // // //     if (peer) {\r\n// // // // // // // //       peer.signal(data.answer);\r\n// // // // // // // //     } else {\r\n// // // // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   const handleIceCandidate = (data) => {\r\n// // // // // // // //     if (peer) {\r\n// // // // // // // //       peer.signal(data.candidate);\r\n// // // // // // // //     } else {\r\n// // // // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // // // //     }\r\n// // // // // // // //   };\r\n\r\n// // // // // // // //   return (\r\n// // // // // // // //     <div>\r\n// // // // // // // //       <h2>Audio Call</h2>\r\n// // // // // // // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // // // // // // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // // // // // // //       <button onClick={startCall} disabled={calling}>Start Call</button>\r\n// // // // // // // //     </div>\r\n// // // // // // // //   );\r\n// // // // // // // // };\r\n\r\n// // // // // // // // export default AudioCall;\r\n\r\n\r\n// // // // // // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // // // // // import io from 'socket.io-client';\r\n// // // // // // // import SimplePeer from 'simple-peer';\r\n\r\n// // // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // // // // // // const AudioCall = ({ receiverId }) => {\r\n// // // // // // //   const [stream, setStream] = useState(null);\r\n// // // // // // //   const [peer, setPeer] = useState(null);\r\n// // // // // // //   const [calling, setCalling] = useState(false);\r\n// // // // // // //   const localAudioRef = useRef(null);\r\n// // // // // // //   const remoteAudioRef = useRef(null);\r\n\r\n// // // // // // //   useEffect(() => {\r\n// // // // // // //     // Request user media\r\n// // // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// // // // // // //       .then(mediaStream => {\r\n// // // // // // //         setStream(mediaStream);\r\n// // // // // // //         if (localAudioRef.current) {\r\n// // // // // // //           localAudioRef.current.srcObject = mediaStream;\r\n// // // // // // //         }\r\n// // // // // // //       })\r\n// // // // // // //       .catch(error => {\r\n// // // // // // //         console.error('Error accessing media devices.', error);\r\n// // // // // // //       });\r\n\r\n// // // // // // //     socket.on('offer', handleOffer);\r\n// // // // // // //     socket.on('answer', handleAnswer);\r\n// // // // // // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // // // // // //     return () => {\r\n// // // // // // //       socket.off('offer', handleOffer);\r\n// // // // // // //       socket.off('answer', handleAnswer);\r\n// // // // // // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // // // // // //       // Clean up on component unmount\r\n// // // // // // //       if (stream) {\r\n// // // // // // //         stream.getTracks().forEach(track => track.stop());\r\n// // // // // // //       }\r\n// // // // // // //       if (peer) {\r\n// // // // // // //         peer.destroy();\r\n// // // // // // //       }\r\n// // // // // // //     };\r\n// // // // // // //   }, []);\r\n\r\n// // // // // // //   const startCall = () => {\r\n// // // // // // //     const newPeer = new SimplePeer({\r\n// // // // // // //       initiator: true,\r\n// // // // // // //       trickle: false,\r\n// // // // // // //       stream: stream,\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('signal', (data) => {\r\n// // // // // // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // // //       if (remoteAudioRef.current) {\r\n// // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // // //       }\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // // //     setPeer(newPeer);\r\n// // // // // // //     setCalling(true);\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const handleOffer = (data) => {\r\n// // // // // // //     const newPeer = new SimplePeer({\r\n// // // // // // //       initiator: false,\r\n// // // // // // //       trickle: false,\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('signal', (signal) => {\r\n// // // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // // //       if (remoteAudioRef.current) {\r\n// // // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // // //       }\r\n// // // // // // //     });\r\n\r\n// // // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // // //     newPeer.signal(data.offer);\r\n// // // // // // //     setPeer(newPeer);\r\n// // // // // // //     setCalling(true);\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const handleAnswer = (data) => {\r\n// // // // // // //     if (peer) {\r\n// // // // // // //       peer.signal(data.answer);\r\n// // // // // // //     } else {\r\n// // // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const handleIceCandidate = (data) => {\r\n// // // // // // //     if (peer) {\r\n// // // // // // //       peer.signal(data.candidate);\r\n// // // // // // //     } else {\r\n// // // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // // //     }\r\n// // // // // // //   };\r\n\r\n// // // // // // //   const endCall = () => {\r\n// // // // // // //     if (peer) {\r\n// // // // // // //       peer.destroy();\r\n// // // // // // //       setPeer(null);\r\n// // // // // // //     }\r\n// // // // // // //     if (stream) {\r\n// // // // // // //       stream.getTracks().forEach(track => track.stop());\r\n// // // // // // //       setStream(null);\r\n// // // // // // //     }\r\n// // // // // // //     setCalling(false);\r\n// // // // // // //   };\r\n\r\n// // // // // // //   return (\r\n// // // // // // //     <div>\r\n// // // // // // //       <h2>Audio Call</h2>\r\n// // // // // // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // // // // // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // // // // // //       {calling ? (\r\n// // // // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n// // // // // // //           End Call\r\n// // // // // // //         </button>\r\n// // // // // // //       ) : (\r\n// // // // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n// // // // // // //           Start Call\r\n// // // // // // //         </button>\r\n// // // // // // //       )}\r\n// // // // // // //     </div>\r\n// // // // // // //   );\r\n// // // // // // // };\r\n\r\n// // // // // // // export default AudioCall;\r\n\r\n\r\n// // // // // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // // // // import io from 'socket.io-client';\r\n// // // // // // import SimplePeer from 'simple-peer';\r\n// // // // // // import { toast } from 'react-toastify'; // Import React Toastify\r\n\r\n// // // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // // // // // const AudioCall = ({ receiverId }) => {\r\n// // // // // //   const [stream, setStream] = useState(null);\r\n// // // // // //   const [peer, setPeer] = useState(null);\r\n// // // // // //   const [calling, setCalling] = useState(false);\r\n// // // // // //   const localAudioRef = useRef(null);\r\n// // // // // //   const remoteAudioRef = useRef(null);\r\n\r\n// // // // // //   useEffect(() => {\r\n// // // // // //     // Request user media\r\n// // // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// // // // // //       .then(mediaStream => {\r\n// // // // // //         setStream(mediaStream);\r\n// // // // // //         if (localAudioRef.current) {\r\n// // // // // //           localAudioRef.current.srcObject = mediaStream;\r\n// // // // // //         }\r\n// // // // // //       })\r\n// // // // // //       .catch(error => {\r\n// // // // // //         console.error('Error accessing media devices.', error);\r\n// // // // // //       });\r\n\r\n// // // // // //     socket.on('offer', handleOffer);\r\n// // // // // //     socket.on('answer', handleAnswer);\r\n// // // // // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // // // // //     return () => {\r\n// // // // // //       socket.off('offer', handleOffer);\r\n// // // // // //       socket.off('answer', handleAnswer);\r\n// // // // // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // // // // //       // Clean up on component unmount\r\n// // // // // //       if (stream) {\r\n// // // // // //         stream.getTracks().forEach(track => track.stop());\r\n// // // // // //       }\r\n// // // // // //       if (peer) {\r\n// // // // // //         peer.destroy();\r\n// // // // // //       }\r\n// // // // // //     };\r\n// // // // // //   }, []);\r\n\r\n// // // // // //   const startCall = () => {\r\n// // // // // //     const newPeer = new SimplePeer({\r\n// // // // // //       initiator: true,\r\n// // // // // //       trickle: false,\r\n// // // // // //       stream: stream,\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('signal', (data) => {\r\n// // // // // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // //       if (remoteAudioRef.current) {\r\n// // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // //       }\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // //     setPeer(newPeer);\r\n// // // // // //     setCalling(true);\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleOffer = (data) => {\r\n// // // // // //     if (Notification.permission === 'granted') {\r\n// // // // // //       toast('Incoming call from user'); // Show toast notification\r\n// // // // // //     }\r\n\r\n// // // // // //     const newPeer = new SimplePeer({\r\n// // // // // //       initiator: false,\r\n// // // // // //       trickle: false,\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('signal', (signal) => {\r\n// // // // // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // // //       if (remoteAudioRef.current) {\r\n// // // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // // //       }\r\n// // // // // //     });\r\n\r\n// // // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // // //     newPeer.signal(data.offer);\r\n// // // // // //     setPeer(newPeer);\r\n// // // // // //     setCalling(true);\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleAnswer = (data) => {\r\n// // // // // //     if (peer) {\r\n// // // // // //       peer.signal(data.answer);\r\n// // // // // //     } else {\r\n// // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleIceCandidate = (data) => {\r\n// // // // // //     if (peer) {\r\n// // // // // //       peer.signal(data.candidate);\r\n// // // // // //     } else {\r\n// // // // // //       console.error('Peer connection is not initialized.');\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const endCall = () => {\r\n// // // // // //     if (peer) {\r\n// // // // // //       peer.destroy();\r\n// // // // // //       setPeer(null);\r\n// // // // // //     }\r\n// // // // // //     if (stream) {\r\n// // // // // //       stream.getTracks().forEach(track => track.stop());\r\n// // // // // //       setStream(null);\r\n// // // // // //     }\r\n// // // // // //     setCalling(false);\r\n// // // // // //   };\r\n\r\n// // // // // //   return (\r\n// // // // // //     <div>\r\n// // // // // //       <h2>Audio Call</h2>\r\n// // // // // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // // // // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // // // // //       {calling ? (\r\n// // // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n// // // // // //           End Call\r\n// // // // // //         </button>\r\n// // // // // //       ) : (\r\n// // // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n// // // // // //           Start Call\r\n// // // // // //         </button>\r\n// // // // // //       )}\r\n// // // // // //     </div>\r\n// // // // // //   );\r\n// // // // // // };\r\n\r\n// // // // // // export default AudioCall;\r\n\r\n\r\n// // // // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // // // import io from 'socket.io-client';\r\n// // // // // import SimplePeer from 'simple-peer';\r\n// // // // // import { toast } from 'react-toastify'; // Import React Toastify\r\n// // // // // import 'react-toastify/dist/ReactToastify.css'; // Import CSS for React Toastify\r\n\r\n// // // // // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // // // // const AudioCall = ({ receiverId }) => {\r\n// // // // //   const [stream, setStream] = useState(null);\r\n// // // // //   const [peer, setPeer] = useState(null);\r\n// // // // //   const [calling, setCalling] = useState(false);\r\n// // // // //   const localAudioRef = useRef(null);\r\n// // // // //   const remoteAudioRef = useRef(null);\r\n\r\n// // // // //   useEffect(() => {\r\n// // // // //     // Request user media\r\n// // // // //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// // // // //       .then(mediaStream => {\r\n// // // // //         setStream(mediaStream);\r\n// // // // //         if (localAudioRef.current) {\r\n// // // // //           localAudioRef.current.srcObject = mediaStream;\r\n// // // // //         }\r\n// // // // //       })\r\n// // // // //       .catch(error => {\r\n// // // // //         console.error('Error accessing media devices.', error);\r\n// // // // //       });\r\n\r\n// // // // //     // Request user permission for notifications\r\n// // // // //     if ('Notification' in window) {\r\n// // // // //       Notification.requestPermission().then(permission => {\r\n// // // // //         if (permission !== 'granted') {\r\n// // // // //           console.log('Notification permission denied');\r\n// // // // //         }\r\n// // // // //       });\r\n// // // // //     }\r\n\r\n// // // // //     socket.on('offer', handleOffer);\r\n// // // // //     socket.on('answer', handleAnswer);\r\n// // // // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // // // //     return () => {\r\n// // // // //       socket.off('offer', handleOffer);\r\n// // // // //       socket.off('answer', handleAnswer);\r\n// // // // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // // // //       // Clean up on component unmount\r\n// // // // //       if (stream) {\r\n// // // // //         stream.getTracks().forEach(track => track.stop());\r\n// // // // //       }\r\n// // // // //       if (peer) {\r\n// // // // //         peer.destroy();\r\n// // // // //       }\r\n// // // // //     };\r\n// // // // //   }, []);\r\n\r\n// // // // //   const startCall = () => {\r\n// // // // //     const newPeer = new SimplePeer({\r\n// // // // //       initiator: true,\r\n// // // // //       trickle: false,\r\n// // // // //       stream: stream,\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('signal', (data) => {\r\n// // // // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // //       if (remoteAudioRef.current) {\r\n// // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // //       }\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // //     setPeer(newPeer);\r\n// // // // //     setCalling(true);\r\n// // // // //   };\r\n\r\n// // // // //   const handleOffer = (data) => {\r\n// // // // //     if (Notification.permission === 'granted') {\r\n// // // // //       new Notification('Incoming Call', {\r\n// // // // //         body: 'You have an incoming audio call from a user.',\r\n// // // // //         icon: '/path/to/icon.png'  // Optional: add an icon\r\n// // // // //       });\r\n// // // // //     }\r\n\r\n// // // // //     toast('Incoming call from user'); // Show toast notification\r\n\r\n// // // // //     const newPeer = new SimplePeer({\r\n// // // // //       initiator: false,\r\n// // // // //       trickle: false,\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('signal', (signal) => {\r\n// // // // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // // //       if (remoteAudioRef.current) {\r\n// // // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // // //       }\r\n// // // // //     });\r\n\r\n// // // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // // //     newPeer.signal(data.offer);\r\n// // // // //     setPeer(newPeer);\r\n// // // // //     setCalling(true);\r\n// // // // //   };\r\n\r\n// // // // //   const handleAnswer = (data) => {\r\n// // // // //     if (peer) {\r\n// // // // //       peer.signal(data.answer);\r\n// // // // //     } else {\r\n// // // // //       console.error('Peer connection is not initialized.');\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const handleIceCandidate = (data) => {\r\n// // // // //     if (peer) {\r\n// // // // //       peer.signal(data.candidate);\r\n// // // // //     } else {\r\n// // // // //       console.error('Peer connection is not initialized.');\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const endCall = () => {\r\n// // // // //     if (peer) {\r\n// // // // //       peer.destroy();\r\n// // // // //       setPeer(null);\r\n// // // // //     }\r\n// // // // //     if (stream) {\r\n// // // // //       stream.getTracks().forEach(track => track.stop());\r\n// // // // //       setStream(null);\r\n// // // // //     }\r\n// // // // //     setCalling(false);\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div>\r\n// // // // //       <h2>Audio Call</h2>\r\n// // // // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // // // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // // // //       {calling ? (\r\n// // // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n// // // // //           End Call\r\n// // // // //         </button>\r\n// // // // //       ) : (\r\n// // // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n// // // // //           Start Call\r\n// // // // //         </button>\r\n// // // // //       )}\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // };\r\n\r\n// // // // // export default AudioCall;\r\n\r\n\r\n// // // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // // import io from 'socket.io-client';\r\n// // // // import SimplePeer from 'simple-peer';\r\n// // // // import { toast, ToastContainer } from 'react-toastify'; // Import React Toastify\r\n// // // // import 'react-toastify/dist/ReactToastify.css'; // Import CSS for React Toastify\r\n\r\n// // // // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // // // const AudioCall = ({ receiverId }) => {\r\n// // // //   const [stream, setStream] = useState(null);\r\n// // // //   const [peer, setPeer] = useState(null);\r\n// // // //   const [calling, setCalling] = useState(false);\r\n// // // //   const localAudioRef = useRef(null);\r\n// // // //   const remoteAudioRef = useRef(null);\r\n\r\n// // // //   useEffect(() => {\r\n// // // //     // Request user media\r\n// // // //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// // // //       .then(mediaStream => {\r\n// // // //         setStream(mediaStream);\r\n// // // //         if (localAudioRef.current) {\r\n// // // //           localAudioRef.current.srcObject = mediaStream;\r\n// // // //         }\r\n// // // //       })\r\n// // // //       .catch(error => {\r\n// // // //         console.error('Error accessing media devices.', error);\r\n// // // //       });\r\n\r\n// // // //     // Request user permission for notifications\r\n// // // //     if ('Notification' in window) {\r\n// // // //       Notification.requestPermission().then(permission => {\r\n// // // //         if (permission !== 'granted') {\r\n// // // //           console.log('Notification permission denied');\r\n// // // //         }\r\n// // // //       });\r\n// // // //     }\r\n\r\n// // // //     socket.on('offer', handleOffer);\r\n// // // //     socket.on('answer', handleAnswer);\r\n// // // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // // //     return () => {\r\n// // // //       socket.off('offer', handleOffer);\r\n// // // //       socket.off('answer', handleAnswer);\r\n// // // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // // //       // Clean up on component unmount\r\n// // // //       if (stream) {\r\n// // // //         stream.getTracks().forEach(track => track.stop());\r\n// // // //       }\r\n// // // //       if (peer) {\r\n// // // //         peer.destroy();\r\n// // // //       }\r\n// // // //     };\r\n// // // //   }, [stream, peer]);\r\n\r\n// // // //   const startCall = () => {\r\n// // // //     const newPeer = new SimplePeer({\r\n// // // //       initiator: true,\r\n// // // //       trickle: false,\r\n// // // //       stream: stream,\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('signal', (data) => {\r\n// // // //       console.log('Sending offer to server:', data);\r\n// // // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // //       if (remoteAudioRef.current) {\r\n// // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // //       }\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // //     setPeer(newPeer);\r\n// // // //     setCalling(true);\r\n// // // //   };\r\n\r\n// // // //   const handleOffer = (data) => {\r\n// // // //     console.log('Received offer from server:', data);\r\n\r\n// // // //     if (Notification.permission === 'granted') {\r\n// // // //       new Notification('Incoming Call', {\r\n// // // //         body: 'You have an incoming audio call from a user.',\r\n// // // //         icon: '/path/to/icon.png'  // Optional: add an icon\r\n// // // //       });\r\n// // // //     }\r\n\r\n// // // //     toast('Incoming call from user'); // Show toast notification\r\n\r\n// // // //     const newPeer = new SimplePeer({\r\n// // // //       initiator: false,\r\n// // // //       trickle: false,\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('signal', (signal) => {\r\n// // // //       console.log('Sending answer to server:', signal);\r\n// // // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('stream', (remoteStream) => {\r\n// // // //       if (remoteAudioRef.current) {\r\n// // // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // // //       }\r\n// // // //     });\r\n\r\n// // // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // // //     newPeer.signal(data.offer);\r\n// // // //     setPeer(newPeer);\r\n// // // //     setCalling(true);\r\n// // // //   };\r\n\r\n// // // //   const handleAnswer = (data) => {\r\n// // // //     console.log('Received answer from server:', data);\r\n// // // //     if (peer) {\r\n// // // //       peer.signal(data.answer);\r\n// // // //     } else {\r\n// // // //       console.error('Peer connection is not initialized.');\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const handleIceCandidate = (data) => {\r\n// // // //     console.log('Received ICE candidate from server:', data);\r\n// // // //     if (peer) {\r\n// // // //       peer.signal(data.candidate);\r\n// // // //     } else {\r\n// // // //       console.error('Peer connection is not initialized.');\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const endCall = () => {\r\n// // // //     if (peer) {\r\n// // // //       peer.destroy();\r\n// // // //       setPeer(null);\r\n// // // //     }\r\n// // // //     if (stream) {\r\n// // // //       stream.getTracks().forEach(track => track.stop());\r\n// // // //       setStream(null);\r\n// // // //     }\r\n// // // //     setCalling(false);\r\n// // // //   };\r\n\r\n// // // //   return (\r\n// // // //     <div>\r\n// // // //       <h2>Audio Call</h2>\r\n// // // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // // //       {calling ? (\r\n// // // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n// // // //           End Call\r\n// // // //         </button>\r\n// // // //       ) : (\r\n// // // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n// // // //           Start Call\r\n// // // //         </button>\r\n// // // //       )}\r\n// // // //       <ToastContainer /> {/* Add ToastContainer for toast notifications */}\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // };\r\n\r\n// // // // export default AudioCall;\r\n// // // import React, { useState, useRef, useEffect } from 'react';\r\n// // // import io from 'socket.io-client';\r\n// // // import SimplePeer from 'simple-peer';\r\n// // // import { toast } from 'react-toastify';\r\n// // // import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// // // // Ensure the URL matches your backend server\r\n// // // const socket = io('http://localhost:3000', {\r\n// // //   transports: ['websocket'],\r\n// // //   withCredentials: true\r\n// // // });\r\n\r\n// // // const AudioCall = ({ receiverId }) => {\r\n// // //   const [stream, setStream] = useState(null);\r\n// // //   const [peer, setPeer] = useState(null);\r\n// // //   const [calling, setCalling] = useState(false);\r\n// // //   const localAudioRef = useRef(null);\r\n// // //   const remoteAudioRef = useRef(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const initMediaStream = async () => {\r\n// // //       try {\r\n// // //         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n// // //         setStream(mediaStream);\r\n// // //         if (localAudioRef.current) {\r\n// // //           localAudioRef.current.srcObject = mediaStream;\r\n// // //         }\r\n// // //       } catch (error) {\r\n// // //         console.error('Error accessing media devices:', error);\r\n// // //       }\r\n// // //     };\r\n\r\n// // //     initMediaStream();\r\n\r\n// // //     if ('Notification' in window) {\r\n// // //       Notification.requestPermission().then(permission => {\r\n// // //         if (permission !== 'granted') {\r\n// // //           console.log('Notification permission denied');\r\n// // //         }\r\n// // //       });\r\n// // //     }\r\n\r\n// // //     socket.on('offer', handleOffer);\r\n// // //     socket.on('answer', handleAnswer);\r\n// // //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// // //     return () => {\r\n// // //       socket.off('offer', handleOffer);\r\n// // //       socket.off('answer', handleAnswer);\r\n// // //       socket.off('ice-candidate', handleIceCandidate);\r\n// // //       if (stream) {\r\n// // //         stream.getTracks().forEach(track => track.stop());\r\n// // //       }\r\n// // //       if (peer) {\r\n// // //         peer.destroy();\r\n// // //       }\r\n// // //     };\r\n// // //   }, [stream, peer]);\r\n\r\n// // //   const startCall = () => {\r\n// // //     const newPeer = new SimplePeer({\r\n// // //       initiator: true,\r\n// // //       trickle: false,\r\n// // //       stream: stream,\r\n// // //     });\r\n\r\n// // //     newPeer.on('signal', (data) => {\r\n// // //       socket.emit('offer', { offer: data, to: receiverId });\r\n// // //     });\r\n\r\n// // //     newPeer.on('stream', (remoteStream) => {\r\n// // //       if (remoteAudioRef.current) {\r\n// // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // //       }\r\n// // //     });\r\n\r\n// // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // //     setPeer(newPeer);\r\n// // //     setCalling(true);\r\n// // //   };\r\n\r\n// // //   const handleOffer = (data) => {\r\n// // //     if (Notification.permission === 'granted') {\r\n// // //       new Notification('Incoming Call', {\r\n// // //         body: 'You have an incoming audio call from a user.',\r\n// // //         icon: '/path/to/icon.png'\r\n// // //       });\r\n// // //     }\r\n\r\n// // //     toast('Incoming call from user');\r\n\r\n// // //     const newPeer = new SimplePeer({\r\n// // //       initiator: false,\r\n// // //       trickle: false,\r\n// // //     });\r\n\r\n// // //     newPeer.on('signal', (signal) => {\r\n// // //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// // //     });\r\n\r\n// // //     newPeer.on('stream', (remoteStream) => {\r\n// // //       if (remoteAudioRef.current) {\r\n// // //         remoteAudioRef.current.srcObject = remoteStream;\r\n// // //       }\r\n// // //     });\r\n\r\n// // //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// // //     newPeer.signal(data.offer);\r\n// // //     setPeer(newPeer);\r\n// // //     setCalling(true);\r\n// // //   };\r\n\r\n// // //   const handleAnswer = (data) => {\r\n// // //     if (peer) {\r\n// // //       peer.signal(data.answer);\r\n// // //     } else {\r\n// // //       console.error('Peer connection is not initialized.');\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const handleIceCandidate = (data) => {\r\n// // //     if (peer) {\r\n// // //       peer.signal(data.candidate);\r\n// // //     } else {\r\n// // //       console.error('Peer connection is not initialized.');\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const endCall = () => {\r\n// // //     if (peer) {\r\n// // //       peer.destroy();\r\n// // //       setPeer(null);\r\n// // //     }\r\n// // //     if (stream) {\r\n// // //       stream.getTracks().forEach(track => track.stop());\r\n// // //       setStream(null);\r\n// // //     }\r\n// // //     setCalling(false);\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div>\r\n// // //       <h1>Audio Call</h1>\r\n// // //       <audio ref={localAudioRef} autoPlay muted />\r\n// // //       <audio ref={remoteAudioRef} autoPlay />\r\n// // //       {calling ? (\r\n// // //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n// // //           End Call\r\n// // //         </button>\r\n// // //       ) : (\r\n// // //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n// // //           Start Call\r\n// // //         </button>\r\n// // //       )}<div\r\n// // //       class=\"w-32 aspect-square rounded-full relative flex justify-center items-center animate-[spin_3s_linear_infinite] z-40 bg-[conic-gradient(white_0deg,white_300deg,transparent_270deg,transparent_360deg)] before:animate-[spin_2s_linear_infinite] before:absolute before:w-[60%] before:aspect-square before:rounded-full before:z-[80] before:bg-[conic-gradient(white_0deg,white_270deg,transparent_180deg,transparent_360deg)] after:absolute after:w-3/4 after:aspect-square after:rounded-full after:z-[60] after:animate-[spin_3s_linear_infinite] after:bg-[conic-gradient(#065f46_0deg,#065f46_180deg,transparent_180deg,transparent_360deg)]\"\r\n// // //     >\r\n// // //       <span\r\n// // //         class=\"absolute w-[85%] aspect-square rounded-full z-[60] animate-[spin_5s_linear_infinite] bg-[conic-gradient(#34d399_0deg,#34d399_180deg,transparent_180deg,transparent_360deg)]\"\r\n// // //       >\r\n// // //       </span>\r\n// // //     </div>\r\n    \r\n\r\n\r\n// // //     </div>\r\n\r\n    \r\n// // //   );\r\n// // // };\r\n\r\n// // // export default AudioCall;\r\n\r\n\r\n// // import React, { useState, useRef, useEffect } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import SimplePeer from 'simple-peer';\r\n// // import { toast } from 'react-toastify';\r\n// // import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// // const socket = io('http://localhost:3000', {\r\n// //   transports: ['websocket'],\r\n// //   withCredentials: true\r\n// // });\r\n\r\n// // const AudioCall = ({ receiverId }) => {\r\n// //   const [stream, setStream] = useState(null);\r\n// //   const [peer, setPeer] = useState(null);\r\n// //   const [calling, setCalling] = useState(false);\r\n// //   const localAudioRef = useRef(null);\r\n// //   const remoteAudioRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const initMediaStream = async () => {\r\n// //       try {\r\n// //         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n// //         setStream(mediaStream);\r\n// //         if (localAudioRef.current) {\r\n// //           localAudioRef.current.srcObject = mediaStream;\r\n// //         }\r\n// //       } catch (error) {\r\n// //         console.error('Error accessing media devices:', error);\r\n// //       }\r\n// //     };\r\n\r\n// //     initMediaStream();\r\n\r\n// //     if ('Notification' in window) {\r\n// //       Notification.requestPermission().then(permission => {\r\n// //         if (permission !== 'granted') {\r\n// //           console.log('Notification permission denied');\r\n// //         }\r\n// //       });\r\n// //     }\r\n\r\n// //     socket.on('offer', handleOffer);\r\n// //     socket.on('answer', handleAnswer);\r\n// //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// //     return () => {\r\n// //       socket.off('offer', handleOffer);\r\n// //       socket.off('answer', handleAnswer);\r\n// //       socket.off('ice-candidate', handleIceCandidate);\r\n// //       if (stream) {\r\n// //         stream.getTracks().forEach(track => track.stop());\r\n// //       }\r\n// //       if (peer) {\r\n// //         peer.destroy();\r\n// //       }\r\n// //     };\r\n// //   }, [stream, peer]);\r\n\r\n// //   const startCall = () => {\r\n// //     const newPeer = new SimplePeer({\r\n// //       initiator: true,\r\n// //       trickle: false,\r\n// //       stream: stream,\r\n// //     });\r\n\r\n// //     newPeer.on('signal', (data) => {\r\n// //       socket.emit('offer', { offer: data, to: receiverId });\r\n// //     });\r\n\r\n// //     newPeer.on('stream', (remoteStream) => {\r\n// //       if (remoteAudioRef.current) {\r\n// //         remoteAudioRef.current.srcObject = remoteStream;\r\n// //       }\r\n// //     });\r\n\r\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// //     setPeer(newPeer);\r\n// //     setCalling(true);\r\n// //   };\r\n\r\n// //   const handleOffer = (data) => {\r\n// //     if (Notification.permission === 'granted') {\r\n// //       new Notification('Incoming Call', {\r\n// //         body: 'You have an incoming audio call from a user.',\r\n// //         icon: '/path/to/icon.png'\r\n// //       });\r\n// //     }\r\n\r\n// //     toast('Incoming call from user');\r\n\r\n// //     const newPeer = new SimplePeer({\r\n// //       initiator: false,\r\n// //       trickle: false,\r\n// //     });\r\n\r\n// //     newPeer.on('signal', (signal) => {\r\n// //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// //     });\r\n\r\n// //     newPeer.on('stream', (remoteStream) => {\r\n// //       if (remoteAudioRef.current) {\r\n// //         remoteAudioRef.current.srcObject = remoteStream;\r\n// //       }\r\n// //     });\r\n\r\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// //     newPeer.signal(data.offer);\r\n// //     setPeer(newPeer);\r\n// //     setCalling(true);\r\n// //   };\r\n\r\n// //   const handleAnswer = (data) => {\r\n// //     if (peer) {\r\n// //       peer.signal(data.answer);\r\n// //     } else {\r\n// //       console.error('Peer connection is not initialized.');\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleIceCandidate = (data) => {\r\n// //     if (peer) {\r\n// //       peer.signal(data.candidate);\r\n// //     } else {\r\n// //       console.error('Peer connection is not initialized.');\r\n// //     }\r\n// //   };\r\n\r\n// //   const endCall = () => {\r\n// //     if (peer) {\r\n// //       peer.destroy();\r\n// //       setPeer(null);\r\n// //     }\r\n// //     if (stream) {\r\n// //       stream.getTracks().forEach(track => track.stop());\r\n// //       setStream(null);\r\n// //     }\r\n// //     setCalling(false);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\r\n// //       <h1 className=\"text-2xl mb-4\">Audio Call</h1>\r\n// //       <div className=\"mb-4\">\r\n// //         <audio ref={localAudioRef} autoPlay muted />\r\n// //         <audio ref={remoteAudioRef} autoPlay />\r\n// //       </div>\r\n// //       {calling ? (\r\n// //         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded mb-4\">\r\n// //           End Call\r\n// //         </button>\r\n// //       ) : (\r\n// //         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded mb-4\">\r\n// //           Start Call\r\n// //         </button>\r\n// //       )}\r\n// // <div class=\"flex flex-row gap-2\">\r\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"></div>\r\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\"></div>\r\n// //   <div class=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\"></div>\r\n// // </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AudioCall;\r\n// import React, { useState, useRef, useEffect } from 'react';\r\n// import io from 'socket.io-client';\r\n// import SimplePeer from 'simple-peer';\r\n// import { toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// // Make sure this URL matches your backend configuration\r\n// const socket = io('http://localhost:3002', {\r\n//   transports: ['websocket'],\r\n//   withCredentials: true\r\n// });\r\n\r\n// const AudioCall = ({ receiverId }) => {\r\n//   const [stream, setStream] = useState(null);\r\n//   const [peer, setPeer] = useState(null);\r\n//   const [calling, setCalling] = useState(false);\r\n//   const localAudioRef = useRef(null);\r\n//   const remoteAudioRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const initMediaStream = async () => {\r\n//       try {\r\n//         const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n//         setStream(mediaStream);\r\n//         if (localAudioRef.current) {\r\n//           localAudioRef.current.srcObject = mediaStream;\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Error accessing media devices:', error);\r\n//       }\r\n//     };\r\n\r\n//     initMediaStream();\r\n\r\n//     if ('Notification' in window) {\r\n//       Notification.requestPermission().then(permission => {\r\n//         if (permission !== 'granted') {\r\n//           console.log('Notification permission denied');\r\n//         }\r\n//       });\r\n//     }\r\n\r\n//     socket.on('offer', handleOffer);\r\n//     socket.on('answer', handleAnswer);\r\n//     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n//     return () => {\r\n//       socket.off('offer', handleOffer);\r\n//       socket.off('answer', handleAnswer);\r\n//       socket.off('ice-candidate', handleIceCandidate);\r\n//       if (stream) {\r\n//         stream.getTracks().forEach(track => track.stop());\r\n//       }\r\n//       if (peer) {\r\n//         peer.destroy();\r\n//       }\r\n//     };\r\n//   }, [stream, peer]);\r\n\r\n//   const startCall = () => {\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: true,\r\n//       trickle: false,\r\n//       stream: stream,\r\n//     });\r\n\r\n//     newPeer.on('signal', (data) => {\r\n//       socket.emit('offer', { offer: data, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleOffer = (data) => {\r\n//     if (Notification.permission === 'granted') {\r\n//       new Notification('Incoming Call', {\r\n//         body: 'You have an incoming audio call from a user.',\r\n//         icon: '/path/to/icon.png'\r\n//       });\r\n//     }\r\n\r\n//     toast('Incoming call from user');\r\n\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: false,\r\n//       trickle: false,\r\n//     });\r\n\r\n//     newPeer.on('signal', (signal) => {\r\n//       socket.emit('answer', { answer: signal, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     newPeer.signal(data.offer);\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleAnswer = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.answer);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   const handleIceCandidate = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.candidate);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   const endCall = () => {\r\n//     if (peer) {\r\n//       peer.destroy();\r\n//       setPeer(null);\r\n//     }\r\n//     if (stream) {\r\n//       stream.getTracks().forEach(track => track.stop());\r\n//       setStream(null);\r\n//     }\r\n//     setCalling(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\r\n\r\n\r\n// <button\r\n//   type=\"button\"\r\n//   class=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group\"\r\n// >\r\n//   <div\r\n//     class=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n//   >\r\n//     <svg\r\n//       width=\"25px\"\r\n//       height=\"25px\"\r\n//       viewBox=\"0 0 1024 1024\"\r\n//       xmlns=\"http://www.w3.org/2000/svg\"\r\n//     >\r\n//       <path\r\n//         fill=\"#000000\"\r\n//         d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n//       ></path>\r\n//       <path\r\n//         fill=\"#000000\"\r\n//         d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n//       ></path>\r\n//     </svg>\r\n//   </div>\r\n//   <p class=\"translate-x-2\">Go Back</p>\r\n// </button>\r\n\r\n\r\n\r\n\r\n//       <h1 className=\"text-2xl mb-4\">Audio Call</h1>\r\n//       <div className=\"mb-4\">\r\n//         <audio ref={localAudioRef} autoPlay muted />\r\n//         <audio ref={remoteAudioRef} autoPlay />\r\n//       </div>\r\n//       {calling ? (\r\n//         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded mb-4\">\r\n//           End Call\r\n//         </button>\r\n//       ) : (\r\n//         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded mb-4\">\r\n//           Start Call\r\n//         </button>\r\n//       )}\r\n//       <div className=\"flex flex-row gap-2\">\r\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\r\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\" />\r\n//         <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioCall;\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport SimplePeer from 'simple-peer';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n// Make sure this URL matches your backend configuration\r\nconst socket = io('http://localhost:3002', {\r\n  transports: ['websocket'],\r\n  withCredentials: true\r\n});\r\n\r\nconst AudioCall = ({ receiverId }) => {\r\n  const [stream, setStream] = useState(null);\r\n  const [peer, setPeer] = useState(null);\r\n  const [calling, setCalling] = useState(false);\r\n  const localAudioRef = useRef(null);\r\n  const remoteAudioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const initMediaStream = async () => {\r\n      try {\r\n        const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n        setStream(mediaStream);\r\n        if (calling && localAudioRef.current) {\r\n          localAudioRef.current.srcObject = mediaStream;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error accessing media devices:', error);\r\n      }\r\n    };\r\n\r\n    initMediaStream();\r\n\r\n    if ('Notification' in window) {\r\n      Notification.requestPermission().then(permission => {\r\n        if (permission !== 'granted') {\r\n          console.log('Notification permission denied');\r\n        }\r\n      });\r\n    }\r\n\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleIceCandidate);\r\n\r\n    return () => {\r\n      socket.off('offer', handleOffer);\r\n      socket.off('answer', handleAnswer);\r\n      socket.off('ice-candidate', handleIceCandidate);\r\n      if (stream) {\r\n        stream.getTracks().forEach(track => track.stop());\r\n      }\r\n      if (peer) {\r\n        peer.destroy();\r\n      }\r\n    };\r\n  }, [stream, peer, calling]);\r\n\r\n  const startCall = () => {\r\n    const newPeer = new SimplePeer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n\r\n    newPeer.on('signal', (data) => {\r\n      socket.emit('offer', { offer: data, to: receiverId });\r\n    });\r\n\r\n    newPeer.on('stream', (remoteStream) => {\r\n      if (remoteAudioRef.current) {\r\n        remoteAudioRef.current.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n    setPeer(newPeer);\r\n    setCalling(true);\r\n  };\r\n\r\n  const handleOffer = (data) => {\r\n    if (Notification.permission === 'granted') {\r\n      new Notification('Incoming Call', {\r\n        body: 'You have an incoming audio call from a user.',\r\n        icon: '/path/to/icon.png'\r\n      });\r\n    }\r\n\r\n    toast('Incoming call from user');\r\n\r\n    const newPeer = new SimplePeer({\r\n      initiator: false,\r\n      trickle: false,\r\n    });\r\n\r\n    newPeer.on('signal', (signal) => {\r\n      socket.emit('answer', { answer: signal, to: receiverId });\r\n    });\r\n\r\n    newPeer.on('stream', (remoteStream) => {\r\n      if (remoteAudioRef.current) {\r\n        remoteAudioRef.current.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n    newPeer.signal(data.offer);\r\n    setPeer(newPeer);\r\n    setCalling(true);\r\n  };\r\n\r\n  const handleAnswer = (data) => {\r\n    if (peer) {\r\n      peer.signal(data.answer);\r\n    } else {\r\n      console.error('Peer connection is not initialized.');\r\n    }\r\n  };\r\n\r\n  const handleIceCandidate = (data) => {\r\n    if (peer) {\r\n      peer.signal(data.candidate);\r\n    } else {\r\n      console.error('Peer connection is not initialized.');\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate('/home');\r\n};\r\n\r\n  const endCall = () => {\r\n    if (peer) {\r\n      peer.destroy();\r\n      setPeer(null);\r\n    }\r\n    if (stream) {\r\n      stream.getTracks().forEach(track => track.stop());\r\n      setStream(null);\r\n    }\r\n    if (localAudioRef.current) {\r\n      localAudioRef.current.srcObject = null; // Clear local audio\r\n    }\r\n    if (remoteAudioRef.current) {\r\n      remoteAudioRef.current.srcObject = null; // Clear remote audio\r\n    }\r\n    setCalling(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\r\n      <button\r\n      onClick={handleBack}\r\n        type=\"button\"\r\n        className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group mb-4\"\r\n      >\r\n        <div\r\n          className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n        >\r\n          <svg\r\n            width=\"25px\"\r\n            height=\"25px\"\r\n            viewBox=\"0 0 1024 1024\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fill=\"#000000\"\r\n              d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n            ></path>\r\n            <path\r\n              fill=\"#000000\"\r\n              d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n            ></path>\r\n          </svg>\r\n        </div>\r\n        <p className=\"translate-x-2\">Go Back</p>\r\n      </button>\r\n\r\n      <h1 className=\"text-2xl mb-4\">Audio Call</h1>\r\n      <div className=\"mb-4\">\r\n        <audio ref={localAudioRef} autoPlay muted={calling} />\r\n        <audio ref={remoteAudioRef} autoPlay />\r\n      </div>\r\n      {calling ? (\r\n        <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded mb-4\">\r\n          End Call\r\n        </button>\r\n      ) : (\r\n        <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded mb-4\">\r\n          Start Call\r\n        </button>\r\n      )}\r\n      <div className=\"flex flex-row gap-2\">\r\n        <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\r\n        <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.3s]\" />\r\n        <div className=\"w-4 h-4 rounded-full bg-blue-700 animate-bounce [animation-delay:.7s]\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioCall;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,uCAAuC;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGL,EAAE,CAAC,uBAAuB,EAAE;EACzCM,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMoB,aAAa,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMoB,cAAc,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,MAAMoB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,WAAW,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;QAC9EZ,SAAS,CAACQ,WAAW,CAAC;QACtB,IAAIL,OAAO,IAAIE,aAAa,CAACQ,OAAO,EAAE;UACpCR,aAAa,CAACQ,OAAO,CAACC,SAAS,GAAGN,WAAW;QAC/C;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDR,eAAe,CAAC,CAAC;IAEjB,IAAI,cAAc,IAAIU,MAAM,EAAE;MAC5BC,YAAY,CAACC,iBAAiB,CAAC,CAAC,CAACC,IAAI,CAACC,UAAU,IAAI;QAClD,IAAIA,UAAU,KAAK,SAAS,EAAE;UAC5BL,OAAO,CAACM,GAAG,CAAC,gCAAgC,CAAC;QAC/C;MACF,CAAC,CAAC;IACJ;IAEA7B,MAAM,CAAC8B,EAAE,CAAC,OAAO,EAAEC,WAAW,CAAC;IAC/B/B,MAAM,CAAC8B,EAAE,CAAC,QAAQ,EAAEE,YAAY,CAAC;IACjChC,MAAM,CAAC8B,EAAE,CAAC,eAAe,EAAEG,kBAAkB,CAAC;IAE9C,OAAO,MAAM;MACXjC,MAAM,CAACkC,GAAG,CAAC,OAAO,EAAEH,WAAW,CAAC;MAChC/B,MAAM,CAACkC,GAAG,CAAC,QAAQ,EAAEF,YAAY,CAAC;MAClChC,MAAM,CAACkC,GAAG,CAAC,eAAe,EAAED,kBAAkB,CAAC;MAC/C,IAAI3B,MAAM,EAAE;QACVA,MAAM,CAAC6B,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACnD;MACA,IAAI9B,IAAI,EAAE;QACRA,IAAI,CAAC+B,OAAO,CAAC,CAAC;MAChB;IACF,CAAC;EACH,CAAC,EAAE,CAACjC,MAAM,EAAEE,IAAI,EAAEE,OAAO,CAAC,CAAC;EAE3B,MAAM8B,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,OAAO,GAAG,IAAI7C,UAAU,CAAC;MAC7B8C,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,KAAK;MACdrC,MAAM,EAAEA;IACV,CAAC,CAAC;IAEFmC,OAAO,CAACX,EAAE,CAAC,QAAQ,EAAGc,IAAI,IAAK;MAC7B5C,MAAM,CAAC6C,IAAI,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAEF,IAAI;QAAEG,EAAE,EAAE3C;MAAW,CAAC,CAAC;IACvD,CAAC,CAAC;IAEFqC,OAAO,CAACX,EAAE,CAAC,QAAQ,EAAGkB,YAAY,IAAK;MACrC,IAAInC,cAAc,CAACO,OAAO,EAAE;QAC1BP,cAAc,CAACO,OAAO,CAACC,SAAS,GAAG2B,YAAY;MACjD;IACF,CAAC,CAAC;IAEFP,OAAO,CAACX,EAAE,CAAC,OAAO,EAAGmB,GAAG,IAAK1B,OAAO,CAACD,KAAK,CAAC,aAAa,EAAE2B,GAAG,CAAC,CAAC;IAE/DxC,OAAO,CAACgC,OAAO,CAAC;IAChB9B,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMoB,WAAW,GAAIa,IAAI,IAAK;IAC5B,IAAInB,YAAY,CAACG,UAAU,KAAK,SAAS,EAAE;MACzC,IAAIH,YAAY,CAAC,eAAe,EAAE;QAChCyB,IAAI,EAAE,8CAA8C;QACpDC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IAEAtD,KAAK,CAAC,yBAAyB,CAAC;IAEhC,MAAM4C,OAAO,GAAG,IAAI7C,UAAU,CAAC;MAC7B8C,SAAS,EAAE,KAAK;MAChBC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFF,OAAO,CAACX,EAAE,CAAC,QAAQ,EAAGsB,MAAM,IAAK;MAC/BpD,MAAM,CAAC6C,IAAI,CAAC,QAAQ,EAAE;QAAEQ,MAAM,EAAED,MAAM;QAAEL,EAAE,EAAE3C;MAAW,CAAC,CAAC;IAC3D,CAAC,CAAC;IAEFqC,OAAO,CAACX,EAAE,CAAC,QAAQ,EAAGkB,YAAY,IAAK;MACrC,IAAInC,cAAc,CAACO,OAAO,EAAE;QAC1BP,cAAc,CAACO,OAAO,CAACC,SAAS,GAAG2B,YAAY;MACjD;IACF,CAAC,CAAC;IAEFP,OAAO,CAACX,EAAE,CAAC,OAAO,EAAGmB,GAAG,IAAK1B,OAAO,CAACD,KAAK,CAAC,aAAa,EAAE2B,GAAG,CAAC,CAAC;IAE/DR,OAAO,CAACW,MAAM,CAACR,IAAI,CAACE,KAAK,CAAC;IAC1BrC,OAAO,CAACgC,OAAO,CAAC;IAChB9B,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMqB,YAAY,GAAIY,IAAI,IAAK;IAC7B,IAAIpC,IAAI,EAAE;MACRA,IAAI,CAAC4C,MAAM,CAACR,IAAI,CAACS,MAAM,CAAC;IAC1B,CAAC,MAAM;MACL9B,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAC;IACtD;EACF,CAAC;EAED,MAAMW,kBAAkB,GAAIW,IAAI,IAAK;IACnC,IAAIpC,IAAI,EAAE;MACRA,IAAI,CAAC4C,MAAM,CAACR,IAAI,CAACU,SAAS,CAAC;IAC7B,CAAC,MAAM;MACL/B,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAC;IACtD;EACF,CAAC;EAED,MAAMiC,UAAU,GAAGA,CAAA,KAAM;IACvBC,QAAQ,CAAC,OAAO,CAAC;EACrB,CAAC;EAEC,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIjD,IAAI,EAAE;MACRA,IAAI,CAAC+B,OAAO,CAAC,CAAC;MACd9B,OAAO,CAAC,IAAI,CAAC;IACf;IACA,IAAIH,MAAM,EAAE;MACVA,MAAM,CAAC6B,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACjD/B,SAAS,CAAC,IAAI,CAAC;IACjB;IACA,IAAIK,aAAa,CAACQ,OAAO,EAAE;MACzBR,aAAa,CAACQ,OAAO,CAACC,SAAS,GAAG,IAAI,CAAC,CAAC;IAC1C;IACA,IAAIR,cAAc,CAACO,OAAO,EAAE;MAC1BP,cAAc,CAACO,OAAO,CAACC,SAAS,GAAG,IAAI,CAAC,CAAC;IAC3C;IACAV,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEZ,OAAA;IAAK2D,SAAS,EAAC,oEAAoE;IAAAC,QAAA,gBACjF5D,OAAA;MACA6D,OAAO,EAAEL,UAAW;MAClBM,IAAI,EAAC,QAAQ;MACbH,SAAS,EAAC,2GAA2G;MAAAC,QAAA,gBAErH5D,OAAA;QACE2D,SAAS,EAAC,uIAAuI;QAAAC,QAAA,eAEjJ5D,OAAA;UACE+D,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC,MAAM;UACbC,OAAO,EAAC,eAAe;UACvBC,KAAK,EAAC,4BAA4B;UAAAN,QAAA,gBAElC5D,OAAA;YACEmE,IAAI,EAAC,SAAS;YACdC,CAAC,EAAC;UAAqD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC,eACRxE,OAAA;YACEmE,IAAI,EAAC,SAAS;YACdC,CAAC,EAAC;UAAqI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNxE,OAAA;QAAG2D,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAO;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eAETxE,OAAA;MAAI2D,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7CxE,OAAA;MAAK2D,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB5D,OAAA;QAAOyE,GAAG,EAAE5D,aAAc;QAAC6D,QAAQ;QAACC,KAAK,EAAEhE;MAAQ;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtDxE,OAAA;QAAOyE,GAAG,EAAE3D,cAAe;QAAC4D,QAAQ;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EACL7D,OAAO,gBACNX,OAAA;MAAQ6D,OAAO,EAAEH,OAAQ;MAACC,SAAS,EAAC,wCAAwC;MAAAC,QAAA,EAAC;IAE7E;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,gBAETxE,OAAA;MAAQ6D,OAAO,EAAEpB,SAAU;MAACkB,SAAS,EAAC,yCAAyC;MAAAC,QAAA,EAAC;IAEhF;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,eACDxE,OAAA;MAAK2D,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClC5D,OAAA;QAAK2D,SAAS,EAAC;MAAuE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzFxE,OAAA;QAAK2D,SAAS,EAAC;MAAuE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzFxE,OAAA;QAAK2D,SAAS,EAAC;MAAuE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClE,EAAA,CA9LIF,SAAS;AAAAwE,EAAA,GAATxE,SAAS;AAgMf,eAAeA,SAAS;AAAC,IAAAwE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}