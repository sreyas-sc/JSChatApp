{"ast":null,"code":"var _s = $RefreshSig$();\n// // import io from 'socket.io-client';\n\n// // // Connect to the server\n// // const socket = io('http://localhost:3001');\n\n// // // Handle incoming offer\n// // socket.on('offer', (offer) => {\n// //   console.log('Offer received:', offer);\n// //   // Handle the offer and initiate the peer connection\n// // });\n\n// // // Handle incoming answer\n// // socket.on('answer', (answer) => {\n// //   console.log('Answer received:', answer);\n// //   // Handle the answer and continue the peer connection\n// // });\n\n// // // Handle incoming ICE candidate\n// // socket.on('ice-candidate', (candidate) => {\n// //   console.log('ICE candidate received:', candidate);\n// //   // Add the ICE candidate to the peer connection\n// // });\n\n// import io from 'socket.io-client';\n\n// // Connect to the server\n// const socket = io('http://localhost:3001');\n\n// // Handle incoming offer\n// socket.on('offer', (data) => {\n//   console.log('Offer received:', data);\n//   // Extract offer and senderId\n//   const { offer, senderId } = data;\n//   // Handle the offer and initiate the peer connection\n// });\n\n// // Handle incoming answer\n// socket.on('answer', (data) => {\n//   console.log('Answer received:', data);\n//   // Extract answer and senderId\n//   const { answer, senderId } = data;\n//   // Handle the answer and continue the peer connection\n// });\n\n// // Handle incoming ICE candidate\n// socket.on('ice-candidate', (data) => {\n//   console.log('ICE candidate received:', data);\n//   // Extract candidate and senderId\n//   const { candidate, senderId } = data;\n//   // Add the ICE candidate to the peer connection\n// });\n\n// src/hooks/useWebRTC.js\n\nimport { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nconst socket = io('http://localhost:3001'); // Replace with your server URL\n\nexport const useWebRTC = () => {\n  _s();\n  const [peerConnection, setPeerConnection] = useState(null);\n  useEffect(() => {\n    const pc = new RTCPeerConnection();\n    setPeerConnection(pc);\n    pc.ontrack = event => {\n      // Handle remote stream\n    };\n    pc.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('ice-candidate', event.candidate);\n      }\n    };\n    socket.on('offer', async offer => {\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\n      const answer = await pc.createAnswer();\n      await pc.setLocalDescription(answer);\n      socket.emit('answer', answer);\n    });\n    socket.on('answer', async answer => {\n      await pc.setRemoteDescription(new RTCSessionDescription(answer));\n    });\n    socket.on('ice-candidate', async candidate => {\n      await pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    return () => {\n      pc.close();\n      socket.off('offer');\n      socket.off('answer');\n      socket.off('ice-candidate');\n    };\n  }, []);\n  const initiateCall = async receiverId => {\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    socket.emit('offer', {\n      offer,\n      receiverId\n    });\n  };\n  const answerCall = async () => {\n    const answer = await peerConnection.createAnswer();\n    await peerConnection.setLocalDescription(answer);\n    socket.emit('answer', answer);\n  };\n  return {\n    initiateCall,\n    answerCall\n  };\n};\n_s(useWebRTC, \"WNgIqIwv+rKzghgnWPBCSNe7zig=\");","map":{"version":3,"names":["useState","useEffect","io","socket","useWebRTC","_s","peerConnection","setPeerConnection","pc","RTCPeerConnection","ontrack","event","onicecandidate","candidate","emit","on","offer","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","addIceCandidate","RTCIceCandidate","close","off","initiateCall","receiverId","createOffer","answerCall"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/WebRTCClient.js"],"sourcesContent":["// // import io from 'socket.io-client';\r\n\r\n// // // Connect to the server\r\n// // const socket = io('http://localhost:3001');\r\n\r\n// // // Handle incoming offer\r\n// // socket.on('offer', (offer) => {\r\n// //   console.log('Offer received:', offer);\r\n// //   // Handle the offer and initiate the peer connection\r\n// // });\r\n\r\n// // // Handle incoming answer\r\n// // socket.on('answer', (answer) => {\r\n// //   console.log('Answer received:', answer);\r\n// //   // Handle the answer and continue the peer connection\r\n// // });\r\n\r\n// // // Handle incoming ICE candidate\r\n// // socket.on('ice-candidate', (candidate) => {\r\n// //   console.log('ICE candidate received:', candidate);\r\n// //   // Add the ICE candidate to the peer connection\r\n// // });\r\n\r\n\r\n// import io from 'socket.io-client';\r\n\r\n// // Connect to the server\r\n// const socket = io('http://localhost:3001');\r\n\r\n// // Handle incoming offer\r\n// socket.on('offer', (data) => {\r\n//   console.log('Offer received:', data);\r\n//   // Extract offer and senderId\r\n//   const { offer, senderId } = data;\r\n//   // Handle the offer and initiate the peer connection\r\n// });\r\n\r\n// // Handle incoming answer\r\n// socket.on('answer', (data) => {\r\n//   console.log('Answer received:', data);\r\n//   // Extract answer and senderId\r\n//   const { answer, senderId } = data;\r\n//   // Handle the answer and continue the peer connection\r\n// });\r\n\r\n// // Handle incoming ICE candidate\r\n// socket.on('ice-candidate', (data) => {\r\n//   console.log('ICE candidate received:', data);\r\n//   // Extract candidate and senderId\r\n//   const { candidate, senderId } = data;\r\n//   // Add the ICE candidate to the peer connection\r\n// });\r\n\r\n// src/hooks/useWebRTC.js\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\nexport const useWebRTC = () => {\r\n  const [peerConnection, setPeerConnection] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const pc = new RTCPeerConnection();\r\n    setPeerConnection(pc);\r\n\r\n    pc.ontrack = (event) => {\r\n      // Handle remote stream\r\n    };\r\n\r\n    pc.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.emit('ice-candidate', event.candidate);\r\n      }\r\n    };\r\n\r\n    socket.on('offer', async (offer) => {\r\n      await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n      const answer = await pc.createAnswer();\r\n      await pc.setLocalDescription(answer);\r\n      socket.emit('answer', answer);\r\n    });\r\n\r\n    socket.on('answer', async (answer) => {\r\n      await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n    });\r\n\r\n    socket.on('ice-candidate', async (candidate) => {\r\n      await pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n    });\r\n\r\n    return () => {\r\n      pc.close();\r\n      socket.off('offer');\r\n      socket.off('answer');\r\n      socket.off('ice-candidate');\r\n    };\r\n  }, []);\r\n\r\n  const initiateCall = async (receiverId) => {\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n    socket.emit('offer', { offer, receiverId });\r\n  };\r\n\r\n  const answerCall = async () => {\r\n    const answer = await peerConnection.createAnswer();\r\n    await peerConnection.setLocalDescription(answer);\r\n    socket.emit('answer', answer);\r\n  };\r\n\r\n  return { initiateCall, answerCall };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}