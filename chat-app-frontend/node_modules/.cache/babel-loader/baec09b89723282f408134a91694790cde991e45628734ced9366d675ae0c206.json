{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\VoiceCalls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001'); // Connect to your server\n\nconst VoiceCall = () => {\n  _s();\n  const [inCall, setInCall] = useState(false);\n  const [callStatus, setCallStatus] = useState('');\n  const localStreamRef = useRef(null);\n  const remoteStreamRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n\n  // Request access to the user's media devices\n  const startCall = async receiverId => {\n    try {\n      // Initialize media stream\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      localStreamRef.current.srcObject = stream;\n\n      // Initialize RTCPeerConnection\n      peerConnectionRef.current = new RTCPeerConnection();\n      peerConnectionRef.current.addStream(stream);\n\n      // Handle ICE candidates\n      peerConnectionRef.current.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('ice-candidate', {\n            candidate: event.candidate,\n            to: receiverId\n          });\n        }\n      };\n\n      // Handle remote stream\n      peerConnectionRef.current.onaddstream = event => {\n        remoteStreamRef.current.srcObject = event.stream;\n      };\n\n      // Create and send offer\n      const offer = await peerConnectionRef.current.createOffer();\n      await peerConnectionRef.current.setLocalDescription(offer);\n      socket.emit('offer', {\n        offer: offer,\n        to: receiverId\n      });\n      setInCall(true);\n      setCallStatus('Calling...');\n    } catch (error) {\n      console.error('Error starting call:', error);\n    }\n  };\n\n  // Answer an incoming call\n  const answerCall = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      localStreamRef.current.srcObject = stream;\n\n      // Initialize RTCPeerConnection\n      peerConnectionRef.current = new RTCPeerConnection();\n      peerConnectionRef.current.addStream(stream);\n\n      // Handle ICE candidates\n      peerConnectionRef.current.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('ice-candidate', {\n            candidate: event.candidate\n          });\n        }\n      };\n\n      // Handle remote stream\n      peerConnectionRef.current.onaddstream = event => {\n        remoteStreamRef.current.srcObject = event.stream;\n      };\n\n      // Create and send answer\n      const answer = await peerConnectionRef.current.createAnswer();\n      await peerConnectionRef.current.setLocalDescription(answer);\n      socket.emit('answer', {\n        answer: answer\n      });\n      setInCall(true);\n      setCallStatus('In Call');\n    } catch (error) {\n      console.error('Error answering call:', error);\n    }\n  };\n\n  // Handle incoming call\n  socket.on('offer', async data => {\n    await answerCall();\n  });\n  socket.on('answer', data => {\n    peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n  });\n  socket.on('ice-candidate', data => {\n    peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: localStreamRef,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: remoteStreamRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), !inCall && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => startCall('receiver-id'),\n      children: \"Start Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this), inCall && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setInCall(false),\n      children: \"End Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Status: \", callStatus]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(VoiceCall, \"R4EERaIiyY+oB9XEBTdi29v2/r8=\");\n_c = VoiceCall;\nexport default VoiceCall;\nvar _c;\n$RefreshReg$(_c, \"VoiceCall\");","map":{"version":3,"names":["React","useState","useRef","io","jsxDEV","_jsxDEV","socket","VoiceCall","_s","inCall","setInCall","callStatus","setCallStatus","localStreamRef","remoteStreamRef","peerConnectionRef","startCall","receiverId","stream","navigator","mediaDevices","getUserMedia","audio","current","srcObject","RTCPeerConnection","addStream","onicecandidate","event","candidate","emit","to","onaddstream","offer","createOffer","setLocalDescription","error","console","answerCall","answer","createAnswer","on","data","setRemoteDescription","RTCSessionDescription","addIceCandidate","RTCIceCandidate","children","ref","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/VoiceCalls.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3001'); // Connect to your server\r\n\r\nconst VoiceCall = () => {\r\n    const [inCall, setInCall] = useState(false);\r\n    const [callStatus, setCallStatus] = useState(''); \r\n    const localStreamRef = useRef(null);\r\n    const remoteStreamRef = useRef(null);\r\n    const peerConnectionRef = useRef(null);\r\n\r\n    // Request access to the user's media devices\r\n    const startCall = async (receiverId) => {\r\n        try {\r\n            // Initialize media stream\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            localStreamRef.current.srcObject = stream;\r\n\r\n            // Initialize RTCPeerConnection\r\n            peerConnectionRef.current = new RTCPeerConnection();\r\n            peerConnectionRef.current.addStream(stream);\r\n\r\n            // Handle ICE candidates\r\n            peerConnectionRef.current.onicecandidate = (event) => {\r\n                if (event.candidate) {\r\n                    socket.emit('ice-candidate', { candidate: event.candidate, to: receiverId });\r\n                }\r\n            };\r\n\r\n            // Handle remote stream\r\n            peerConnectionRef.current.onaddstream = (event) => {\r\n                remoteStreamRef.current.srcObject = event.stream;\r\n            };\r\n\r\n            // Create and send offer\r\n            const offer = await peerConnectionRef.current.createOffer();\r\n            await peerConnectionRef.current.setLocalDescription(offer);\r\n            socket.emit('offer', { offer: offer, to: receiverId });\r\n\r\n            setInCall(true);\r\n            setCallStatus('Calling...');\r\n        } catch (error) {\r\n            console.error('Error starting call:', error);\r\n        }\r\n    };\r\n\r\n    // Answer an incoming call\r\n    const answerCall = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n            localStreamRef.current.srcObject = stream;\r\n\r\n            // Initialize RTCPeerConnection\r\n            peerConnectionRef.current = new RTCPeerConnection();\r\n            peerConnectionRef.current.addStream(stream);\r\n\r\n            // Handle ICE candidates\r\n            peerConnectionRef.current.onicecandidate = (event) => {\r\n                if (event.candidate) {\r\n                    socket.emit('ice-candidate', { candidate: event.candidate });\r\n                }\r\n            };\r\n\r\n            // Handle remote stream\r\n            peerConnectionRef.current.onaddstream = (event) => {\r\n                remoteStreamRef.current.srcObject = event.stream;\r\n            };\r\n\r\n            // Create and send answer\r\n            const answer = await peerConnectionRef.current.createAnswer();\r\n            await peerConnectionRef.current.setLocalDescription(answer);\r\n            socket.emit('answer', { answer: answer });\r\n\r\n            setInCall(true);\r\n            setCallStatus('In Call');\r\n        } catch (error) {\r\n            console.error('Error answering call:', error);\r\n        }\r\n    };\r\n\r\n    // Handle incoming call\r\n    socket.on('offer', async (data) => {\r\n        await answerCall();\r\n    });\r\n\r\n    socket.on('answer', (data) => {\r\n        peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\r\n    });\r\n\r\n    socket.on('ice-candidate', (data) => {\r\n        peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <video ref={localStreamRef} autoPlay muted />\r\n            <video ref={remoteStreamRef} autoPlay />\r\n            {!inCall && (\r\n                <button onClick={() => startCall('receiver-id')}>Start Call</button>\r\n            )}\r\n            {inCall && (\r\n                <button onClick={() => setInCall(false)}>End Call</button>\r\n            )}\r\n            <div>Status: {callStatus}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VoiceCall;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}