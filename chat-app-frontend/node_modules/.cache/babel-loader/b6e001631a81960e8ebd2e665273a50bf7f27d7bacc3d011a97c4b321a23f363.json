{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\Chatpage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { io } from 'socket.io-client';\n// import defaultAvatar from '../assets/user (1).png'; \n// import CallPage from '../components/CallPage'\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// import 'webrtc-adapter';\n// import AudioCall from './AudioCall'; // Import AudioCall component\n\n// const socket = io('http://localhost:3002'); \n// // const socket = io('http://localhost:3001'); \n\n// const ChatPage = () => {\n\n//     const [setReceiverId] = useState(null);\n//     const { receiverId } = useParams();\n//     const initiateCall = (id) => {\n//         setReceiverId(localStorage.getItem('toUserid'));\n//         console.log(\"calling: the user id\"+localStorage.getItem('toUserid'))\n//       };\n\n//     const { receiverId: urlReceiverId } = useParams();\n//     const [messages, setMessages] = useState([]);\n//     const [messageText, setMessageText] = useState('');\n//     const [reactions, setReactions] = useState({});\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n//     const messageEndRef = useRef(null);\n//     const navigate = useNavigate();\n\n//     const userId = localStorage.getItem('userId');\n//     const storedToUserId = localStorage.getItem('touserId');\n//     // const storedToUserId = localStorage.getItem('touserId');\n//     const [localStream, setLocalStream] = useState(null);\n//     const [remoteStream, setRemoteStream] = useState(null);\n//     const [peerConnection, setPeerConnection] = useState(null);\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n//     // const [isCallActive, setIsCallActive] = useState(false);\n//     const [incomingCall, setIncomingCall] = useState(null);\n//     const [notification, setNotification] = useState(null);\n//     const [showCallPopup, setShowCallPopup] = useState(false);\n//     const [selectedUserId, setSelectedUserId] = useState(null);\n//     const [showAudioCall, setShowAudioCall] = useState(false);\n\n//     const handleCallButtonClick = (userId) => {\n//         console.log('Button clicked with userId:', localStorage.getItem('userId'));\n//         setSelectedUserId(localStorage.getItem('touserId'));\n//         console.log('Selected UserId:', localStorage.getItem('touserId'));\n//         setupWebRTC(); // Ensure WebRTC is set up\n//         socket.emit('initiateCall', { to: localStorage.getItem('touserId') });\n//         setShowCallPopup(true);\n//     };\n\n//     const handleCloseCallPage = () => {\n//         setShowCallPopup(false);\n//     };\n\n//     const formatTimestamp = (timestamp) => {\n//         const messageDate = new Date(timestamp);\n//         const today = new Date();\n//         const options = { year: 'numeric', month: 'short', day: 'numeric' };\n\n//         if (\n//             messageDate.getFullYear() === today.getFullYear() &&\n//             messageDate.getMonth() === today.getMonth() &&\n//             messageDate.getDate() === today.getDate()\n//         ) {\n//             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n//         } else {\n//             return messageDate.toLocaleDateString(undefined, options);\n//         }\n//     };\n\n//     useEffect(() => {\n//         if (!urlReceiverId) return;\n\n//         socket.on('connect', () => {\n//             console.log('Connected to socket server');\n//         });\n\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from socket server');\n//         });\n\n//         socket.on('incomingCall', (data) => {\n//             const { offer, from } = data;\n//             console.log(\"a call is incomming\")\n//             showNotification(`Incoming call from user: ${from}`);\n//             setIncomingCall({ offer, from });\n//             setNotification(`Incoming call from user ${from}`);\n//         });\n\n//         socket.on('callOffer', async (offer) => {\n//             if (peerConnection) {\n//                 await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n//                 const answer = await peerConnection.createAnswer();\n//                 await peerConnection.setLocalDescription(answer);\n//                 socket.emit('callAnswer', { answer, to: urlReceiverId });\n//                 setIsCallActive(true);\n//             }\n//         });\n\n//         socket.on('callAnswer', async (answer) => {\n//             if (peerConnection) {\n//                 await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n//             }\n//         });\n\n//         socket.on('iceCandidate', async (data) => {\n//             console.log('Received ICE candidate:', data.candidate);\n//             if (peerConnection) {\n//                 try {\n//                     await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\n//                     console.log('ICE candidate added successfully.');\n//                 } catch (error) {\n//                     console.error('Error adding ICE candidate:', error);\n//                 }\n//             } else {\n//                 console.error('Peer connection is not established.');\n//             }\n//         });\n\n//         const fetchMessages = async () => {\n//             const receiverId = localStorage.getItem('userId');\n//             const senderId = localStorage.getItem('touserId');\n//             try {\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n//                 const result = await response.json();\n//                 if (Array.isArray(result.messages)) {\n//                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n//                     setMessages(sortedMessages);\n//                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\n//                 } else {\n//                     throw new Error('Unexpected response format');\n//                 }\n//             } catch (error) {\n//                 console.error('Failed to fetch messages:', error);\n//             }\n//         };\n\n//         const fetchReactions = async (messageIds) => {\n//             try {\n//                 const response = await fetch('http://localhost:3001/getReactions', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({ messageIds }),\n//                 });\n//                 const result = await response.json();\n//                 setReactions(result.reactions);\n//             } catch (error) {\n//                 console.error('Failed to fetch reactions:', error);\n//             }\n//         };\n\n//         fetchMessages();\n\n//         socket.emit('joinRoom', receiverId);\n\n//         socket.on('message', (message) => {\n//             console.log('Received message:', message);\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//         });\n\n//         socket.on('messageDeleted', (messageId) => {\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n//         });\n\n//         socket.on('reaction', (reaction) => {\n//             setReactions((prevReactions) => {\n//                 const updatedReactions = { ...prevReactions };\n//                 if (!updatedReactions[reaction.messageId]) {\n//                     updatedReactions[reaction.messageId] = [];\n//                 }\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n//                     (r) => r.userId !== reaction.userId\n//                 );\n//                 updatedReactions[reaction.messageId].push(reaction);\n//                 return updatedReactions;\n//             });\n//         });\n\n//                 socket.on('callNotification', async (notification) => {\n//                     const { offer, from } = notification;\n//                     setIncomingCall({ offer, from });\n//                     setNotification(`Incoming call from user ${from}`);\n//                     if (Notification.permission === 'granted') {\n//                         new Notification('Incoming Call', {\n//                             body: `User ${from} is calling you`,\n//                             icon: defaultAvatar,\n//                         });\n//                     }\n//                 });\n\n//             socket.on('callOffer', async (offer) => {\n//                 if (peerConnection) {\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n//                     const answer = await peerConnection.createAnswer();\n//                     await peerConnection.setLocalDescription(answer);\n//                     socket.emit('callAnswer', { answer, to: receiverId });\n//                     setIsCallActive(true);\n//                 }\n//             });\n\n//             // Handle incoming answer\n//             socket.on('callAnswer', async (answer) => {\n//                 if (peerConnection) {\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n//                 }\n//             });\n\n//         return () => {\n//             socket.off('connect');\n//             socket.off('disconnect');\n//             socket.off('message');\n//             socket.off('messageDeleted');\n//             socket.off('reaction');\n//             socket.off('callNotification');\n//             socket.off('callOffer');\n//             socket.off('callAnswer');\n//             socket.off('iceCandidate');\n//             if (peerConnection) {\n//                 peerConnection.close();\n//             }\n//             if (localStream) {\n//                 localStream.getTracks().forEach(track => track.stop());\n//             }\n//         };\n//     }, [urlReceiverId, peerConnection, localStream]);\n\n//     const setupWebRTC = async () => {\n//         console.log('Setting up WebRTC...'); // Log to indicate function execution started\n\n//         try {\n//             const pc = new RTCPeerConnection();\n//             console.log('RTCPeerConnection created'); // Log after RTCPeerConnection is created\n\n//             pc.ontrack = (event) => {\n//                 console.log('Remote track received:', event.streams[0]); // Log when remote track is received\n//                 setRemoteStream(event.streams[0]); // Assuming setRemoteStream is defined to handle remote stream\n//             };\n\n//             pc.onicecandidate = (event) => {\n//                 if (event.candidate) {\n//                     console.log('ICE candidate:', event.candidate); // Log when ICE candidate is available\n//                     socket.emit('iceCandidate', { candidate: event.candidate, to: urlReceiverId }); // Ensure urlReceiverId is defined\n//                 }\n//             };\n\n//             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n//             console.log('Local media stream obtained'); // Log after local media stream is obtained\n//             setLocalStream(stream); // Assuming setLocalStream is defined to handle local stream\n\n//             stream.getTracks().forEach((track) => {\n//                 console.log('Adding track to peer connection:', track); // Log each track being added\n//                 try {\n//                     pc.addTrack(track, stream);\n//                     console.log('Track added successfully.');\n//                 } catch (error) {\n//                     console.error('Error adding track:', error); // Log any errors adding track\n//                 }\n//             });\n\n//             setPeerConnection(pc); // Assuming setPeerConnection is defined to handle the peer connection\n//             console.log('Peer connection set'); // Log after peer connection is set\n\n//         } catch (error) {\n//             console.error('Error setting up WebRTC:', error); // Log errors\n//         }\n//     };\n\n//     const handleSendMessage = async () => {\n//         if (messageText.trim()) {\n//             try {\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({\n//                         senderId: userId,\n//                         receiverId: storedToUserId,\n//                         text: messageText,\n//                     }),\n//                 });\n//                 const result = await response.json();\n//                 if (response.ok) {\n//                     // window.location.reload();\n//                 } else {\n//                     console.error('SendMessage Error:', result.message);\n//                 }\n//             } catch (error) {\n//                 console.error('SendMessage Fetch Error:', error);\n//             }\n//         }\n//     };\n\n//     const handleDeleteMessage = async (messageId) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId }), // Ensure `messageId` is being sent\n//             });\n\n//             const result = await response.json();\n//             if (response.ok) {\n//                 console.log('DeleteMessage success:', result);\n//                 setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n\n//             } else {\n//                 console.error('DeleteMessage Error:', result.message);\n//             }\n//         } catch (error) {\n//             console.error('DeleteMessage Fetch Error:', error);\n//         }\n//     };\n\n//     const handleAddReaction = async (messageId, reactionType) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\n//             });\n\n//             if (response.ok) {\n//                 const result = await response.json();\n//                 console.log('Reaction added successfully:', result);\n//                 window.location.reload();\n\n//             } else {\n//                 const errorText = await response.text();\n//                 console.error('AddReaction Error:', errorText);\n//             }\n//         } catch (error) {\n//             console.error('AddReaction Fetch Error:', error);\n//         }\n//     };\n\n//     const isMessageDeletable = (createdAt) => {\n//         const messageTime = new Date(createdAt);\n//         const currentTime = new Date();\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n//         return diffMinutes <= 2;\n//     };\n\n//     const handleBack = () => {\n//         navigate('/home');\n//     };\n\n//     const handleCallUser = (userId) => {\n//         setSelectedUserId(userId);\n//         setupWebRTC(); // Setup WebRTC before making a call\n//         socket.emit('initiateCall', { to: userId });\n//         setShowCallPopup(true);\n//     };\n\n//     // };\n//     const handleEndCall = () => {\n//         if (peerConnection) {\n//             peerConnection.close();\n//             setPeerConnection(null);\n//             setLocalStream(null);\n//             setRemoteStream(null);\n//         }\n//         setIsCallActive(false);\n//         socket.emit('endCall', { to: receiverId });\n//     };\n\n//     const handleAcceptCall = async () => {\n//         setShowCallPopup(false);\n//         await setupWebRTC();\n//         if (incomingCall) {\n//             await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\n//             const answer = await peerConnection.createAnswer();\n//             await peerConnection.setLocalDescription(answer);\n//             socket.emit('callAnswer', { answer, to: incomingCall.from });\n//             setIsCallActive(true);\n//         }\n//     };\n\n//     const handleRejectCall = () => {\n//         setShowCallPopup(false);\n//         socket.emit('callReject', { to: incomingCall.from });\n//         setIncomingCall(null);\n//     };\n\n//     const showNotification = (message) => {\n//         if (Notification.permission === 'granted') {\n//             new Notification(message);\n//         } else if (Notification.permission !== 'denied') {\n//             Notification.requestPermission().then(permission => {\n//                 if (permission === 'granted') {\n//                     new Notification(message);\n//                 }\n//             });\n//         }\n//     };\n\n//     // Call this function to test notifications\n//     showNotification('Test notification message');\n\n//     return (\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n//             <div className=\"flex items-center mb-4\">\n//                 <img\n//                     src={defaultAvatar}\n//                     alt=\"Avatar\"\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n//                 />\n//                 <h1 className=\"text-2xl font-bold\">{localStorage.getItem('tousername')}</h1>\n//             </div>\n\n//             <button\n//                 onClick={handleBack}\n//                 type=\"button\"\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n//             >\n//                 <div\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n//                 >\n//                     <svg\n//                         width=\"25px\"\n//                         height=\"25px\"\n//                         viewBox=\"0 0 1024 1024\"\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                     >\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n//                         ></path>\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n//                         ></path>\n//                     </svg>\n//                 </div>\n//                 <p className=\"translate-x-2\">Go Back</p>\n//             </button>\n\n//             <div className=\"flex justify-end mb-4\">\n//             <button onClick={() => handleCallButtonClick(receiverId)} className=\"bg-blue-500 text-white p-2 rounded\">\n//                         <PhoneIcon className=\"w-6 h-6\" />\n\n//                     </button>\n//                 {/* {showAudioCall && <AudioCall receiverId={receiverId} />} */}\n\n//                 <button\n//                      onClick={() => initiateCall(localStorage.getItem('touserId'))}\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n//                 >\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 {showCallPopup && (\n//   <div className=\"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75 z-50\">\n//     <div className=\"bg-white p-8 w-4/5 max-w-3xl rounded-lg shadow-lg\">\n//       <CallPage\n//         receiverId={selectedUserId}\n//         onClose={handleCloseCallPage}\n//         isCallActive={isCallActive}\n//         onEndCall={handleEndCall}\n//       />\n//     </div>\n//   </div>\n// )}\n\n// {isCallActive && (\n//   <button \n//     onClick={handleEndCall} \n//     className=\"fixed bottom-4 right-4 p-4 bg-red-500 text-white rounded-full shadow-lg z-50\"\n//   >\n//     End Call\n//   </button>\n// )}\n\n//             </div>\n\n//             {localStream && (\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         muted\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = localStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n// {remoteStream && (\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = remoteStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n//             <div className=\"flex flex-col flex-grow\">\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\">\n\n//                     <div className=\"flex flex-col gap-2\">\n//                     {messages.length > 0 ? (\n//     messages.map((message) => (\n//         <div\n//             key={message.id}\n//             className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n//             onMouseEnter={() => setHoveredMessageId(message.id)}\n//             onMouseLeave={() => setHoveredMessageId(null)}\n//         >\n//             <p>{message.content}</p>\n//             {message.reaction && (\n//                 <div className=\"text-xs mt-3\">\n//                     <span>{message.reaction}</span>\n//                 </div>\n//             )}\n//             <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\n\n//             {hoveredMessageId === message.id && (\n//                 <div className=\"absolute bottom-10 right-0 flex space-x-1\">\n//                     {['👍', '❤️', '😂'].map((reaction) => (\n//                         <button\n//                             key={reaction}\n//                             onClick={() => handleAddReaction(message.id, reaction)}\n//                             className=\"text-xl\"\n//                         >\n//                             {reaction}\n//                         </button>\n//                     ))}\n//                 </div>\n//             )}\n//             <div className=\"flex space-x-2\">\n//                 {reactions[message.id]?.map((reaction, index) => (\n//                     <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n//                 ))}\n//             </div>\n\n//             {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\n//                 <button\n//                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : 'hidden'} absolute top-0 right-2 text-red-500`}\n//                     onClick={() => {\n//                         handleDeleteMessage(message.id);\n//                         setMessages((prevMessages) =>\n//                             prevMessages.filter((msg) => msg.id !== message.id)\n//                         );\n//                     }}\n//                 >\n//                     Delete\n//                 </button>\n//             )}\n//         </div>\n//     ))\n// ) : (\n//     <p>No messages yet.</p>\n// )}\n\n//                         <div ref={messageEndRef} />\n//                     </div>\n//                 </div>\n\n//                 <div className=\"flex mt-4\">\n//                     <input\n//                         type=\"text\"\n//                         value={messageText}\n//                         onChange={(e) => setMessageText(e.target.value)}\n//                         placeholder=\"Type your message...\"\n//                         className=\"w-full px-3 py-2 border rounded\"\n//                     />\n//                     <button\n//                         onClick={() => {\n//                             handleSendMessage();\n//                             setMessages((prevMessages) => [\n//                                 ...prevMessages,\n//                                 {\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n//                                     content: messageText,\n//                                     from_user_id: userId,\n//                                     created_at: new Date().toISOString(),\n//                                 },\n//                             ]);\n\n//                         }}\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n//                     >\n//                         Send\n//                         <svg\n//                             className=\"w-5 h-5\"\n//                             stroke=\"currentColor\"\n//                             strokeWidth=\"1.5\"\n//                             viewBox=\"0 0 24 24\"\n//                             fill=\"none\"\n//                             xmlns=\"http://www.w3.org/2000/svg\"\n//                         >\n//                             <path\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n//                                 strokeLinejoin=\"round\"\n//                                 strokeLinecap=\"round\"\n//                             ></path>\n//                         </svg>\n//                     </button>\n//                     {showCallPopup && (\n//                 <CallPage\n//                     onAccept={handleAcceptCall}\n//                     onReject={handleRejectCall}\n//                     onClose={handleCloseCallPage}\n//                     receiverId={selectedUserId}\n//                 />\n//             )}\n//             {isCallActive && (\n//                 <div className=\"absolute bottom-0 right-0 p-4 bg-green-500 text-blue-400 flex items-center\">\n//                     <button onClick={handleEndCall} className=\"bg-red-500 p-2 rounded\">\n//                         End Call\n//                     </button>\n//                 </div>\n//             )}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ChatPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport defaultAvatar from '../assets/user (1).png';\nimport CallPage from '../components/CallPage';\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\nimport 'webrtc-adapter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3002');\n// const socket = io('http://localhost:3001'); \n\nconst ChatPage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageText, setMessageText] = useState('');\n  const [reactions, setReactions] = useState({});\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const messageEndRef = useRef(null);\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('userId');\n  const storedToUserId = localStorage.getItem('touserId');\n  // const storedToUserId = localStorage.getItem('touserId');\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n  // const [isCallActive, setIsCallActive] = useState(false);\n  const [incomingCall, setIncomingCall] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const [showCallPopup, setShowCallPopup] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [showAudioCall, setShowAudioCall] = useState(false);\n  const handleCallButtonClick = userId => {\n    console.log('Button clicked with userId:', localStorage.getItem('userId'));\n    setSelectedUserId(localStorage.getItem('touserId'));\n    console.log('Selected UserId:', localStorage.getItem('touserId'));\n    setupWebRTC(); // Ensure WebRTC is set up\n    socket.emit('initiateCall', {\n      to: localStorage.getItem('touserId')\n    });\n    setShowCallPopup(true);\n  };\n  const handleCloseCallPage = () => {\n    setShowCallPopup(false);\n  };\n  const formatTimestamp = timestamp => {\n    const messageDate = new Date(timestamp);\n    const today = new Date();\n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n    if (messageDate.getFullYear() === today.getFullYear() && messageDate.getMonth() === today.getMonth() && messageDate.getDate() === today.getDate()) {\n      return messageDate.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      return messageDate.toLocaleDateString(undefined, options);\n    }\n  };\n  useEffect(() => {\n    if (!urlReceiverId) return;\n    socket.on('connect', () => {\n      console.log('Connected to socket server');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n    });\n    socket.on('incomingCall', data => {\n      const {\n        offer,\n        from\n      } = data;\n      console.log(\"a call is incomming\");\n      showNotification(`Incoming call from user: ${from}`);\n      setIncomingCall({\n        offer,\n        from\n      });\n      setNotification(`Incoming call from user ${from}`);\n    });\n    socket.on('callOffer', async offer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('callAnswer', {\n          answer,\n          to: urlReceiverId\n        });\n        setIsCallActive(true);\n      }\n    });\n    socket.on('callAnswer', async answer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    });\n    socket.on('iceCandidate', async data => {\n      console.log('Received ICE candidate:', data.candidate);\n      if (peerConnection) {\n        try {\n          await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\n          console.log('ICE candidate added successfully.');\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      } else {\n        console.error('Peer connection is not established.');\n      }\n    });\n    const fetchMessages = async () => {\n      const receiverId = localStorage.getItem('userId');\n      const senderId = localStorage.getItem('touserId');\n      try {\n        const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n        const result = await response.json();\n        if (Array.isArray(result.messages)) {\n          const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\n          setMessages(sortedMessages);\n          fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\n        } else {\n          throw new Error('Unexpected response format');\n        }\n      } catch (error) {\n        console.error('Failed to fetch messages:', error);\n      }\n    };\n    const fetchReactions = async messageIds => {\n      try {\n        const response = await fetch('http://localhost:3001/getReactions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messageIds\n          })\n        });\n        const result = await response.json();\n        setReactions(result.reactions);\n      } catch (error) {\n        console.error('Failed to fetch reactions:', error);\n      }\n    };\n    fetchMessages();\n    socket.emit('joinRoom', receiverId);\n    socket.on('message', message => {\n      var _messageEndRef$curren;\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n      (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n    socket.on('messageDeleted', messageId => {\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n    });\n    socket.on('reaction', reaction => {\n      setReactions(prevReactions => {\n        const updatedReactions = {\n          ...prevReactions\n        };\n        if (!updatedReactions[reaction.messageId]) {\n          updatedReactions[reaction.messageId] = [];\n        }\n        updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(r => r.userId !== reaction.userId);\n        updatedReactions[reaction.messageId].push(reaction);\n        return updatedReactions;\n      });\n    });\n    socket.on('callNotification', async notification => {\n      const {\n        offer,\n        from\n      } = notification;\n      setIncomingCall({\n        offer,\n        from\n      });\n      setNotification(`Incoming call from user ${from}`);\n      if (Notification.permission === 'granted') {\n        new Notification('Incoming Call', {\n          body: `User ${from} is calling you`,\n          icon: defaultAvatar\n        });\n      }\n    });\n    socket.on('callOffer', async offer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('callAnswer', {\n          answer,\n          to: receiverId\n        });\n        setIsCallActive(true);\n      }\n    });\n\n    // Handle incoming answer\n    socket.on('callAnswer', async answer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('message');\n      socket.off('messageDeleted');\n      socket.off('reaction');\n      socket.off('callNotification');\n      socket.off('callOffer');\n      socket.off('callAnswer');\n      socket.off('iceCandidate');\n      if (peerConnection) {\n        peerConnection.close();\n      }\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [urlReceiverId, peerConnection, localStream]);\n  const setupWebRTC = async () => {\n    console.log('Setting up WebRTC...'); // Log to indicate function execution started\n\n    try {\n      const pc = new RTCPeerConnection();\n      console.log('RTCPeerConnection created'); // Log after RTCPeerConnection is created\n\n      pc.ontrack = event => {\n        console.log('Remote track received:', event.streams[0]); // Log when remote track is received\n        setRemoteStream(event.streams[0]); // Assuming setRemoteStream is defined to handle remote stream\n      };\n      pc.onicecandidate = event => {\n        if (event.candidate) {\n          console.log('ICE candidate:', event.candidate); // Log when ICE candidate is available\n          socket.emit('iceCandidate', {\n            candidate: event.candidate,\n            to: urlReceiverId\n          }); // Ensure urlReceiverId is defined\n        }\n      };\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      console.log('Local media stream obtained'); // Log after local media stream is obtained\n      setLocalStream(stream); // Assuming setLocalStream is defined to handle local stream\n\n      stream.getTracks().forEach(track => {\n        console.log('Adding track to peer connection:', track); // Log each track being added\n        try {\n          pc.addTrack(track, stream);\n          console.log('Track added successfully.');\n        } catch (error) {\n          console.error('Error adding track:', error); // Log any errors adding track\n        }\n      });\n      setPeerConnection(pc); // Assuming setPeerConnection is defined to handle the peer connection\n      console.log('Peer connection set'); // Log after peer connection is set\n    } catch (error) {\n      console.error('Error setting up WebRTC:', error); // Log errors\n    }\n  };\n  const handleSendMessage = async () => {\n    if (messageText.trim()) {\n      try {\n        const response = await fetch('http://localhost:3001/sendMessage', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            senderId: userId,\n            receiverId: storedToUserId,\n            text: messageText\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          // window.location.reload();\n        } else {\n          console.error('SendMessage Error:', result.message);\n        }\n      } catch (error) {\n        console.error('SendMessage Fetch Error:', error);\n      }\n    }\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      const response = await fetch('http://localhost:3001/deleteMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId\n        }) // Ensure `messageId` is being sent\n      });\n      const result = await response.json();\n      if (response.ok) {\n        console.log('DeleteMessage success:', result);\n        setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n      } else {\n        console.error('DeleteMessage Error:', result.message);\n      }\n    } catch (error) {\n      console.error('DeleteMessage Fetch Error:', error);\n    }\n  };\n  const handleAddReaction = async (messageId, reactionType) => {\n    try {\n      const response = await fetch('http://localhost:3001/addReaction', {\n        // Ensure this URL is correct\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId,\n          userId,\n          reactionType\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Reaction added successfully:', result);\n        window.location.reload();\n      } else {\n        const errorText = await response.text();\n        console.error('AddReaction Error:', errorText);\n      }\n    } catch (error) {\n      console.error('AddReaction Fetch Error:', error);\n    }\n  };\n  const isMessageDeletable = createdAt => {\n    const messageTime = new Date(createdAt);\n    const currentTime = new Date();\n    const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n    return diffMinutes <= 2;\n  };\n  const handleBack = () => {\n    navigate('/home');\n  };\n  const handleCallUser = userId => {\n    setSelectedUserId(userId);\n    setupWebRTC(); // Setup WebRTC before making a call\n    socket.emit('initiateCall', {\n      to: userId\n    });\n    setShowCallPopup(true);\n  };\n\n  // };\n  const handleEndCall = () => {\n    if (peerConnection) {\n      peerConnection.close();\n      setPeerConnection(null);\n      setLocalStream(null);\n      setRemoteStream(null);\n    }\n    setIsCallActive(false);\n    socket.emit('endCall', {\n      to: receiverId\n    });\n  };\n  const handleAcceptCall = async () => {\n    setShowCallPopup(false);\n    await setupWebRTC();\n    if (incomingCall) {\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\n      const answer = await peerConnection.createAnswer();\n      await peerConnection.setLocalDescription(answer);\n      socket.emit('callAnswer', {\n        answer,\n        to: incomingCall.from\n      });\n      setIsCallActive(true);\n    }\n  };\n  const handleRejectCall = () => {\n    setShowCallPopup(false);\n    socket.emit('callReject', {\n      to: incomingCall.from\n    });\n    setIncomingCall(null);\n  };\n  const showNotification = message => {\n    if (Notification.permission === 'granted') {\n      new Notification(message);\n    } else if (Notification.permission !== 'denied') {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          new Notification(message);\n        }\n      });\n    }\n  };\n\n  // Call this function to test notifications\n  showNotification('Test notification message');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: defaultAvatar,\n        alt: \"Avatar\",\n        className: \"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: localStorage.getItem('tousername')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1099,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      type: \"button\",\n      className: \"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"25px\",\n          height: \"25px\",\n          viewBox: \"0 0 1024 1024\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"translate-x-2\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCallButtonClick(receiverId),\n        className: \"bg-blue-500 text-white p-2 rounded\",\n        children: /*#__PURE__*/_jsxDEV(PhoneIcon, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1137,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => initiateCall(localStorage.getItem('touserId')),\n        className: \"bg-blue-500 text-white py-2 px-4 rounded\",\n        children: /*#__PURE__*/_jsxDEV(VideoCameraIcon, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 17\n      }, this), showCallPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75 z-50\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-8 w-4/5 max-w-3xl rounded-lg shadow-lg\",\n          children: /*#__PURE__*/_jsxDEV(CallPage, {\n            receiverId: selectedUserId,\n            onClose: handleCloseCallPage,\n            isCallActive: isCallActive,\n            onEndCall: handleEndCall\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 3\n      }, this), isCallActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndCall,\n        className: \"fixed bottom-4 right-4 p-4 bg-red-500 text-white rounded-full shadow-lg z-50\",\n        children: \"End Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1163,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 13\n    }, this), localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        muted: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = localStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1175,\n      columnNumber: 17\n    }, this), remoteStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = remoteStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1190,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-2\",\n          children: [messages.length > 0 ? messages.map(message => {\n            var _reactions$message$id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`,\n              onMouseEnter: () => setHoveredMessageId(message.id),\n              onMouseLeave: () => setHoveredMessageId(null),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1216,\n                columnNumber: 13\n              }, this), message.reaction && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs mt-3\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: message.reaction\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1219,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500 mt-1\",\n                children: formatTimestamp(message.created_at)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1222,\n                columnNumber: 13\n              }, this), hoveredMessageId === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"absolute bottom-10 right-0 flex space-x-1\",\n                children: ['👍', '❤️', '😂'].map(reaction => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleAddReaction(message.id, reaction),\n                  className: \"text-xl\",\n                  children: reaction\n                }, reaction, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1227,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex space-x-2\",\n                children: (_reactions$message$id = reactions[message.id]) === null || _reactions$message$id === void 0 ? void 0 : _reactions$message$id.map((reaction, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-xs\",\n                  children: reaction.reactionType\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1239,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1237,\n                columnNumber: 13\n              }, this), message.from_user_id === userId && isMessageDeletable(message.created_at) && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `delete-button ${hoveredMessageId === message.id ? 'visible' : 'hidden'} absolute top-0 right-2 text-red-500`,\n                onClick: () => {\n                  handleDeleteMessage(message.id);\n                  setMessages(prevMessages => prevMessages.filter(msg => msg.id !== message.id));\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1244,\n                columnNumber: 17\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1210,\n              columnNumber: 9\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No messages yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1259,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1262,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1207,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: messageText,\n          onChange: e => setMessageText(e.target.value),\n          placeholder: \"Type your message...\",\n          className: \"w-full px-3 py-2 border rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleSendMessage();\n            setMessages(prevMessages => [...prevMessages, {\n              id: new Date().toISOString(),\n              // Temporary ID, should be replaced by server ID\n              content: messageText,\n              from_user_id: userId,\n              created_at: new Date().toISOString()\n            }]);\n          },\n          className: \"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\",\n          children: [\"Send\", /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"w-5 h-5\",\n            stroke: \"currentColor\",\n            strokeWidth: \"1.5\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\",\n              strokeLinejoin: \"round\",\n              strokeLinecap: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1299,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1291,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1274,\n          columnNumber: 21\n        }, this), showCallPopup && /*#__PURE__*/_jsxDEV(CallPage, {\n          onAccept: handleAcceptCall,\n          onReject: handleRejectCall,\n          onClose: handleCloseCallPage,\n          receiverId: selectedUserId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1307,\n          columnNumber: 17\n        }, this), isCallActive && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bottom-0 right-0 p-4 bg-green-500 text-blue-400 flex items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleEndCall,\n            className: \"bg-red-500 p-2 rounded\",\n            children: \"End Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1316,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1315,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1098,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"lgkVU2ytUrkHLA9iybOyFiGbJls=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","io","defaultAvatar","CallPage","PhoneIcon","VideoCameraIcon","jsxDEV","_jsxDEV","socket","ChatPage","_s","messages","setMessages","messageText","setMessageText","reactions","setReactions","hoveredMessageId","setHoveredMessageId","messageEndRef","navigate","userId","localStorage","getItem","storedToUserId","localStream","setLocalStream","remoteStream","setRemoteStream","peerConnection","setPeerConnection","isCallActive","setIsCallActive","incomingCall","setIncomingCall","notification","setNotification","showCallPopup","setShowCallPopup","selectedUserId","setSelectedUserId","showAudioCall","setShowAudioCall","handleCallButtonClick","console","log","setupWebRTC","emit","to","handleCloseCallPage","formatTimestamp","timestamp","messageDate","Date","today","options","year","month","day","getFullYear","getMonth","getDate","toLocaleTimeString","hour","minute","toLocaleDateString","undefined","urlReceiverId","on","data","offer","from","showNotification","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","candidate","addIceCandidate","RTCIceCandidate","error","fetchMessages","receiverId","senderId","response","fetch","result","json","Array","isArray","sortedMessages","sort","a","b","created_at","fetchReactions","map","msg","id","Error","messageIds","method","headers","body","JSON","stringify","message","_messageEndRef$curren","prevMessages","current","scrollIntoView","behavior","messageId","filter","reaction","prevReactions","updatedReactions","r","push","Notification","permission","icon","off","close","getTracks","forEach","track","stop","pc","RTCPeerConnection","ontrack","event","streams","onicecandidate","stream","navigator","mediaDevices","getUserMedia","audio","video","addTrack","handleSendMessage","trim","text","ok","handleDeleteMessage","handleAddReaction","reactionType","window","location","reload","errorText","isMessageDeletable","createdAt","messageTime","currentTime","diffMinutes","handleBack","handleCallUser","handleEndCall","handleAcceptCall","handleRejectCall","requestPermission","then","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","width","height","viewBox","xmlns","fill","d","initiateCall","onClose","onEndCall","autoPlay","muted","ref","srcObject","length","_reactions$message$id","from_user_id","onMouseEnter","onMouseLeave","content","index","value","onChange","e","target","placeholder","toISOString","stroke","strokeWidth","strokeLinejoin","strokeLinecap","onAccept","onReject","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/Chatpage.js"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { io } from 'socket.io-client';\r\n// import defaultAvatar from '../assets/user (1).png'; \r\n// import CallPage from '../components/CallPage'\r\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// import 'webrtc-adapter';\r\n// import AudioCall from './AudioCall'; // Import AudioCall component\r\n\r\n// const socket = io('http://localhost:3002'); \r\n// // const socket = io('http://localhost:3001'); \r\n\r\n// const ChatPage = () => {\r\n\r\n//     const [setReceiverId] = useState(null);\r\n//     const { receiverId } = useParams();\r\n//     const initiateCall = (id) => {\r\n//         setReceiverId(localStorage.getItem('toUserid'));\r\n//         console.log(\"calling: the user id\"+localStorage.getItem('toUserid'))\r\n//       };\r\n\r\n//     const { receiverId: urlReceiverId } = useParams();\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [messageText, setMessageText] = useState('');\r\n//     const [reactions, setReactions] = useState({});\r\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n//     const messageEndRef = useRef(null);\r\n//     const navigate = useNavigate();\r\n    \r\n\r\n//     const userId = localStorage.getItem('userId');\r\n//     const storedToUserId = localStorage.getItem('touserId');\r\n//     // const storedToUserId = localStorage.getItem('touserId');\r\n//     const [localStream, setLocalStream] = useState(null);\r\n//     const [remoteStream, setRemoteStream] = useState(null);\r\n//     const [peerConnection, setPeerConnection] = useState(null);\r\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n//     // const [isCallActive, setIsCallActive] = useState(false);\r\n//     const [incomingCall, setIncomingCall] = useState(null);\r\n//     const [notification, setNotification] = useState(null);\r\n//     const [showCallPopup, setShowCallPopup] = useState(false);\r\n//     const [selectedUserId, setSelectedUserId] = useState(null);\r\n//     const [showAudioCall, setShowAudioCall] = useState(false);\r\n\r\n\r\n\r\n//     const handleCallButtonClick = (userId) => {\r\n//         console.log('Button clicked with userId:', localStorage.getItem('userId'));\r\n//         setSelectedUserId(localStorage.getItem('touserId'));\r\n//         console.log('Selected UserId:', localStorage.getItem('touserId'));\r\n//         setupWebRTC(); // Ensure WebRTC is set up\r\n//         socket.emit('initiateCall', { to: localStorage.getItem('touserId') });\r\n//         setShowCallPopup(true);\r\n//     };\r\n \r\n\r\n//     const handleCloseCallPage = () => {\r\n//         setShowCallPopup(false);\r\n//     };\r\n\r\n\r\n//     const formatTimestamp = (timestamp) => {\r\n//         const messageDate = new Date(timestamp);\r\n//         const today = new Date();\r\n//         const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n//         if (\r\n//             messageDate.getFullYear() === today.getFullYear() &&\r\n//             messageDate.getMonth() === today.getMonth() &&\r\n//             messageDate.getDate() === today.getDate()\r\n//         ) {\r\n//             return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n//         } else {\r\n//             return messageDate.toLocaleDateString(undefined, options);\r\n//         }\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         if (!urlReceiverId) return;\r\n\r\n//         socket.on('connect', () => {\r\n//             console.log('Connected to socket server');\r\n//         });\r\n\r\n//         socket.on('disconnect', () => {\r\n//             console.log('Disconnected from socket server');\r\n//         });\r\n\r\n//         socket.on('incomingCall', (data) => {\r\n//             const { offer, from } = data;\r\n//             console.log(\"a call is incomming\")\r\n//             showNotification(`Incoming call from user: ${from}`);\r\n//             setIncomingCall({ offer, from });\r\n//             setNotification(`Incoming call from user ${from}`);\r\n//         });\r\n\r\n//         socket.on('callOffer', async (offer) => {\r\n//             if (peerConnection) {\r\n//                 await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n//                 const answer = await peerConnection.createAnswer();\r\n//                 await peerConnection.setLocalDescription(answer);\r\n//                 socket.emit('callAnswer', { answer, to: urlReceiverId });\r\n//                 setIsCallActive(true);\r\n//             }\r\n//         });\r\n\r\n//         socket.on('callAnswer', async (answer) => {\r\n//             if (peerConnection) {\r\n//                 await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n//             }\r\n//         });\r\n\r\n//         socket.on('iceCandidate', async (data) => {\r\n//             console.log('Received ICE candidate:', data.candidate);\r\n//             if (peerConnection) {\r\n//                 try {\r\n//                     await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n//                     console.log('ICE candidate added successfully.');\r\n//                 } catch (error) {\r\n//                     console.error('Error adding ICE candidate:', error);\r\n//                 }\r\n//             } else {\r\n//                 console.error('Peer connection is not established.');\r\n//             }\r\n//         });\r\n        \r\n\r\n\r\n        \r\n//         const fetchMessages = async () => {\r\n//             const receiverId = localStorage.getItem('userId');\r\n//             const senderId = localStorage.getItem('touserId');\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n//                 const result = await response.json();\r\n//                 if (Array.isArray(result.messages)) {\r\n//                     const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n//                     setMessages(sortedMessages);\r\n//                     fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\r\n//                 } else {\r\n//                     throw new Error('Unexpected response format');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch messages:', error);\r\n//             }\r\n//         };\r\n\r\n\r\n//         const fetchReactions = async (messageIds) => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/getReactions', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({ messageIds }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 setReactions(result.reactions);\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch reactions:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n\r\n//         socket.emit('joinRoom', receiverId);\r\n\r\n//         socket.on('message', (message) => {\r\n//             console.log('Received message:', message);\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//         });\r\n\r\n//         socket.on('messageDeleted', (messageId) => {\r\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n//         });\r\n\r\n//         socket.on('reaction', (reaction) => {\r\n//             setReactions((prevReactions) => {\r\n//                 const updatedReactions = { ...prevReactions };\r\n//                 if (!updatedReactions[reaction.messageId]) {\r\n//                     updatedReactions[reaction.messageId] = [];\r\n//                 }\r\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n//                     (r) => r.userId !== reaction.userId\r\n//                 );\r\n//                 updatedReactions[reaction.messageId].push(reaction);\r\n//                 return updatedReactions;\r\n//             });\r\n//         });\r\n\r\n//                 socket.on('callNotification', async (notification) => {\r\n//                     const { offer, from } = notification;\r\n//                     setIncomingCall({ offer, from });\r\n//                     setNotification(`Incoming call from user ${from}`);\r\n//                     if (Notification.permission === 'granted') {\r\n//                         new Notification('Incoming Call', {\r\n//                             body: `User ${from} is calling you`,\r\n//                             icon: defaultAvatar,\r\n//                         });\r\n//                     }\r\n//                 });\r\n\r\n//             socket.on('callOffer', async (offer) => {\r\n//                 if (peerConnection) {\r\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n//                     const answer = await peerConnection.createAnswer();\r\n//                     await peerConnection.setLocalDescription(answer);\r\n//                     socket.emit('callAnswer', { answer, to: receiverId });\r\n//                     setIsCallActive(true);\r\n//                 }\r\n//             });\r\n\r\n//             // Handle incoming answer\r\n//             socket.on('callAnswer', async (answer) => {\r\n//                 if (peerConnection) {\r\n//                     await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n//                 }\r\n//             });\r\n\r\n\r\n//         return () => {\r\n//             socket.off('connect');\r\n//             socket.off('disconnect');\r\n//             socket.off('message');\r\n//             socket.off('messageDeleted');\r\n//             socket.off('reaction');\r\n//             socket.off('callNotification');\r\n//             socket.off('callOffer');\r\n//             socket.off('callAnswer');\r\n//             socket.off('iceCandidate');\r\n//             if (peerConnection) {\r\n//                 peerConnection.close();\r\n//             }\r\n//             if (localStream) {\r\n//                 localStream.getTracks().forEach(track => track.stop());\r\n//             }\r\n//         };\r\n//     }, [urlReceiverId, peerConnection, localStream]);\r\n    \r\n//     const setupWebRTC = async () => {\r\n//         console.log('Setting up WebRTC...'); // Log to indicate function execution started\r\n    \r\n//         try {\r\n//             const pc = new RTCPeerConnection();\r\n//             console.log('RTCPeerConnection created'); // Log after RTCPeerConnection is created\r\n    \r\n//             pc.ontrack = (event) => {\r\n//                 console.log('Remote track received:', event.streams[0]); // Log when remote track is received\r\n//                 setRemoteStream(event.streams[0]); // Assuming setRemoteStream is defined to handle remote stream\r\n//             };\r\n    \r\n//             pc.onicecandidate = (event) => {\r\n//                 if (event.candidate) {\r\n//                     console.log('ICE candidate:', event.candidate); // Log when ICE candidate is available\r\n//                     socket.emit('iceCandidate', { candidate: event.candidate, to: urlReceiverId }); // Ensure urlReceiverId is defined\r\n//                 }\r\n//             };\r\n    \r\n//             const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n//             console.log('Local media stream obtained'); // Log after local media stream is obtained\r\n//             setLocalStream(stream); // Assuming setLocalStream is defined to handle local stream\r\n    \r\n//             stream.getTracks().forEach((track) => {\r\n//                 console.log('Adding track to peer connection:', track); // Log each track being added\r\n//                 try {\r\n//                     pc.addTrack(track, stream);\r\n//                     console.log('Track added successfully.');\r\n//                 } catch (error) {\r\n//                     console.error('Error adding track:', error); // Log any errors adding track\r\n//                 }\r\n//             });\r\n    \r\n//             setPeerConnection(pc); // Assuming setPeerConnection is defined to handle the peer connection\r\n//             console.log('Peer connection set'); // Log after peer connection is set\r\n    \r\n//         } catch (error) {\r\n//             console.error('Error setting up WebRTC:', error); // Log errors\r\n//         }\r\n//     };\r\n    \r\n    \r\n\r\n//     const handleSendMessage = async () => {\r\n//         if (messageText.trim()) {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({\r\n//                         senderId: userId,\r\n//                         receiverId: storedToUserId,\r\n//                         text: messageText,\r\n//                     }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 if (response.ok) {\r\n//                     // window.location.reload();\r\n//                 } else {\r\n//                     console.error('SendMessage Error:', result.message);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('SendMessage Fetch Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteMessage = async (messageId) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId }), // Ensure `messageId` is being sent\r\n//             });\r\n    \r\n//             const result = await response.json();\r\n//             if (response.ok) {\r\n//                 console.log('DeleteMessage success:', result);\r\n//                 setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\r\n                \r\n//             } else {\r\n//                 console.error('DeleteMessage Error:', result.message);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('DeleteMessage Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n    \r\n\r\n//     const handleAddReaction = async (messageId, reactionType) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 const result = await response.json();\r\n//                 console.log('Reaction added successfully:', result);\r\n//                 window.location.reload();\r\n\r\n//             } else {\r\n//                 const errorText = await response.text();\r\n//                 console.error('AddReaction Error:', errorText);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('AddReaction Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const isMessageDeletable = (createdAt) => {\r\n//         const messageTime = new Date(createdAt);\r\n//         const currentTime = new Date();\r\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n//         return diffMinutes <= 2;\r\n//     };\r\n\r\n//     const handleBack = () => {\r\n//         navigate('/home');\r\n//     };\r\n\r\n   \r\n//     const handleCallUser = (userId) => {\r\n//         setSelectedUserId(userId);\r\n//         setupWebRTC(); // Setup WebRTC before making a call\r\n//         socket.emit('initiateCall', { to: userId });\r\n//         setShowCallPopup(true);\r\n//     };\r\n    \r\n\r\n//     // };\r\n//     const handleEndCall = () => {\r\n//         if (peerConnection) {\r\n//             peerConnection.close();\r\n//             setPeerConnection(null);\r\n//             setLocalStream(null);\r\n//             setRemoteStream(null);\r\n//         }\r\n//         setIsCallActive(false);\r\n//         socket.emit('endCall', { to: receiverId });\r\n//     };\r\n    \r\n\r\n\r\n//     const handleAcceptCall = async () => {\r\n//         setShowCallPopup(false);\r\n//         await setupWebRTC();\r\n//         if (incomingCall) {\r\n//             await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\r\n//             const answer = await peerConnection.createAnswer();\r\n//             await peerConnection.setLocalDescription(answer);\r\n//             socket.emit('callAnswer', { answer, to: incomingCall.from });\r\n//             setIsCallActive(true);\r\n//         }\r\n//     };\r\n\r\n//     const handleRejectCall = () => {\r\n//         setShowCallPopup(false);\r\n//         socket.emit('callReject', { to: incomingCall.from });\r\n//         setIncomingCall(null);\r\n//     };\r\n\r\n\r\n//     const showNotification = (message) => {\r\n//         if (Notification.permission === 'granted') {\r\n//             new Notification(message);\r\n//         } else if (Notification.permission !== 'denied') {\r\n//             Notification.requestPermission().then(permission => {\r\n//                 if (permission === 'granted') {\r\n//                     new Notification(message);\r\n//                 }\r\n//             });\r\n//         }\r\n//     };\r\n    \r\n    \r\n    \r\n//     // Call this function to test notifications\r\n//     showNotification('Test notification message');\r\n    \r\n\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n//             <div className=\"flex items-center mb-4\">\r\n//                 <img\r\n//                     src={defaultAvatar}\r\n//                     alt=\"Avatar\"\r\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n//                 />\r\n//                 <h1 className=\"text-2xl font-bold\">{localStorage.getItem('tousername')}</h1>\r\n//             </div>\r\n\r\n//             <button\r\n//                 onClick={handleBack}\r\n//                 type=\"button\"\r\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n//             >\r\n//                 <div\r\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n//                 >\r\n//                     <svg\r\n//                         width=\"25px\"\r\n//                         height=\"25px\"\r\n//                         viewBox=\"0 0 1024 1024\"\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                     >\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n//                         ></path>\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n//                         ></path>\r\n//                     </svg>\r\n//                 </div>\r\n//                 <p className=\"translate-x-2\">Go Back</p>\r\n//             </button>\r\n\r\n//             <div className=\"flex justify-end mb-4\">\r\n//             <button onClick={() => handleCallButtonClick(receiverId)} className=\"bg-blue-500 text-white p-2 rounded\">\r\n//                         <PhoneIcon className=\"w-6 h-6\" />\r\n                       \r\n//                     </button>\r\n//                 {/* {showAudioCall && <AudioCall receiverId={receiverId} />} */}\r\n\r\n\r\n//                 <button\r\n//                      onClick={() => initiateCall(localStorage.getItem('touserId'))}\r\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n//                 >\r\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 {showCallPopup && (\r\n//   <div className=\"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75 z-50\">\r\n//     <div className=\"bg-white p-8 w-4/5 max-w-3xl rounded-lg shadow-lg\">\r\n//       <CallPage\r\n//         receiverId={selectedUserId}\r\n//         onClose={handleCloseCallPage}\r\n//         isCallActive={isCallActive}\r\n//         onEndCall={handleEndCall}\r\n//       />\r\n//     </div>\r\n//   </div>\r\n// )}\r\n\r\n// {isCallActive && (\r\n//   <button \r\n//     onClick={handleEndCall} \r\n//     className=\"fixed bottom-4 right-4 p-4 bg-red-500 text-white rounded-full shadow-lg z-50\"\r\n//   >\r\n//     End Call\r\n//   </button>\r\n// )}\r\n\r\n\r\n//             </div>\r\n\r\n//             {localStream && (\r\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         muted\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = localStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n// {remoteStream && (\r\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = remoteStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//             <div className=\"flex flex-col flex-grow\">\r\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\">\r\n\r\n//                     <div className=\"flex flex-col gap-2\">\r\n//                     {messages.length > 0 ? (\r\n//     messages.map((message) => (\r\n//         <div\r\n//             key={message.id}\r\n//             className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n//             onMouseEnter={() => setHoveredMessageId(message.id)}\r\n//             onMouseLeave={() => setHoveredMessageId(null)}\r\n//         >\r\n//             <p>{message.content}</p>\r\n//             {message.reaction && (\r\n//                 <div className=\"text-xs mt-3\">\r\n//                     <span>{message.reaction}</span>\r\n//                 </div>\r\n//             )}\r\n//             <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n            \r\n//             {hoveredMessageId === message.id && (\r\n//                 <div className=\"absolute bottom-10 right-0 flex space-x-1\">\r\n//                     {['👍', '❤️', '😂'].map((reaction) => (\r\n//                         <button\r\n//                             key={reaction}\r\n//                             onClick={() => handleAddReaction(message.id, reaction)}\r\n//                             className=\"text-xl\"\r\n//                         >\r\n//                             {reaction}\r\n//                         </button>\r\n//                     ))}\r\n//                 </div>\r\n//             )}\r\n//             <div className=\"flex space-x-2\">\r\n//                 {reactions[message.id]?.map((reaction, index) => (\r\n//                     <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n//                 ))}\r\n//             </div>\r\n            \r\n//             {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\r\n//                 <button\r\n//                     className={`delete-button ${hoveredMessageId === message.id ? 'visible' : 'hidden'} absolute top-0 right-2 text-red-500`}\r\n//                     onClick={() => {\r\n//                         handleDeleteMessage(message.id);\r\n//                         setMessages((prevMessages) =>\r\n//                             prevMessages.filter((msg) => msg.id !== message.id)\r\n//                         );\r\n//                     }}\r\n//                 >\r\n//                     Delete\r\n//                 </button>\r\n//             )}\r\n//         </div>\r\n//     ))\r\n// ) : (\r\n//     <p>No messages yet.</p>\r\n// )}\r\n\r\n//                         <div ref={messageEndRef} />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"flex mt-4\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={messageText}\r\n//                         onChange={(e) => setMessageText(e.target.value)}\r\n//                         placeholder=\"Type your message...\"\r\n//                         className=\"w-full px-3 py-2 border rounded\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={() => {\r\n//                             handleSendMessage();\r\n//                             setMessages((prevMessages) => [\r\n//                                 ...prevMessages,\r\n//                                 {\r\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n//                                     content: messageText,\r\n//                                     from_user_id: userId,\r\n//                                     created_at: new Date().toISOString(),\r\n//                                 },\r\n//                             ]);\r\n                            \r\n//                         }}\r\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n//                     >\r\n//                         Send\r\n//                         <svg\r\n//                             className=\"w-5 h-5\"\r\n//                             stroke=\"currentColor\"\r\n//                             strokeWidth=\"1.5\"\r\n//                             viewBox=\"0 0 24 24\"\r\n//                             fill=\"none\"\r\n//                             xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         >\r\n//                             <path\r\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n//                                 strokeLinejoin=\"round\"\r\n//                                 strokeLinecap=\"round\"\r\n//                             ></path>\r\n//                         </svg>\r\n//                     </button>\r\n//                     {showCallPopup && (\r\n//                 <CallPage\r\n//                     onAccept={handleAcceptCall}\r\n//                     onReject={handleRejectCall}\r\n//                     onClose={handleCloseCallPage}\r\n//                     receiverId={selectedUserId}\r\n//                 />\r\n//             )}\r\n//             {isCallActive && (\r\n//                 <div className=\"absolute bottom-0 right-0 p-4 bg-green-500 text-blue-400 flex items-center\">\r\n//                     <button onClick={handleEndCall} className=\"bg-red-500 p-2 rounded\">\r\n//                         End Call\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport defaultAvatar from '../assets/user (1).png'; \r\nimport CallPage from '../components/CallPage'\r\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\nimport 'webrtc-adapter';\r\n\r\nconst socket = io('http://localhost:3002'); \r\n// const socket = io('http://localhost:3001'); \r\n\r\nconst ChatPage = () => {\r\n\r\n\r\n   \r\n    const [messages, setMessages] = useState([]);\r\n    const [messageText, setMessageText] = useState('');\r\n    const [reactions, setReactions] = useState({});\r\n    const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n    const messageEndRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    \r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const storedToUserId = localStorage.getItem('touserId');\r\n    // const storedToUserId = localStorage.getItem('touserId');\r\n    const [localStream, setLocalStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [peerConnection, setPeerConnection] = useState(null);\r\n    const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n    // const [isCallActive, setIsCallActive] = useState(false);\r\n    const [incomingCall, setIncomingCall] = useState(null);\r\n    const [notification, setNotification] = useState(null);\r\n    const [showCallPopup, setShowCallPopup] = useState(false);\r\n    const [selectedUserId, setSelectedUserId] = useState(null);\r\n    const [showAudioCall, setShowAudioCall] = useState(false);\r\n\r\n\r\n\r\n    const handleCallButtonClick = (userId) => {\r\n        console.log('Button clicked with userId:', localStorage.getItem('userId'));\r\n        setSelectedUserId(localStorage.getItem('touserId'));\r\n        console.log('Selected UserId:', localStorage.getItem('touserId'));\r\n        setupWebRTC(); // Ensure WebRTC is set up\r\n        socket.emit('initiateCall', { to: localStorage.getItem('touserId') });\r\n        setShowCallPopup(true);\r\n    };\r\n \r\n\r\n    const handleCloseCallPage = () => {\r\n        setShowCallPopup(false);\r\n    };\r\n\r\n\r\n    const formatTimestamp = (timestamp) => {\r\n        const messageDate = new Date(timestamp);\r\n        const today = new Date();\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric' };\r\n    \r\n        if (\r\n            messageDate.getFullYear() === today.getFullYear() &&\r\n            messageDate.getMonth() === today.getMonth() &&\r\n            messageDate.getDate() === today.getDate()\r\n        ) {\r\n            return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        } else {\r\n            return messageDate.toLocaleDateString(undefined, options);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!urlReceiverId) return;\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to socket server');\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected from socket server');\r\n        });\r\n\r\n        socket.on('incomingCall', (data) => {\r\n            const { offer, from } = data;\r\n            console.log(\"a call is incomming\")\r\n            showNotification(`Incoming call from user: ${from}`);\r\n            setIncomingCall({ offer, from });\r\n            setNotification(`Incoming call from user ${from}`);\r\n        });\r\n\r\n        socket.on('callOffer', async (offer) => {\r\n            if (peerConnection) {\r\n                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                const answer = await peerConnection.createAnswer();\r\n                await peerConnection.setLocalDescription(answer);\r\n                socket.emit('callAnswer', { answer, to: urlReceiverId });\r\n                setIsCallActive(true);\r\n            }\r\n        });\r\n\r\n        socket.on('callAnswer', async (answer) => {\r\n            if (peerConnection) {\r\n                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n            }\r\n        });\r\n\r\n        socket.on('iceCandidate', async (data) => {\r\n            console.log('Received ICE candidate:', data.candidate);\r\n            if (peerConnection) {\r\n                try {\r\n                    await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\r\n                    console.log('ICE candidate added successfully.');\r\n                } catch (error) {\r\n                    console.error('Error adding ICE candidate:', error);\r\n                }\r\n            } else {\r\n                console.error('Peer connection is not established.');\r\n            }\r\n        });\r\n        \r\n\r\n\r\n        \r\n        const fetchMessages = async () => {\r\n            const receiverId = localStorage.getItem('userId');\r\n            const senderId = localStorage.getItem('touserId');\r\n            try {\r\n                const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n                const result = await response.json();\r\n                if (Array.isArray(result.messages)) {\r\n                    const sortedMessages = result.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n                    setMessages(sortedMessages);\r\n                    fetchReactions(sortedMessages.map(msg => msg.id)); // Fetch reactions for these messages\r\n                } else {\r\n                    throw new Error('Unexpected response format');\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to fetch messages:', error);\r\n            }\r\n        };\r\n\r\n\r\n        const fetchReactions = async (messageIds) => {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/getReactions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ messageIds }),\r\n                });\r\n                const result = await response.json();\r\n                setReactions(result.reactions);\r\n            } catch (error) {\r\n                console.error('Failed to fetch reactions:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        socket.emit('joinRoom', receiverId);\r\n\r\n        socket.on('message', (message) => {\r\n            console.log('Received message:', message);\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n            messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n\r\n        socket.on('messageDeleted', (messageId) => {\r\n            setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n        });\r\n\r\n        socket.on('reaction', (reaction) => {\r\n            setReactions((prevReactions) => {\r\n                const updatedReactions = { ...prevReactions };\r\n                if (!updatedReactions[reaction.messageId]) {\r\n                    updatedReactions[reaction.messageId] = [];\r\n                }\r\n                updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n                    (r) => r.userId !== reaction.userId\r\n                );\r\n                updatedReactions[reaction.messageId].push(reaction);\r\n                return updatedReactions;\r\n            });\r\n        });\r\n\r\n                socket.on('callNotification', async (notification) => {\r\n                    const { offer, from } = notification;\r\n                    setIncomingCall({ offer, from });\r\n                    setNotification(`Incoming call from user ${from}`);\r\n                    if (Notification.permission === 'granted') {\r\n                        new Notification('Incoming Call', {\r\n                            body: `User ${from} is calling you`,\r\n                            icon: defaultAvatar,\r\n                        });\r\n                    }\r\n                });\r\n\r\n            socket.on('callOffer', async (offer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    const answer = await peerConnection.createAnswer();\r\n                    await peerConnection.setLocalDescription(answer);\r\n                    socket.emit('callAnswer', { answer, to: receiverId });\r\n                    setIsCallActive(true);\r\n                }\r\n            });\r\n\r\n            // Handle incoming answer\r\n            socket.on('callAnswer', async (answer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n                }\r\n            });\r\n\r\n\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('disconnect');\r\n            socket.off('message');\r\n            socket.off('messageDeleted');\r\n            socket.off('reaction');\r\n            socket.off('callNotification');\r\n            socket.off('callOffer');\r\n            socket.off('callAnswer');\r\n            socket.off('iceCandidate');\r\n            if (peerConnection) {\r\n                peerConnection.close();\r\n            }\r\n            if (localStream) {\r\n                localStream.getTracks().forEach(track => track.stop());\r\n            }\r\n        };\r\n    }, [urlReceiverId, peerConnection, localStream]);\r\n    \r\n    const setupWebRTC = async () => {\r\n        console.log('Setting up WebRTC...'); // Log to indicate function execution started\r\n    \r\n        try {\r\n            const pc = new RTCPeerConnection();\r\n            console.log('RTCPeerConnection created'); // Log after RTCPeerConnection is created\r\n    \r\n            pc.ontrack = (event) => {\r\n                console.log('Remote track received:', event.streams[0]); // Log when remote track is received\r\n                setRemoteStream(event.streams[0]); // Assuming setRemoteStream is defined to handle remote stream\r\n            };\r\n    \r\n            pc.onicecandidate = (event) => {\r\n                if (event.candidate) {\r\n                    console.log('ICE candidate:', event.candidate); // Log when ICE candidate is available\r\n                    socket.emit('iceCandidate', { candidate: event.candidate, to: urlReceiverId }); // Ensure urlReceiverId is defined\r\n                }\r\n            };\r\n    \r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n            console.log('Local media stream obtained'); // Log after local media stream is obtained\r\n            setLocalStream(stream); // Assuming setLocalStream is defined to handle local stream\r\n    \r\n            stream.getTracks().forEach((track) => {\r\n                console.log('Adding track to peer connection:', track); // Log each track being added\r\n                try {\r\n                    pc.addTrack(track, stream);\r\n                    console.log('Track added successfully.');\r\n                } catch (error) {\r\n                    console.error('Error adding track:', error); // Log any errors adding track\r\n                }\r\n            });\r\n    \r\n            setPeerConnection(pc); // Assuming setPeerConnection is defined to handle the peer connection\r\n            console.log('Peer connection set'); // Log after peer connection is set\r\n    \r\n        } catch (error) {\r\n            console.error('Error setting up WebRTC:', error); // Log errors\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    const handleSendMessage = async () => {\r\n        if (messageText.trim()) {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/sendMessage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        senderId: userId,\r\n                        receiverId: storedToUserId,\r\n                        text: messageText,\r\n                    }),\r\n                });\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    // window.location.reload();\r\n                } else {\r\n                    console.error('SendMessage Error:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('SendMessage Fetch Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/deleteMessage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId }), // Ensure `messageId` is being sent\r\n            });\r\n    \r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                console.log('DeleteMessage success:', result);\r\n                setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\r\n                \r\n            } else {\r\n                console.error('DeleteMessage Error:', result.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('DeleteMessage Fetch Error:', error);\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    const handleAddReaction = async (messageId, reactionType) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId, userId, reactionType }),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('Reaction added successfully:', result);\r\n                window.location.reload();\r\n\r\n            } else {\r\n                const errorText = await response.text();\r\n                console.error('AddReaction Error:', errorText);\r\n            }\r\n        } catch (error) {\r\n            console.error('AddReaction Fetch Error:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const isMessageDeletable = (createdAt) => {\r\n        const messageTime = new Date(createdAt);\r\n        const currentTime = new Date();\r\n        const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n        return diffMinutes <= 2;\r\n    };\r\n\r\n    const handleBack = () => {\r\n        navigate('/home');\r\n    };\r\n\r\n   \r\n    const handleCallUser = (userId) => {\r\n        setSelectedUserId(userId);\r\n        setupWebRTC(); // Setup WebRTC before making a call\r\n        socket.emit('initiateCall', { to: userId });\r\n        setShowCallPopup(true);\r\n    };\r\n    \r\n\r\n    // };\r\n    const handleEndCall = () => {\r\n        if (peerConnection) {\r\n            peerConnection.close();\r\n            setPeerConnection(null);\r\n            setLocalStream(null);\r\n            setRemoteStream(null);\r\n        }\r\n        setIsCallActive(false);\r\n        socket.emit('endCall', { to: receiverId });\r\n    };\r\n    \r\n\r\n\r\n    const handleAcceptCall = async () => {\r\n        setShowCallPopup(false);\r\n        await setupWebRTC();\r\n        if (incomingCall) {\r\n            await peerConnection.setRemoteDescription(new RTCSessionDescription(incomingCall.offer));\r\n            const answer = await peerConnection.createAnswer();\r\n            await peerConnection.setLocalDescription(answer);\r\n            socket.emit('callAnswer', { answer, to: incomingCall.from });\r\n            setIsCallActive(true);\r\n        }\r\n    };\r\n\r\n    const handleRejectCall = () => {\r\n        setShowCallPopup(false);\r\n        socket.emit('callReject', { to: incomingCall.from });\r\n        setIncomingCall(null);\r\n    };\r\n\r\n\r\n    const showNotification = (message) => {\r\n        if (Notification.permission === 'granted') {\r\n            new Notification(message);\r\n        } else if (Notification.permission !== 'denied') {\r\n            Notification.requestPermission().then(permission => {\r\n                if (permission === 'granted') {\r\n                    new Notification(message);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    // Call this function to test notifications\r\n    showNotification('Test notification message');\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n            <div className=\"flex items-center mb-4\">\r\n                <img\r\n                    src={defaultAvatar}\r\n                    alt=\"Avatar\"\r\n                    className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n                />\r\n                <h1 className=\"text-2xl font-bold\">{localStorage.getItem('tousername')}</h1>\r\n            </div>\r\n\r\n            <button\r\n                onClick={handleBack}\r\n                type=\"button\"\r\n                className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n            >\r\n                <div\r\n                    className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n                >\r\n                    <svg\r\n                        width=\"25px\"\r\n                        height=\"25px\"\r\n                        viewBox=\"0 0 1024 1024\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n                <p className=\"translate-x-2\">Go Back</p>\r\n            </button>\r\n\r\n            <div className=\"flex justify-end mb-4\">\r\n            <button onClick={() => handleCallButtonClick(receiverId)} className=\"bg-blue-500 text-white p-2 rounded\">\r\n                        <PhoneIcon className=\"w-6 h-6\" />\r\n                       \r\n                    </button>\r\n                {/* {showAudioCall && <AudioCall receiverId={receiverId} />} */}\r\n\r\n\r\n                <button\r\n                     onClick={() => initiateCall(localStorage.getItem('touserId'))}\r\n                    className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n                >\r\n                    <VideoCameraIcon className=\"w-6 h-6\" />\r\n                </button>\r\n                {showCallPopup && (\r\n  <div className=\"fixed inset-0 flex justify-center items-center bg-gray-800 bg-opacity-75 z-50\">\r\n    <div className=\"bg-white p-8 w-4/5 max-w-3xl rounded-lg shadow-lg\">\r\n      <CallPage\r\n        receiverId={selectedUserId}\r\n        onClose={handleCloseCallPage}\r\n        isCallActive={isCallActive}\r\n        onEndCall={handleEndCall}\r\n      />\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n{isCallActive && (\r\n  <button \r\n    onClick={handleEndCall} \r\n    className=\"fixed bottom-4 right-4 p-4 bg-red-500 text-white rounded-full shadow-lg z-50\"\r\n  >\r\n    End Call\r\n  </button>\r\n)}\r\n\r\n\r\n            </div>\r\n\r\n            {localStream && (\r\n                <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        muted\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = localStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n{remoteStream && (\r\n                <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = remoteStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n\r\n            <div className=\"flex flex-col flex-grow\">\r\n                <div className=\"w-full max-w-4xl mx-auto h-96 bg-black-100 p-4 overflow-y-auto custom-scrollbar\">\r\n\r\n                    <div className=\"flex flex-col gap-2\">\r\n                    {messages.length > 0 ? (\r\n    messages.map((message) => (\r\n        <div\r\n            key={message.id}\r\n            className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n            onMouseEnter={() => setHoveredMessageId(message.id)}\r\n            onMouseLeave={() => setHoveredMessageId(null)}\r\n        >\r\n            <p>{message.content}</p>\r\n            {message.reaction && (\r\n                <div className=\"text-xs mt-3\">\r\n                    <span>{message.reaction}</span>\r\n                </div>\r\n            )}\r\n            <div className=\"text-xs text-gray-500 mt-1\">{formatTimestamp(message.created_at)}</div>\r\n            \r\n            {hoveredMessageId === message.id && (\r\n                <div className=\"absolute bottom-10 right-0 flex space-x-1\">\r\n                    {['👍', '❤️', '😂'].map((reaction) => (\r\n                        <button\r\n                            key={reaction}\r\n                            onClick={() => handleAddReaction(message.id, reaction)}\r\n                            className=\"text-xl\"\r\n                        >\r\n                            {reaction}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <div className=\"flex space-x-2\">\r\n                {reactions[message.id]?.map((reaction, index) => (\r\n                    <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n                ))}\r\n            </div>\r\n            \r\n            {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\r\n                <button\r\n                    className={`delete-button ${hoveredMessageId === message.id ? 'visible' : 'hidden'} absolute top-0 right-2 text-red-500`}\r\n                    onClick={() => {\r\n                        handleDeleteMessage(message.id);\r\n                        setMessages((prevMessages) =>\r\n                            prevMessages.filter((msg) => msg.id !== message.id)\r\n                        );\r\n                    }}\r\n                >\r\n                    Delete\r\n                </button>\r\n            )}\r\n        </div>\r\n    ))\r\n) : (\r\n    <p>No messages yet.</p>\r\n)}\r\n\r\n                        <div ref={messageEndRef} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex mt-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={messageText}\r\n                        onChange={(e) => setMessageText(e.target.value)}\r\n                        placeholder=\"Type your message...\"\r\n                        className=\"w-full px-3 py-2 border rounded\"\r\n                    />\r\n                    <button\r\n                        onClick={() => {\r\n                            handleSendMessage();\r\n                            setMessages((prevMessages) => [\r\n                                ...prevMessages,\r\n                                {\r\n                                    id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n                                    content: messageText,\r\n                                    from_user_id: userId,\r\n                                    created_at: new Date().toISOString(),\r\n                                },\r\n                            ]);\r\n                            \r\n                        }}\r\n                        className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n                    >\r\n                        Send\r\n                        <svg\r\n                            className=\"w-5 h-5\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"1.5\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeLinecap=\"round\"\r\n                            ></path>\r\n                        </svg>\r\n                    </button>\r\n                    {showCallPopup && (\r\n                <CallPage\r\n                    onAccept={handleAcceptCall}\r\n                    onReject={handleRejectCall}\r\n                    onClose={handleCloseCallPage}\r\n                    receiverId={selectedUserId}\r\n                />\r\n            )}\r\n            {isCallActive && (\r\n                <div className=\"absolute bottom-0 right-0 p-4 bg-green-500 text-blue-400 flex items-center\">\r\n                    <button onClick={handleEndCall} className=\"bg-red-500 p-2 rounded\">\r\n                        End Call\r\n                    </button>\r\n                </div>\r\n            )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}