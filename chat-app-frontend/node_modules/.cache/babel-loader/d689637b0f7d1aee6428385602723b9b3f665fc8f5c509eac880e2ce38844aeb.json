{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\VidCall.js\",\n  _s = $RefreshSig$();\n// // // // // src/components/VideoCall.js\n\n// // // // import React, { useEffect, useRef, useState } from 'react';\n// // // // import Peer from 'peerjs';\n\n// // // // const VideoCall = () => {\n// // // //   const [peerId, setPeerId] = useState('');\n// // // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n// // // //   const remoteVideoRef = useRef(null);\n// // // //   const currentUserVideoRef = useRef(null);\n// // // //   const peerInstance = useRef(null);\n\n// // // //   useEffect(() => {\n// // // //     const peer = new Peer();\n\n// // // //     peer.on('open', (id) => {\n// // // //       setPeerId(id);\n// // // //     });\n\n// // // //     peer.on('call', (call) => {\n// // // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // // //         .then((mediaStream) => {\n// // // //           currentUserVideoRef.current.srcObject = mediaStream;\n// // // //           currentUserVideoRef.current.play();\n// // // //           call.answer(mediaStream);\n// // // //           call.on('stream', (remoteStream) => {\n// // // //             remoteVideoRef.current.srcObject = remoteStream;\n// // // //             remoteVideoRef.current.play();\n// // // //           });\n// // // //         });\n// // // //     });\n\n// // // //     peerInstance.current = peer;\n\n// // // //     return () => {\n// // // //       peer.destroy();\n// // // //     };\n// // // //   }, []);\n\n// // // //   const call = (remotePeerId) => {\n// // // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // // //       .then((mediaStream) => {\n// // // //         currentUserVideoRef.current.srcObject = mediaStream;\n// // // //         currentUserVideoRef.current.play();\n// // // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\n// // // //         call.on('stream', (remoteStream) => {\n// // // //           remoteVideoRef.current.srcObject = remoteStream;\n// // // //           remoteVideoRef.current.play();\n// // // //         });\n// // // //       });\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"App\">\n// // // //       <h1>Current user id is {peerId}</h1>\n// // // //       <input\n// // // //         type=\"text\"\n// // // //         value={remotePeerIdValue}\n// // // //         onChange={e => setRemotePeerIdValue(e.target.value)}\n// // // //         placeholder=\"Enter remote peer ID\"\n// // // //       />\n// // // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n// // // //       <div>\n// // // //         <video ref={currentUserVideoRef} autoPlay muted />\n// // // //       </div>\n// // // //       <div>\n// // // //         <video ref={remoteVideoRef} autoPlay />\n// // // //       </div>\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default VideoCall;\n\n// // // import React, { useEffect, useRef, useState } from 'react';\n// // // import Peer from 'peerjs';\n\n// // // const VideoCall = () => {\n// // //   const [peerId, setPeerId] = useState('');\n// // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n// // //   const remoteVideoRef = useRef(null);\n// // //   const currentUserVideoRef = useRef(null);\n// // //   const peerInstance = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const peer = new Peer();\n\n// // //     peer.on('open', (id) => {\n// // //       setPeerId(id);\n// // //     });\n\n// // //     peer.on('call', (call) => {\n// // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // //         .then((mediaStream) => {\n// // //           // Clean up previous stream if any\n// // //           const currentStream = currentUserVideoRef.current.srcObject;\n// // //           if (currentStream) {\n// // //             const tracks = currentStream.getTracks();\n// // //             tracks.forEach(track => track.stop());\n// // //           }\n\n// // //           currentUserVideoRef.current.srcObject = mediaStream;\n// // //           currentUserVideoRef.current.play().catch(console.error);\n// // //           call.answer(mediaStream);\n// // //           call.on('stream', (remoteStream) => {\n// // //             // Clean up previous remote stream if any\n// // //             const remoteStreamElement = remoteVideoRef.current.srcObject;\n// // //             if (remoteStreamElement) {\n// // //               const tracks = remoteStreamElement.getTracks();\n// // //               tracks.forEach(track => track.stop());\n// // //             }\n\n// // //             remoteVideoRef.current.srcObject = remoteStream;\n// // //             remoteVideoRef.current.play().catch(console.error);\n// // //           });\n// // //         });\n// // //     });\n\n// // //     peerInstance.current = peer;\n\n// // //     return () => {\n// // //       // Clean up on component unmount\n// // //       peer.destroy();\n// // //       const currentStream = currentUserVideoRef.current.srcObject;\n// // //       if (currentStream) {\n// // //         const tracks = currentStream.getTracks();\n// // //         tracks.forEach(track => track.stop());\n// // //       }\n// // //       const remoteStreamElement = remoteVideoRef.current.srcObject;\n// // //       if (remoteStreamElement) {\n// // //         const tracks = remoteStreamElement.getTracks();\n// // //         tracks.forEach(track => track.stop());\n// // //       }\n// // //     };\n// // //   }, []);\n\n// // //   const call = (remotePeerId) => {\n// // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // //       .then((mediaStream) => {\n// // //         // Clean up previous stream if any\n// // //         const currentStream = currentUserVideoRef.current.srcObject;\n// // //         if (currentStream) {\n// // //           const tracks = currentStream.getTracks();\n// // //           tracks.forEach(track => track.stop());\n// // //         }\n\n// // //         currentUserVideoRef.current.srcObject = mediaStream;\n// // //         currentUserVideoRef.current.play().catch(console.error);\n\n// // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\n// // //         call.on('stream', (remoteStream) => {\n// // //           // Clean up previous remote stream if any\n// // //           const remoteStreamElement = remoteVideoRef.current.srcObject;\n// // //           if (remoteStreamElement) {\n// // //             const tracks = remoteStreamElement.getTracks();\n// // //             tracks.forEach(track => track.stop());\n// // //           }\n\n// // //           remoteVideoRef.current.srcObject = remoteStream;\n// // //           remoteVideoRef.current.play().catch(console.error);\n// // //         });\n// // //       });\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <h1>Current user id is {peerId}</h1>\n// // //       <input\n// // //         type=\"text\"\n// // //         value={remotePeerIdValue}\n// // //         onChange={e => setRemotePeerIdValue(e.target.value)}\n// // //         placeholder=\"Enter remote peer ID\"\n// // //       />\n// // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n// // //       <div>\n// // //         <video ref={currentUserVideoRef} autoPlay muted />\n// // //       </div>\n// // //       <div>\n// // //         <video ref={remoteVideoRef} autoPlay />\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default VideoCall;\n\n// // import React, { useEffect, useRef, useState } from 'react';\n// // import Peer from 'peerjs';\n\n// // const VideoCall = () => {\n// //   const [peerId, setPeerId] = useState('');\n// //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n// //   const remoteVideoRef = useRef(null);\n// //   const currentUserVideoRef = useRef(null);\n// //   const peerInstance = useRef(null);\n\n// //   useEffect(() => {\n// //     const peer = new Peer();\n\n// //     peer.on('open', (id) => {\n// //       setPeerId(id);\n// //     });\n\n// //     peer.on('call', (call) => {\n// //       // Get user media for the current user\n// //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// //         .then((mediaStream) => {\n// //           // Display the current user's video feed\n// //           currentUserVideoRef.current.srcObject = mediaStream;\n// //           currentUserVideoRef.current.play().catch(console.error);\n\n// //           // Answer the call with the current user's media stream\n// //           call.answer(mediaStream);\n\n// //           // When the remote stream is received\n// //           call.on('stream', (remoteStream) => {\n// //             // Display the remote user's video feed\n// //             remoteVideoRef.current.srcObject = remoteStream;\n// //             remoteVideoRef.current.play().catch(console.error);\n// //           });\n// //         });\n// //     });\n\n// //     peerInstance.current = peer;\n\n// //     return () => {\n// //       // Cleanup on component unmount\n// //       peer.destroy();\n// //       const currentStream = currentUserVideoRef.current.srcObject;\n// //       if (currentStream) {\n// //         const tracks = currentStream.getTracks();\n// //         tracks.forEach(track => track.stop());\n// //       }\n// //       const remoteStreamElement = remoteVideoRef.current.srcObject;\n// //       if (remoteStreamElement) {\n// //         const tracks = remoteStreamElement.getTracks();\n// //         tracks.forEach(track => track.stop());\n// //       }\n// //     };\n// //   }, []);\n\n// //   const call = (remotePeerId) => {\n// //     // Get user media for the current user\n// //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// //       .then((mediaStream) => {\n// //         // Display the current user's video feed\n// //         currentUserVideoRef.current.srcObject = mediaStream;\n// //         currentUserVideoRef.current.play().catch(console.error);\n\n// //         // Initiate a call to the remote peer with the current user's media stream\n// //         const call = peerInstance.current.call(remotePeerId, mediaStream);\n\n// //         // When the remote stream is received\n// //         call.on('stream', (remoteStream) => {\n// //           // Display the remote user's video feed\n// //           remoteVideoRef.current.srcObject = remoteStream;\n// //           remoteVideoRef.current.play().catch(console.error);\n// //         });\n// //       });\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <h1>Current user id is {peerId}</h1>\n// //       <input\n// //         type=\"text\"\n// //         value={remotePeerIdValue}\n// //         onChange={e => setRemotePeerIdValue(e.target.value)}\n// //         placeholder=\"Enter remote peer ID\"\n// //       />\n// //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n// //       <div>\n// //         <video ref={currentUserVideoRef} autoPlay muted />\n// //       </div>\n// //       <div>\n// //         <video ref={remoteVideoRef} autoPlay />\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default VideoCall;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import Peer from 'peerjs';\n\n// const VideoCall = () => {\n//   const [peerId, setPeerId] = useState('');\n//   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n//   const remoteVideoRef = useRef(null);\n//   const currentUserVideoRef = useRef(null);\n//   const peerInstance = useRef(null);\n\n//   useEffect(() => {\n//     const peer = new Peer();\n\n//     peer.on('open', (id) => {\n//       setPeerId(id);\n//     });\n\n//     peer.on('call', (call) => {\n//       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n//         .then((mediaStream) => {\n//           currentUserVideoRef.current.srcObject = mediaStream;\n//           currentUserVideoRef.current.play().catch(console.error);\n\n//           call.answer(mediaStream);\n\n//           call.on('stream', (remoteStream) => {\n//             remoteVideoRef.current.srcObject = remoteStream;\n//             remoteVideoRef.current.play().catch(console.error);\n//           });\n//         });\n//     });\n\n//     peerInstance.current = peer;\n\n//     return () => {\n//       peer.destroy();\n//       const currentStream = currentUserVideoRef.current.srcObject;\n//       if (currentStream) {\n//         const tracks = currentStream.getTracks();\n//         tracks.forEach(track => track.stop());\n//       }\n//       const remoteStreamElement = remoteVideoRef.current.srcObject;\n//       if (remoteStreamElement) {\n//         const tracks = remoteStreamElement.getTracks();\n//         tracks.forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const call = (remotePeerId) => {\n//     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n//       .then((mediaStream) => {\n//         currentUserVideoRef.current.srcObject = mediaStream;\n//         currentUserVideoRef.current.play().catch(console.error);\n\n//         const call = peerInstance.current.call(remotePeerId, mediaStream);\n\n//         call.on('stream', (remoteStream) => {\n//           remoteVideoRef.current.srcObject = remoteStream;\n//           remoteVideoRef.current.play().catch(console.error);\n//         });\n//       });\n//   };\n\n//   const copyToClipboard = () => {\n//     navigator.clipboard.writeText(peerId).then(() => {\n//       alert('Peer ID copied to clipboard');\n//     });\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center p-4 bg-gray-100 min-h-screen\">\n//       <header className=\"w-full bg-blue-500 text-white text-center p-4\">\n//         <h1 className=\"text-xl font-semibold\">Video Call</h1>\n//       </header>\n\n//       <div className=\"w-full max-w-2xl mt-4\">\n//         <div className=\"bg-white shadow-lg rounded-lg p-4 mb-4 flex items-center justify-between\">\n//           <div className=\"text-center\">\n//             <div className=\"text-lg font-medium mb-2\">Your ID</div>\n//             <div className=\"flex items-center justify-center\">\n//               <span className=\"bg-gray-200 p-2 rounded-lg\">{peerId}</span>\n//               <button \n//                 className=\"ml-2 px-2 py-1 bg-blue-600 text-white rounded-lg\"\n//                 onClick={copyToClipboard}\n//               >\n//                 Copy\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n\n//         <div className=\"mb-4\">\n//           <input\n//             type=\"text\"\n//             value={remotePeerIdValue}\n//             onChange={e => setRemotePeerIdValue(e.target.value)}\n//             placeholder=\"Enter remote peer ID\"\n//             className=\"border border-gray-300 p-2 rounded-lg w-full\"\n//           />\n//           <button\n//             onClick={() => call(remotePeerIdValue)}\n//             className=\"mt-2 px-4 py-2 bg-green-500 text-white rounded-lg w-full\"\n//           >\n//             Start Call\n//           </button>\n//         </div>\n\n//         <div className=\"flex gap-4\">\n//           <div className=\"w-1/2\">\n//             <video ref={currentUserVideoRef} autoPlay muted className=\"w-full h-64 bg-gray-200\" />\n//           </div>\n//           <div className=\"w-1/2\">\n//             <video ref={remoteVideoRef} autoPlay className=\"w-full h-64 bg-gray-200\" />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VideoCall;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCall = () => {\n  _s();\n  const [peerId, setPeerId] = useState('');\n  const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n  const [isCalling, setIsCalling] = useState(false);\n  const [callInstance, setCallInstance] = useState(null);\n  const remoteVideoRef = useRef(null);\n  const currentUserVideoRef = useRef(null);\n  const peerInstance = useRef(null);\n  useEffect(() => {\n    const peer = new Peer();\n    peer.on('open', id => {\n      setPeerId(id);\n    });\n    peer.on('call', call => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(mediaStream => {\n        currentUserVideoRef.current.srcObject = mediaStream;\n        currentUserVideoRef.current.play().catch(console.error);\n        call.answer(mediaStream);\n        setIsCalling(true);\n        setCallInstance(call);\n        call.on('stream', remoteStream => {\n          remoteVideoRef.current.srcObject = remoteStream;\n          remoteVideoRef.current.play().catch(console.error);\n        });\n        call.on('close', () => {\n          setIsCalling(false);\n          setCallInstance(null);\n        });\n      });\n    });\n    peerInstance.current = peer;\n    return () => {\n      peer.destroy();\n      const currentStream = currentUserVideoRef.current.srcObject;\n      if (currentStream) {\n        const tracks = currentStream.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n      const remoteStreamElement = remoteVideoRef.current.srcObject;\n      if (remoteStreamElement) {\n        const tracks = remoteStreamElement.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const call = remotePeerId => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      currentUserVideoRef.current.srcObject = mediaStream;\n      currentUserVideoRef.current.play().catch(console.error);\n      const call = peerInstance.current.call(remotePeerId, mediaStream);\n      setIsCalling(true);\n      setCallInstance(call);\n      call.on('stream', remoteStream => {\n        remoteVideoRef.current.srcObject = remoteStream;\n        remoteVideoRef.current.play().catch(console.error);\n      });\n      call.on('close', () => {\n        setIsCalling(false);\n        setCallInstance(null);\n      });\n    });\n  };\n  const endCall = () => {\n    if (callInstance) {\n      callInstance.close();\n      setIsCalling(false);\n      setCallInstance(null);\n    }\n  };\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(peerId).then(() => {\n      alert('Peer ID copied to clipboard');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4 bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"w-full bg-blue-500 text-white text-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl font-semibold\",\n        children: \"Video Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-2xl mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow-lg rounded-lg p-4 mb-4 flex items-center justify-between\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-lg font-medium mb-2\",\n            children: \"Your ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bg-gray-200 p-2 rounded-lg\",\n              children: peerId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"ml-2 px-2 py-1 bg-blue-600 text-white rounded-lg\",\n              onClick: copyToClipboard,\n              children: \"Copy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: remotePeerIdValue,\n          onChange: e => setRemotePeerIdValue(e.target.value),\n          placeholder: \"Enter remote peer ID\",\n          className: \"border border-gray-300 p-2 rounded-lg w-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => isCalling ? endCall() : call(remotePeerIdValue),\n          className: `mt-2 px-4 py-2 ${isCalling ? 'bg-red-500' : 'bg-green-500'} text-white rounded-lg w-full`,\n          children: isCalling ? 'End Call' : 'Start Call'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: currentUserVideoRef,\n            autoPlay: true,\n            muted: true,\n            className: \"w-full h-64 bg-gray-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            ref: remoteVideoRef,\n            autoPlay: true,\n            className: \"w-full h-64 bg-gray-200\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 506,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCall, \"MUfd0s/P/QcO0dlWigHvFja1jsc=\");\n_c = VideoCall;\nexport default VideoCall;\nvar _c;\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Peer","jsxDEV","_jsxDEV","VideoCall","_s","peerId","setPeerId","remotePeerIdValue","setRemotePeerIdValue","isCalling","setIsCalling","callInstance","setCallInstance","remoteVideoRef","currentUserVideoRef","peerInstance","peer","on","id","call","navigator","mediaDevices","getUserMedia","video","audio","then","mediaStream","current","srcObject","play","catch","console","error","answer","remoteStream","destroy","currentStream","tracks","getTracks","forEach","track","stop","remoteStreamElement","remotePeerId","endCall","close","copyToClipboard","clipboard","writeText","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/VidCall.js"],"sourcesContent":["// // // // // src/components/VideoCall.js\r\n\r\n// // // // import React, { useEffect, useRef, useState } from 'react';\r\n// // // // import Peer from 'peerjs';\r\n\r\n// // // // const VideoCall = () => {\r\n// // // //   const [peerId, setPeerId] = useState('');\r\n// // // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n// // // //   const remoteVideoRef = useRef(null);\r\n// // // //   const currentUserVideoRef = useRef(null);\r\n// // // //   const peerInstance = useRef(null);\r\n\r\n// // // //   useEffect(() => {\r\n// // // //     const peer = new Peer();\r\n\r\n// // // //     peer.on('open', (id) => {\r\n// // // //       setPeerId(id);\r\n// // // //     });\r\n\r\n// // // //     peer.on('call', (call) => {\r\n// // // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // // //         .then((mediaStream) => {\r\n// // // //           currentUserVideoRef.current.srcObject = mediaStream;\r\n// // // //           currentUserVideoRef.current.play();\r\n// // // //           call.answer(mediaStream);\r\n// // // //           call.on('stream', (remoteStream) => {\r\n// // // //             remoteVideoRef.current.srcObject = remoteStream;\r\n// // // //             remoteVideoRef.current.play();\r\n// // // //           });\r\n// // // //         });\r\n// // // //     });\r\n\r\n// // // //     peerInstance.current = peer;\r\n\r\n// // // //     return () => {\r\n// // // //       peer.destroy();\r\n// // // //     };\r\n// // // //   }, []);\r\n\r\n// // // //   const call = (remotePeerId) => {\r\n// // // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // // //       .then((mediaStream) => {\r\n// // // //         currentUserVideoRef.current.srcObject = mediaStream;\r\n// // // //         currentUserVideoRef.current.play();\r\n// // // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n// // // //         call.on('stream', (remoteStream) => {\r\n// // // //           remoteVideoRef.current.srcObject = remoteStream;\r\n// // // //           remoteVideoRef.current.play();\r\n// // // //         });\r\n// // // //       });\r\n// // // //   };\r\n\r\n// // // //   return (\r\n// // // //     <div className=\"App\">\r\n// // // //       <h1>Current user id is {peerId}</h1>\r\n// // // //       <input\r\n// // // //         type=\"text\"\r\n// // // //         value={remotePeerIdValue}\r\n// // // //         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n// // // //         placeholder=\"Enter remote peer ID\"\r\n// // // //       />\r\n// // // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n// // // //       <div>\r\n// // // //         <video ref={currentUserVideoRef} autoPlay muted />\r\n// // // //       </div>\r\n// // // //       <div>\r\n// // // //         <video ref={remoteVideoRef} autoPlay />\r\n// // // //       </div>\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // };\r\n\r\n// // // // export default VideoCall;\r\n\r\n\r\n// // // import React, { useEffect, useRef, useState } from 'react';\r\n// // // import Peer from 'peerjs';\r\n\r\n// // // const VideoCall = () => {\r\n// // //   const [peerId, setPeerId] = useState('');\r\n// // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n// // //   const remoteVideoRef = useRef(null);\r\n// // //   const currentUserVideoRef = useRef(null);\r\n// // //   const peerInstance = useRef(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const peer = new Peer();\r\n\r\n// // //     peer.on('open', (id) => {\r\n// // //       setPeerId(id);\r\n// // //     });\r\n\r\n// // //     peer.on('call', (call) => {\r\n// // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // //         .then((mediaStream) => {\r\n// // //           // Clean up previous stream if any\r\n// // //           const currentStream = currentUserVideoRef.current.srcObject;\r\n// // //           if (currentStream) {\r\n// // //             const tracks = currentStream.getTracks();\r\n// // //             tracks.forEach(track => track.stop());\r\n// // //           }\r\n          \r\n// // //           currentUserVideoRef.current.srcObject = mediaStream;\r\n// // //           currentUserVideoRef.current.play().catch(console.error);\r\n// // //           call.answer(mediaStream);\r\n// // //           call.on('stream', (remoteStream) => {\r\n// // //             // Clean up previous remote stream if any\r\n// // //             const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// // //             if (remoteStreamElement) {\r\n// // //               const tracks = remoteStreamElement.getTracks();\r\n// // //               tracks.forEach(track => track.stop());\r\n// // //             }\r\n\r\n// // //             remoteVideoRef.current.srcObject = remoteStream;\r\n// // //             remoteVideoRef.current.play().catch(console.error);\r\n// // //           });\r\n// // //         });\r\n// // //     });\r\n\r\n// // //     peerInstance.current = peer;\r\n\r\n// // //     return () => {\r\n// // //       // Clean up on component unmount\r\n// // //       peer.destroy();\r\n// // //       const currentStream = currentUserVideoRef.current.srcObject;\r\n// // //       if (currentStream) {\r\n// // //         const tracks = currentStream.getTracks();\r\n// // //         tracks.forEach(track => track.stop());\r\n// // //       }\r\n// // //       const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// // //       if (remoteStreamElement) {\r\n// // //         const tracks = remoteStreamElement.getTracks();\r\n// // //         tracks.forEach(track => track.stop());\r\n// // //       }\r\n// // //     };\r\n// // //   }, []);\r\n\r\n// // //   const call = (remotePeerId) => {\r\n// // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // //       .then((mediaStream) => {\r\n// // //         // Clean up previous stream if any\r\n// // //         const currentStream = currentUserVideoRef.current.srcObject;\r\n// // //         if (currentStream) {\r\n// // //           const tracks = currentStream.getTracks();\r\n// // //           tracks.forEach(track => track.stop());\r\n// // //         }\r\n\r\n// // //         currentUserVideoRef.current.srcObject = mediaStream;\r\n// // //         currentUserVideoRef.current.play().catch(console.error);\r\n\r\n// // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n// // //         call.on('stream', (remoteStream) => {\r\n// // //           // Clean up previous remote stream if any\r\n// // //           const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// // //           if (remoteStreamElement) {\r\n// // //             const tracks = remoteStreamElement.getTracks();\r\n// // //             tracks.forEach(track => track.stop());\r\n// // //           }\r\n\r\n// // //           remoteVideoRef.current.srcObject = remoteStream;\r\n// // //           remoteVideoRef.current.play().catch(console.error);\r\n// // //         });\r\n// // //       });\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"App\">\r\n// // //       <h1>Current user id is {peerId}</h1>\r\n// // //       <input\r\n// // //         type=\"text\"\r\n// // //         value={remotePeerIdValue}\r\n// // //         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n// // //         placeholder=\"Enter remote peer ID\"\r\n// // //       />\r\n// // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n// // //       <div>\r\n// // //         <video ref={currentUserVideoRef} autoPlay muted />\r\n// // //       </div>\r\n// // //       <div>\r\n// // //         <video ref={remoteVideoRef} autoPlay />\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default VideoCall;\r\n\r\n\r\n// // import React, { useEffect, useRef, useState } from 'react';\r\n// // import Peer from 'peerjs';\r\n\r\n// // const VideoCall = () => {\r\n// //   const [peerId, setPeerId] = useState('');\r\n// //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n// //   const remoteVideoRef = useRef(null);\r\n// //   const currentUserVideoRef = useRef(null);\r\n// //   const peerInstance = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const peer = new Peer();\r\n\r\n// //     peer.on('open', (id) => {\r\n// //       setPeerId(id);\r\n// //     });\r\n\r\n// //     peer.on('call', (call) => {\r\n// //       // Get user media for the current user\r\n// //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// //         .then((mediaStream) => {\r\n// //           // Display the current user's video feed\r\n// //           currentUserVideoRef.current.srcObject = mediaStream;\r\n// //           currentUserVideoRef.current.play().catch(console.error);\r\n\r\n// //           // Answer the call with the current user's media stream\r\n// //           call.answer(mediaStream);\r\n          \r\n// //           // When the remote stream is received\r\n// //           call.on('stream', (remoteStream) => {\r\n// //             // Display the remote user's video feed\r\n// //             remoteVideoRef.current.srcObject = remoteStream;\r\n// //             remoteVideoRef.current.play().catch(console.error);\r\n// //           });\r\n// //         });\r\n// //     });\r\n\r\n// //     peerInstance.current = peer;\r\n\r\n// //     return () => {\r\n// //       // Cleanup on component unmount\r\n// //       peer.destroy();\r\n// //       const currentStream = currentUserVideoRef.current.srcObject;\r\n// //       if (currentStream) {\r\n// //         const tracks = currentStream.getTracks();\r\n// //         tracks.forEach(track => track.stop());\r\n// //       }\r\n// //       const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// //       if (remoteStreamElement) {\r\n// //         const tracks = remoteStreamElement.getTracks();\r\n// //         tracks.forEach(track => track.stop());\r\n// //       }\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   const call = (remotePeerId) => {\r\n// //     // Get user media for the current user\r\n// //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// //       .then((mediaStream) => {\r\n// //         // Display the current user's video feed\r\n// //         currentUserVideoRef.current.srcObject = mediaStream;\r\n// //         currentUserVideoRef.current.play().catch(console.error);\r\n\r\n// //         // Initiate a call to the remote peer with the current user's media stream\r\n// //         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n\r\n// //         // When the remote stream is received\r\n// //         call.on('stream', (remoteStream) => {\r\n// //           // Display the remote user's video feed\r\n// //           remoteVideoRef.current.srcObject = remoteStream;\r\n// //           remoteVideoRef.current.play().catch(console.error);\r\n// //         });\r\n// //       });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"App\">\r\n// //       <h1>Current user id is {peerId}</h1>\r\n// //       <input\r\n// //         type=\"text\"\r\n// //         value={remotePeerIdValue}\r\n// //         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n// //         placeholder=\"Enter remote peer ID\"\r\n// //       />\r\n// //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n// //       <div>\r\n// //         <video ref={currentUserVideoRef} autoPlay muted />\r\n// //       </div>\r\n// //       <div>\r\n// //         <video ref={remoteVideoRef} autoPlay />\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default VideoCall;\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import Peer from 'peerjs';\r\n\r\n// const VideoCall = () => {\r\n//   const [peerId, setPeerId] = useState('');\r\n//   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n//   const remoteVideoRef = useRef(null);\r\n//   const currentUserVideoRef = useRef(null);\r\n//   const peerInstance = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const peer = new Peer();\r\n\r\n//     peer.on('open', (id) => {\r\n//       setPeerId(id);\r\n//     });\r\n\r\n//     peer.on('call', (call) => {\r\n//       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n//         .then((mediaStream) => {\r\n//           currentUserVideoRef.current.srcObject = mediaStream;\r\n//           currentUserVideoRef.current.play().catch(console.error);\r\n\r\n//           call.answer(mediaStream);\r\n          \r\n//           call.on('stream', (remoteStream) => {\r\n//             remoteVideoRef.current.srcObject = remoteStream;\r\n//             remoteVideoRef.current.play().catch(console.error);\r\n//           });\r\n//         });\r\n//     });\r\n\r\n//     peerInstance.current = peer;\r\n\r\n//     return () => {\r\n//       peer.destroy();\r\n//       const currentStream = currentUserVideoRef.current.srcObject;\r\n//       if (currentStream) {\r\n//         const tracks = currentStream.getTracks();\r\n//         tracks.forEach(track => track.stop());\r\n//       }\r\n//       const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n//       if (remoteStreamElement) {\r\n//         const tracks = remoteStreamElement.getTracks();\r\n//         tracks.forEach(track => track.stop());\r\n//       }\r\n//     };\r\n//   }, []);\r\n\r\n//   const call = (remotePeerId) => {\r\n//     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n//       .then((mediaStream) => {\r\n//         currentUserVideoRef.current.srcObject = mediaStream;\r\n//         currentUserVideoRef.current.play().catch(console.error);\r\n\r\n//         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n\r\n//         call.on('stream', (remoteStream) => {\r\n//           remoteVideoRef.current.srcObject = remoteStream;\r\n//           remoteVideoRef.current.play().catch(console.error);\r\n//         });\r\n//       });\r\n//   };\r\n\r\n//   const copyToClipboard = () => {\r\n//     navigator.clipboard.writeText(peerId).then(() => {\r\n//       alert('Peer ID copied to clipboard');\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col items-center p-4 bg-gray-100 min-h-screen\">\r\n//       <header className=\"w-full bg-blue-500 text-white text-center p-4\">\r\n//         <h1 className=\"text-xl font-semibold\">Video Call</h1>\r\n//       </header>\r\n      \r\n//       <div className=\"w-full max-w-2xl mt-4\">\r\n//         <div className=\"bg-white shadow-lg rounded-lg p-4 mb-4 flex items-center justify-between\">\r\n//           <div className=\"text-center\">\r\n//             <div className=\"text-lg font-medium mb-2\">Your ID</div>\r\n//             <div className=\"flex items-center justify-center\">\r\n//               <span className=\"bg-gray-200 p-2 rounded-lg\">{peerId}</span>\r\n//               <button \r\n//                 className=\"ml-2 px-2 py-1 bg-blue-600 text-white rounded-lg\"\r\n//                 onClick={copyToClipboard}\r\n//               >\r\n//                 Copy\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"mb-4\">\r\n//           <input\r\n//             type=\"text\"\r\n//             value={remotePeerIdValue}\r\n//             onChange={e => setRemotePeerIdValue(e.target.value)}\r\n//             placeholder=\"Enter remote peer ID\"\r\n//             className=\"border border-gray-300 p-2 rounded-lg w-full\"\r\n//           />\r\n//           <button\r\n//             onClick={() => call(remotePeerIdValue)}\r\n//             className=\"mt-2 px-4 py-2 bg-green-500 text-white rounded-lg w-full\"\r\n//           >\r\n//             Start Call\r\n//           </button>\r\n//         </div>\r\n\r\n//         <div className=\"flex gap-4\">\r\n//           <div className=\"w-1/2\">\r\n//             <video ref={currentUserVideoRef} autoPlay muted className=\"w-full h-64 bg-gray-200\" />\r\n//           </div>\r\n//           <div className=\"w-1/2\">\r\n//             <video ref={remoteVideoRef} autoPlay className=\"w-full h-64 bg-gray-200\" />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoCall;\r\n\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Peer from 'peerjs';\r\n\r\nconst VideoCall = () => {\r\n  const [peerId, setPeerId] = useState('');\r\n  const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n  const [isCalling, setIsCalling] = useState(false);\r\n  const [callInstance, setCallInstance] = useState(null);\r\n\r\n  const remoteVideoRef = useRef(null);\r\n  const currentUserVideoRef = useRef(null);\r\n  const peerInstance = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const peer = new Peer();\r\n\r\n    peer.on('open', (id) => {\r\n      setPeerId(id);\r\n    });\r\n\r\n    peer.on('call', (call) => {\r\n      navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((mediaStream) => {\r\n          currentUserVideoRef.current.srcObject = mediaStream;\r\n          currentUserVideoRef.current.play().catch(console.error);\r\n\r\n          call.answer(mediaStream);\r\n          setIsCalling(true);\r\n          setCallInstance(call);\r\n\r\n          call.on('stream', (remoteStream) => {\r\n            remoteVideoRef.current.srcObject = remoteStream;\r\n            remoteVideoRef.current.play().catch(console.error);\r\n          });\r\n\r\n          call.on('close', () => {\r\n            setIsCalling(false);\r\n            setCallInstance(null);\r\n          });\r\n        });\r\n    });\r\n\r\n    peerInstance.current = peer;\r\n\r\n    return () => {\r\n      peer.destroy();\r\n      const currentStream = currentUserVideoRef.current.srcObject;\r\n      if (currentStream) {\r\n        const tracks = currentStream.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n      }\r\n      const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n      if (remoteStreamElement) {\r\n        const tracks = remoteStreamElement.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const call = (remotePeerId) => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n      .then((mediaStream) => {\r\n        currentUserVideoRef.current.srcObject = mediaStream;\r\n        currentUserVideoRef.current.play().catch(console.error);\r\n\r\n        const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n        setIsCalling(true);\r\n        setCallInstance(call);\r\n\r\n        call.on('stream', (remoteStream) => {\r\n          remoteVideoRef.current.srcObject = remoteStream;\r\n          remoteVideoRef.current.play().catch(console.error);\r\n        });\r\n\r\n        call.on('close', () => {\r\n          setIsCalling(false);\r\n          setCallInstance(null);\r\n        });\r\n      });\r\n  };\r\n\r\n  const endCall = () => {\r\n    if (callInstance) {\r\n      callInstance.close();\r\n      setIsCalling(false);\r\n      setCallInstance(null);\r\n    }\r\n  };\r\n\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(peerId).then(() => {\r\n      alert('Peer ID copied to clipboard');\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center p-4 bg-gray-100 min-h-screen\">\r\n      <header className=\"w-full bg-blue-500 text-white text-center p-4\">\r\n        <h1 className=\"text-xl font-semibold\">Video Call</h1>\r\n      </header>\r\n\r\n      <div className=\"w-full max-w-2xl mt-4\">\r\n        <div className=\"bg-white shadow-lg rounded-lg p-4 mb-4 flex items-center justify-between\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-lg font-medium mb-2\">Your ID</div>\r\n            <div className=\"flex items-center justify-center\">\r\n              <span className=\"bg-gray-200 p-2 rounded-lg\">{peerId}</span>\r\n              <button\r\n                className=\"ml-2 px-2 py-1 bg-blue-600 text-white rounded-lg\"\r\n                onClick={copyToClipboard}\r\n              >\r\n                Copy\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            value={remotePeerIdValue}\r\n            onChange={e => setRemotePeerIdValue(e.target.value)}\r\n            placeholder=\"Enter remote peer ID\"\r\n            className=\"border border-gray-300 p-2 rounded-lg w-full\"\r\n          />\r\n          <button\r\n            onClick={() => isCalling ? endCall() : call(remotePeerIdValue)}\r\n            className={`mt-2 px-4 py-2 ${isCalling ? 'bg-red-500' : 'bg-green-500'} text-white rounded-lg w-full`}\r\n          >\r\n            {isCalling ? 'End Call' : 'Start Call'}\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"flex gap-4\">\r\n          <div className=\"w-1/2\">\r\n            <video ref={currentUserVideoRef} autoPlay muted className=\"w-full h-64 bg-gray-200\" />\r\n          </div>\r\n          <div className=\"w-1/2\">\r\n            <video ref={remoteVideoRef} autoPlay className=\"w-full h-64 bg-gray-200\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCall;\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}