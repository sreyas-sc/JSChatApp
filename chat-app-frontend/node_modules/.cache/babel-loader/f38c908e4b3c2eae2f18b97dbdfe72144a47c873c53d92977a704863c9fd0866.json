{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\VidCall.js\",\n  _s = $RefreshSig$();\n// // // // src/components/VideoCall.js\n\n// // // import React, { useEffect, useRef, useState } from 'react';\n// // // import Peer from 'peerjs';\n\n// // // const VideoCall = () => {\n// // //   const [peerId, setPeerId] = useState('');\n// // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n// // //   const remoteVideoRef = useRef(null);\n// // //   const currentUserVideoRef = useRef(null);\n// // //   const peerInstance = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const peer = new Peer();\n\n// // //     peer.on('open', (id) => {\n// // //       setPeerId(id);\n// // //     });\n\n// // //     peer.on('call', (call) => {\n// // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // //         .then((mediaStream) => {\n// // //           currentUserVideoRef.current.srcObject = mediaStream;\n// // //           currentUserVideoRef.current.play();\n// // //           call.answer(mediaStream);\n// // //           call.on('stream', (remoteStream) => {\n// // //             remoteVideoRef.current.srcObject = remoteStream;\n// // //             remoteVideoRef.current.play();\n// // //           });\n// // //         });\n// // //     });\n\n// // //     peerInstance.current = peer;\n\n// // //     return () => {\n// // //       peer.destroy();\n// // //     };\n// // //   }, []);\n\n// // //   const call = (remotePeerId) => {\n// // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// // //       .then((mediaStream) => {\n// // //         currentUserVideoRef.current.srcObject = mediaStream;\n// // //         currentUserVideoRef.current.play();\n// // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\n// // //         call.on('stream', (remoteStream) => {\n// // //           remoteVideoRef.current.srcObject = remoteStream;\n// // //           remoteVideoRef.current.play();\n// // //         });\n// // //       });\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       <h1>Current user id is {peerId}</h1>\n// // //       <input\n// // //         type=\"text\"\n// // //         value={remotePeerIdValue}\n// // //         onChange={e => setRemotePeerIdValue(e.target.value)}\n// // //         placeholder=\"Enter remote peer ID\"\n// // //       />\n// // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n// // //       <div>\n// // //         <video ref={currentUserVideoRef} autoPlay muted />\n// // //       </div>\n// // //       <div>\n// // //         <video ref={remoteVideoRef} autoPlay />\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default VideoCall;\n\n// // import React, { useEffect, useRef, useState } from 'react';\n// // import Peer from 'peerjs';\n\n// // const VideoCall = () => {\n// //   const [peerId, setPeerId] = useState('');\n// //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n// //   const remoteVideoRef = useRef(null);\n// //   const currentUserVideoRef = useRef(null);\n// //   const peerInstance = useRef(null);\n\n// //   useEffect(() => {\n// //     const peer = new Peer();\n\n// //     peer.on('open', (id) => {\n// //       setPeerId(id);\n// //     });\n\n// //     peer.on('call', (call) => {\n// //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// //         .then((mediaStream) => {\n// //           // Clean up previous stream if any\n// //           const currentStream = currentUserVideoRef.current.srcObject;\n// //           if (currentStream) {\n// //             const tracks = currentStream.getTracks();\n// //             tracks.forEach(track => track.stop());\n// //           }\n\n// //           currentUserVideoRef.current.srcObject = mediaStream;\n// //           currentUserVideoRef.current.play().catch(console.error);\n// //           call.answer(mediaStream);\n// //           call.on('stream', (remoteStream) => {\n// //             // Clean up previous remote stream if any\n// //             const remoteStreamElement = remoteVideoRef.current.srcObject;\n// //             if (remoteStreamElement) {\n// //               const tracks = remoteStreamElement.getTracks();\n// //               tracks.forEach(track => track.stop());\n// //             }\n\n// //             remoteVideoRef.current.srcObject = remoteStream;\n// //             remoteVideoRef.current.play().catch(console.error);\n// //           });\n// //         });\n// //     });\n\n// //     peerInstance.current = peer;\n\n// //     return () => {\n// //       // Clean up on component unmount\n// //       peer.destroy();\n// //       const currentStream = currentUserVideoRef.current.srcObject;\n// //       if (currentStream) {\n// //         const tracks = currentStream.getTracks();\n// //         tracks.forEach(track => track.stop());\n// //       }\n// //       const remoteStreamElement = remoteVideoRef.current.srcObject;\n// //       if (remoteStreamElement) {\n// //         const tracks = remoteStreamElement.getTracks();\n// //         tracks.forEach(track => track.stop());\n// //       }\n// //     };\n// //   }, []);\n\n// //   const call = (remotePeerId) => {\n// //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n// //       .then((mediaStream) => {\n// //         // Clean up previous stream if any\n// //         const currentStream = currentUserVideoRef.current.srcObject;\n// //         if (currentStream) {\n// //           const tracks = currentStream.getTracks();\n// //           tracks.forEach(track => track.stop());\n// //         }\n\n// //         currentUserVideoRef.current.srcObject = mediaStream;\n// //         currentUserVideoRef.current.play().catch(console.error);\n\n// //         const call = peerInstance.current.call(remotePeerId, mediaStream);\n// //         call.on('stream', (remoteStream) => {\n// //           // Clean up previous remote stream if any\n// //           const remoteStreamElement = remoteVideoRef.current.srcObject;\n// //           if (remoteStreamElement) {\n// //             const tracks = remoteStreamElement.getTracks();\n// //             tracks.forEach(track => track.stop());\n// //           }\n\n// //           remoteVideoRef.current.srcObject = remoteStream;\n// //           remoteVideoRef.current.play().catch(console.error);\n// //         });\n// //       });\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       <h1>Current user id is {peerId}</h1>\n// //       <input\n// //         type=\"text\"\n// //         value={remotePeerIdValue}\n// //         onChange={e => setRemotePeerIdValue(e.target.value)}\n// //         placeholder=\"Enter remote peer ID\"\n// //       />\n// //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n// //       <div>\n// //         <video ref={currentUserVideoRef} autoPlay muted />\n// //       </div>\n// //       <div>\n// //         <video ref={remoteVideoRef} autoPlay />\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default VideoCall;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import Peer from 'peerjs';\n\n// const VideoCall = () => {\n//   const [peerId, setPeerId] = useState('');\n//   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n//   const remoteVideoRef = useRef(null);\n//   const currentUserVideoRef = useRef(null);\n//   const peerInstance = useRef(null);\n\n//   useEffect(() => {\n//     const peer = new Peer();\n\n//     peer.on('open', (id) => {\n//       setPeerId(id);\n//     });\n\n//     peer.on('call', (call) => {\n//       // Get user media for the current user\n//       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n//         .then((mediaStream) => {\n//           // Display the current user's video feed\n//           currentUserVideoRef.current.srcObject = mediaStream;\n//           currentUserVideoRef.current.play().catch(console.error);\n\n//           // Answer the call with the current user's media stream\n//           call.answer(mediaStream);\n\n//           // When the remote stream is received\n//           call.on('stream', (remoteStream) => {\n//             // Display the remote user's video feed\n//             remoteVideoRef.current.srcObject = remoteStream;\n//             remoteVideoRef.current.play().catch(console.error);\n//           });\n//         });\n//     });\n\n//     peerInstance.current = peer;\n\n//     return () => {\n//       // Cleanup on component unmount\n//       peer.destroy();\n//       const currentStream = currentUserVideoRef.current.srcObject;\n//       if (currentStream) {\n//         const tracks = currentStream.getTracks();\n//         tracks.forEach(track => track.stop());\n//       }\n//       const remoteStreamElement = remoteVideoRef.current.srcObject;\n//       if (remoteStreamElement) {\n//         const tracks = remoteStreamElement.getTracks();\n//         tracks.forEach(track => track.stop());\n//       }\n//     };\n//   }, []);\n\n//   const call = (remotePeerId) => {\n//     // Get user media for the current user\n//     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n//       .then((mediaStream) => {\n//         // Display the current user's video feed\n//         currentUserVideoRef.current.srcObject = mediaStream;\n//         currentUserVideoRef.current.play().catch(console.error);\n\n//         // Initiate a call to the remote peer with the current user's media stream\n//         const call = peerInstance.current.call(remotePeerId, mediaStream);\n\n//         // When the remote stream is received\n//         call.on('stream', (remoteStream) => {\n//           // Display the remote user's video feed\n//           remoteVideoRef.current.srcObject = remoteStream;\n//           remoteVideoRef.current.play().catch(console.error);\n//         });\n//       });\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Current user id is {peerId}</h1>\n//       <input\n//         type=\"text\"\n//         value={remotePeerIdValue}\n//         onChange={e => setRemotePeerIdValue(e.target.value)}\n//         placeholder=\"Enter remote peer ID\"\n//       />\n//       <button onClick={() => call(remotePeerIdValue)}>Call</button>\n//       <div>\n//         <video ref={currentUserVideoRef} autoPlay muted />\n//       </div>\n//       <div>\n//         <video ref={remoteVideoRef} autoPlay />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default VideoCall;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Peer from 'peerjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCall = () => {\n  _s();\n  const [peerId, setPeerId] = useState('');\n  const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\n  const [callActive, setCallActive] = useState(false);\n  const [videoEnabled, setVideoEnabled] = useState(true);\n  const [audioEnabled, setAudioEnabled] = useState(true);\n  const remoteVideoRef = useRef(null);\n  const currentUserVideoRef = useRef(null);\n  const peerInstance = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const callRef = useRef(null);\n  useEffect(() => {\n    const peer = new Peer();\n    peer.on('open', id => {\n      setPeerId(id);\n    });\n    peer.on('call', call => {\n      navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      }).then(mediaStream => {\n        mediaStreamRef.current = mediaStream;\n        currentUserVideoRef.current.srcObject = mediaStream;\n        currentUserVideoRef.current.play().catch(console.error);\n        call.answer(mediaStream);\n        callRef.current = call;\n        setCallActive(true);\n        call.on('stream', remoteStream => {\n          remoteVideoRef.current.srcObject = remoteStream;\n          remoteVideoRef.current.play().catch(console.error);\n        });\n      });\n    });\n    peerInstance.current = peer;\n    return () => {\n      peer.destroy();\n      if (mediaStreamRef.current) {\n        const tracks = mediaStreamRef.current.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n      if (remoteVideoRef.current.srcObject) {\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      }\n    };\n  }, []);\n  const call = remotePeerId => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(mediaStream => {\n      mediaStreamRef.current = mediaStream;\n      currentUserVideoRef.current.srcObject = mediaStream;\n      currentUserVideoRef.current.play().catch(console.error);\n      const call = peerInstance.current.call(remotePeerId, mediaStream);\n      callRef.current = call;\n      setCallActive(true);\n      call.on('stream', remoteStream => {\n        remoteVideoRef.current.srcObject = remoteStream;\n        remoteVideoRef.current.play().catch(console.error);\n      });\n    });\n  };\n  const endCall = () => {\n    if (callRef.current) {\n      callRef.current.close();\n      callRef.current = null;\n    }\n    setCallActive(false);\n  };\n  const toggleVideo = () => {\n    if (mediaStreamRef.current) {\n      const videoTrack = mediaStreamRef.current.getVideoTracks()[0];\n      videoTrack.enabled = !videoTrack.enabled;\n      setVideoEnabled(videoTrack.enabled);\n    }\n  };\n  const toggleAudio = () => {\n    if (mediaStreamRef.current) {\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n      audioTrack.enabled = !audioTrack.enabled;\n      setAudioEnabled(audioTrack.enabled);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Current user id is \", peerId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: remotePeerIdValue,\n      onChange: e => setRemotePeerIdValue(e.target.value),\n      placeholder: \"Enter remote peer ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => call(remotePeerIdValue),\n      disabled: callActive,\n      children: \"Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endCall,\n      disabled: !callActive,\n      children: \"End Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleVideo,\n      children: videoEnabled ? 'Disable Video' : 'Enable Video'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleAudio,\n      children: audioEnabled ? 'Mute' : 'Unmute'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: currentUserVideoRef,\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: remoteVideoRef,\n        autoPlay: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoCall, \"77k3+ilhubHWqU/I/xNSYylM5Bc=\");\n_c = VideoCall;\nexport default VideoCall;\nvar _c;\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Peer","jsxDEV","_jsxDEV","VideoCall","_s","peerId","setPeerId","remotePeerIdValue","setRemotePeerIdValue","callActive","setCallActive","videoEnabled","setVideoEnabled","audioEnabled","setAudioEnabled","remoteVideoRef","currentUserVideoRef","peerInstance","mediaStreamRef","callRef","peer","on","id","call","navigator","mediaDevices","getUserMedia","video","audio","then","mediaStream","current","srcObject","play","catch","console","error","answer","remoteStream","destroy","tracks","getTracks","forEach","track","stop","remotePeerId","endCall","close","toggleVideo","videoTrack","getVideoTracks","enabled","toggleAudio","audioTrack","getAudioTracks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/VidCall.js"],"sourcesContent":["// // // // src/components/VideoCall.js\r\n\r\n// // // import React, { useEffect, useRef, useState } from 'react';\r\n// // // import Peer from 'peerjs';\r\n\r\n// // // const VideoCall = () => {\r\n// // //   const [peerId, setPeerId] = useState('');\r\n// // //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n// // //   const remoteVideoRef = useRef(null);\r\n// // //   const currentUserVideoRef = useRef(null);\r\n// // //   const peerInstance = useRef(null);\r\n\r\n// // //   useEffect(() => {\r\n// // //     const peer = new Peer();\r\n\r\n// // //     peer.on('open', (id) => {\r\n// // //       setPeerId(id);\r\n// // //     });\r\n\r\n// // //     peer.on('call', (call) => {\r\n// // //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // //         .then((mediaStream) => {\r\n// // //           currentUserVideoRef.current.srcObject = mediaStream;\r\n// // //           currentUserVideoRef.current.play();\r\n// // //           call.answer(mediaStream);\r\n// // //           call.on('stream', (remoteStream) => {\r\n// // //             remoteVideoRef.current.srcObject = remoteStream;\r\n// // //             remoteVideoRef.current.play();\r\n// // //           });\r\n// // //         });\r\n// // //     });\r\n\r\n// // //     peerInstance.current = peer;\r\n\r\n// // //     return () => {\r\n// // //       peer.destroy();\r\n// // //     };\r\n// // //   }, []);\r\n\r\n// // //   const call = (remotePeerId) => {\r\n// // //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// // //       .then((mediaStream) => {\r\n// // //         currentUserVideoRef.current.srcObject = mediaStream;\r\n// // //         currentUserVideoRef.current.play();\r\n// // //         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n// // //         call.on('stream', (remoteStream) => {\r\n// // //           remoteVideoRef.current.srcObject = remoteStream;\r\n// // //           remoteVideoRef.current.play();\r\n// // //         });\r\n// // //       });\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"App\">\r\n// // //       <h1>Current user id is {peerId}</h1>\r\n// // //       <input\r\n// // //         type=\"text\"\r\n// // //         value={remotePeerIdValue}\r\n// // //         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n// // //         placeholder=\"Enter remote peer ID\"\r\n// // //       />\r\n// // //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n// // //       <div>\r\n// // //         <video ref={currentUserVideoRef} autoPlay muted />\r\n// // //       </div>\r\n// // //       <div>\r\n// // //         <video ref={remoteVideoRef} autoPlay />\r\n// // //       </div>\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default VideoCall;\r\n\r\n\r\n// // import React, { useEffect, useRef, useState } from 'react';\r\n// // import Peer from 'peerjs';\r\n\r\n// // const VideoCall = () => {\r\n// //   const [peerId, setPeerId] = useState('');\r\n// //   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n// //   const remoteVideoRef = useRef(null);\r\n// //   const currentUserVideoRef = useRef(null);\r\n// //   const peerInstance = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     const peer = new Peer();\r\n\r\n// //     peer.on('open', (id) => {\r\n// //       setPeerId(id);\r\n// //     });\r\n\r\n// //     peer.on('call', (call) => {\r\n// //       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// //         .then((mediaStream) => {\r\n// //           // Clean up previous stream if any\r\n// //           const currentStream = currentUserVideoRef.current.srcObject;\r\n// //           if (currentStream) {\r\n// //             const tracks = currentStream.getTracks();\r\n// //             tracks.forEach(track => track.stop());\r\n// //           }\r\n          \r\n// //           currentUserVideoRef.current.srcObject = mediaStream;\r\n// //           currentUserVideoRef.current.play().catch(console.error);\r\n// //           call.answer(mediaStream);\r\n// //           call.on('stream', (remoteStream) => {\r\n// //             // Clean up previous remote stream if any\r\n// //             const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// //             if (remoteStreamElement) {\r\n// //               const tracks = remoteStreamElement.getTracks();\r\n// //               tracks.forEach(track => track.stop());\r\n// //             }\r\n\r\n// //             remoteVideoRef.current.srcObject = remoteStream;\r\n// //             remoteVideoRef.current.play().catch(console.error);\r\n// //           });\r\n// //         });\r\n// //     });\r\n\r\n// //     peerInstance.current = peer;\r\n\r\n// //     return () => {\r\n// //       // Clean up on component unmount\r\n// //       peer.destroy();\r\n// //       const currentStream = currentUserVideoRef.current.srcObject;\r\n// //       if (currentStream) {\r\n// //         const tracks = currentStream.getTracks();\r\n// //         tracks.forEach(track => track.stop());\r\n// //       }\r\n// //       const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// //       if (remoteStreamElement) {\r\n// //         const tracks = remoteStreamElement.getTracks();\r\n// //         tracks.forEach(track => track.stop());\r\n// //       }\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   const call = (remotePeerId) => {\r\n// //     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n// //       .then((mediaStream) => {\r\n// //         // Clean up previous stream if any\r\n// //         const currentStream = currentUserVideoRef.current.srcObject;\r\n// //         if (currentStream) {\r\n// //           const tracks = currentStream.getTracks();\r\n// //           tracks.forEach(track => track.stop());\r\n// //         }\r\n\r\n// //         currentUserVideoRef.current.srcObject = mediaStream;\r\n// //         currentUserVideoRef.current.play().catch(console.error);\r\n\r\n// //         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n// //         call.on('stream', (remoteStream) => {\r\n// //           // Clean up previous remote stream if any\r\n// //           const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n// //           if (remoteStreamElement) {\r\n// //             const tracks = remoteStreamElement.getTracks();\r\n// //             tracks.forEach(track => track.stop());\r\n// //           }\r\n\r\n// //           remoteVideoRef.current.srcObject = remoteStream;\r\n// //           remoteVideoRef.current.play().catch(console.error);\r\n// //         });\r\n// //       });\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"App\">\r\n// //       <h1>Current user id is {peerId}</h1>\r\n// //       <input\r\n// //         type=\"text\"\r\n// //         value={remotePeerIdValue}\r\n// //         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n// //         placeholder=\"Enter remote peer ID\"\r\n// //       />\r\n// //       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n// //       <div>\r\n// //         <video ref={currentUserVideoRef} autoPlay muted />\r\n// //       </div>\r\n// //       <div>\r\n// //         <video ref={remoteVideoRef} autoPlay />\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default VideoCall;\r\n\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import Peer from 'peerjs';\r\n\r\n// const VideoCall = () => {\r\n//   const [peerId, setPeerId] = useState('');\r\n//   const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n//   const remoteVideoRef = useRef(null);\r\n//   const currentUserVideoRef = useRef(null);\r\n//   const peerInstance = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const peer = new Peer();\r\n\r\n//     peer.on('open', (id) => {\r\n//       setPeerId(id);\r\n//     });\r\n\r\n//     peer.on('call', (call) => {\r\n//       // Get user media for the current user\r\n//       navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n//         .then((mediaStream) => {\r\n//           // Display the current user's video feed\r\n//           currentUserVideoRef.current.srcObject = mediaStream;\r\n//           currentUserVideoRef.current.play().catch(console.error);\r\n\r\n//           // Answer the call with the current user's media stream\r\n//           call.answer(mediaStream);\r\n          \r\n//           // When the remote stream is received\r\n//           call.on('stream', (remoteStream) => {\r\n//             // Display the remote user's video feed\r\n//             remoteVideoRef.current.srcObject = remoteStream;\r\n//             remoteVideoRef.current.play().catch(console.error);\r\n//           });\r\n//         });\r\n//     });\r\n\r\n//     peerInstance.current = peer;\r\n\r\n//     return () => {\r\n//       // Cleanup on component unmount\r\n//       peer.destroy();\r\n//       const currentStream = currentUserVideoRef.current.srcObject;\r\n//       if (currentStream) {\r\n//         const tracks = currentStream.getTracks();\r\n//         tracks.forEach(track => track.stop());\r\n//       }\r\n//       const remoteStreamElement = remoteVideoRef.current.srcObject;\r\n//       if (remoteStreamElement) {\r\n//         const tracks = remoteStreamElement.getTracks();\r\n//         tracks.forEach(track => track.stop());\r\n//       }\r\n//     };\r\n//   }, []);\r\n\r\n//   const call = (remotePeerId) => {\r\n//     // Get user media for the current user\r\n//     navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n//       .then((mediaStream) => {\r\n//         // Display the current user's video feed\r\n//         currentUserVideoRef.current.srcObject = mediaStream;\r\n//         currentUserVideoRef.current.play().catch(console.error);\r\n\r\n//         // Initiate a call to the remote peer with the current user's media stream\r\n//         const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n\r\n//         // When the remote stream is received\r\n//         call.on('stream', (remoteStream) => {\r\n//           // Display the remote user's video feed\r\n//           remoteVideoRef.current.srcObject = remoteStream;\r\n//           remoteVideoRef.current.play().catch(console.error);\r\n//         });\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <h1>Current user id is {peerId}</h1>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={remotePeerIdValue}\r\n//         onChange={e => setRemotePeerIdValue(e.target.value)}\r\n//         placeholder=\"Enter remote peer ID\"\r\n//       />\r\n//       <button onClick={() => call(remotePeerIdValue)}>Call</button>\r\n//       <div>\r\n//         <video ref={currentUserVideoRef} autoPlay muted />\r\n//       </div>\r\n//       <div>\r\n//         <video ref={remoteVideoRef} autoPlay />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default VideoCall;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Peer from 'peerjs';\r\n\r\nconst VideoCall = () => {\r\n  const [peerId, setPeerId] = useState('');\r\n  const [remotePeerIdValue, setRemotePeerIdValue] = useState('');\r\n  const [callActive, setCallActive] = useState(false);\r\n  const [videoEnabled, setVideoEnabled] = useState(true);\r\n  const [audioEnabled, setAudioEnabled] = useState(true);\r\n  const remoteVideoRef = useRef(null);\r\n  const currentUserVideoRef = useRef(null);\r\n  const peerInstance = useRef(null);\r\n  const mediaStreamRef = useRef(null);\r\n  const callRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const peer = new Peer();\r\n\r\n    peer.on('open', (id) => {\r\n      setPeerId(id);\r\n    });\r\n\r\n    peer.on('call', (call) => {\r\n      navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n        .then((mediaStream) => {\r\n          mediaStreamRef.current = mediaStream;\r\n          currentUserVideoRef.current.srcObject = mediaStream;\r\n          currentUserVideoRef.current.play().catch(console.error);\r\n\r\n          call.answer(mediaStream);\r\n          callRef.current = call;\r\n          setCallActive(true);\r\n\r\n          call.on('stream', (remoteStream) => {\r\n            remoteVideoRef.current.srcObject = remoteStream;\r\n            remoteVideoRef.current.play().catch(console.error);\r\n          });\r\n        });\r\n    });\r\n\r\n    peerInstance.current = peer;\r\n\r\n    return () => {\r\n      peer.destroy();\r\n      if (mediaStreamRef.current) {\r\n        const tracks = mediaStreamRef.current.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n      }\r\n      if (remoteVideoRef.current.srcObject) {\r\n        const tracks = remoteVideoRef.current.srcObject.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const call = (remotePeerId) => {\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n      .then((mediaStream) => {\r\n        mediaStreamRef.current = mediaStream;\r\n        currentUserVideoRef.current.srcObject = mediaStream;\r\n        currentUserVideoRef.current.play().catch(console.error);\r\n\r\n        const call = peerInstance.current.call(remotePeerId, mediaStream);\r\n        callRef.current = call;\r\n        setCallActive(true);\r\n\r\n        call.on('stream', (remoteStream) => {\r\n          remoteVideoRef.current.srcObject = remoteStream;\r\n          remoteVideoRef.current.play().catch(console.error);\r\n        });\r\n      });\r\n  };\r\n\r\n  const endCall = () => {\r\n    if (callRef.current) {\r\n      callRef.current.close();\r\n      callRef.current = null;\r\n    }\r\n    setCallActive(false);\r\n  };\r\n\r\n  const toggleVideo = () => {\r\n    if (mediaStreamRef.current) {\r\n      const videoTrack = mediaStreamRef.current.getVideoTracks()[0];\r\n      videoTrack.enabled = !videoTrack.enabled;\r\n      setVideoEnabled(videoTrack.enabled);\r\n    }\r\n  };\r\n\r\n  const toggleAudio = () => {\r\n    if (mediaStreamRef.current) {\r\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\r\n      audioTrack.enabled = !audioTrack.enabled;\r\n      setAudioEnabled(audioTrack.enabled);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Current user id is {peerId}</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={remotePeerIdValue}\r\n        onChange={e => setRemotePeerIdValue(e.target.value)}\r\n        placeholder=\"Enter remote peer ID\"\r\n      />\r\n      <button onClick={() => call(remotePeerIdValue)} disabled={callActive}>\r\n        Call\r\n      </button>\r\n      <button onClick={endCall} disabled={!callActive}>\r\n        End Call\r\n      </button>\r\n      <button onClick={toggleVideo}>\r\n        {videoEnabled ? 'Disable Video' : 'Enable Video'}\r\n      </button>\r\n      <button onClick={toggleAudio}>\r\n        {audioEnabled ? 'Mute' : 'Unmute'}\r\n      </button>\r\n      <div>\r\n        <video ref={currentUserVideoRef} autoPlay muted />\r\n      </div>\r\n      <div>\r\n        <video ref={remoteVideoRef} autoPlay />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoCall;\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}