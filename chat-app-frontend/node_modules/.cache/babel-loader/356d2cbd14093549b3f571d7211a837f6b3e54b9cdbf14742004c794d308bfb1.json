{"ast":null,"code":"// import React, { useState, useRef, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import SimplePeer from 'simple-peer';\n\n// const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// const AudioCall = ({ receiverId }) => {\n//   const [stream, setStream] = useState(null);\n//   const [peer, setPeer] = useState(null);\n//   const [calling, setCalling] = useState(false);\n//   const localAudioRef = useRef(null);\n//   const remoteAudioRef = useRef(null);\n\n//   useEffect(() => {\n//     // Request user media\n//     navigator.mediaDevices.getUserMedia({ audio: true })\n//       .then(mediaStream => {\n//         setStream(mediaStream);\n//         if (localAudioRef.current) {\n//           localAudioRef.current.srcObject = mediaStream;\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error accessing media devices.', error);\n//       });\n\n//     socket.on('offer', handleOffer);\n//     socket.on('answer', handleAnswer);\n//     socket.on('ice-candidate', handleIceCandidate);\n\n//     return () => {\n//       socket.off('offer', handleOffer);\n//       socket.off('answer', handleAnswer);\n//       socket.off('ice-candidate', handleIceCandidate);\n//     };\n//   }, []);\n\n//   const startCall = () => {\n//     const newPeer = new SimplePeer({\n//       initiator: true,\n//       trickle: false,\n//       stream: stream,\n//     });\n\n//     newPeer.on('signal', (data) => {\n//       socket.emit('offer', { offer: data, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleOffer = (data) => {\n//     const newPeer = new SimplePeer({\n//       initiator: false,\n//       trickle: false,\n//     });\n\n//     newPeer.on('signal', (signal) => {\n//       socket.emit('answer', { answer: signal, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     newPeer.signal(data.offer);\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleAnswer = (data) => {\n//     if (peer) {\n//       peer.signal(data.answer);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   const handleIceCandidate = (data) => {\n//     if (peer) {\n//       peer.signal(data.candidate);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Audio Call</h2>\n//       <audio ref={localAudioRef} autoPlay muted />\n//       <audio ref={remoteAudioRef} autoPlay />\n//       <button onClick={startCall} disabled={calling}>Start Call</button>\n//     </div>\n//   );\n// };\n\n// export default AudioCall;","map":{"version":3,"names":[],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/AudioCall.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\r\n// import io from 'socket.io-client';\r\n// import SimplePeer from 'simple-peer';\r\n\r\n// const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// const AudioCall = ({ receiverId }) => {\r\n//   const [stream, setStream] = useState(null);\r\n//   const [peer, setPeer] = useState(null);\r\n//   const [calling, setCalling] = useState(false);\r\n//   const localAudioRef = useRef(null);\r\n//   const remoteAudioRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Request user media\r\n//     navigator.mediaDevices.getUserMedia({ audio: true })\r\n//       .then(mediaStream => {\r\n//         setStream(mediaStream);\r\n//         if (localAudioRef.current) {\r\n//           localAudioRef.current.srcObject = mediaStream;\r\n//         }\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error accessing media devices.', error);\r\n//       });\r\n\r\n//     socket.on('offer', handleOffer);\r\n//     socket.on('answer', handleAnswer);\r\n//     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n//     return () => {\r\n//       socket.off('offer', handleOffer);\r\n//       socket.off('answer', handleAnswer);\r\n//       socket.off('ice-candidate', handleIceCandidate);\r\n//     };\r\n//   }, []);\r\n\r\n//   const startCall = () => {\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: true,\r\n//       trickle: false,\r\n//       stream: stream,\r\n//     });\r\n\r\n//     newPeer.on('signal', (data) => {\r\n//       socket.emit('offer', { offer: data, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleOffer = (data) => {\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: false,\r\n//       trickle: false,\r\n//     });\r\n\r\n//     newPeer.on('signal', (signal) => {\r\n//       socket.emit('answer', { answer: signal, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     newPeer.signal(data.offer);\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleAnswer = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.answer);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   const handleIceCandidate = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.candidate);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Audio Call</h2>\r\n//       <audio ref={localAudioRef} autoPlay muted />\r\n//       <audio ref={remoteAudioRef} autoPlay />\r\n//       <button onClick={startCall} disabled={calling}>Start Call</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioCall;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}