{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\VoiceCalls.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useRef, useEffect } from 'react';\n// // import io from 'socket.io-client';\n// // import SimplePeer from 'simple-peer';\n\n// // const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// // const AudioCall = ({ receiverId }) => {\n// //   const [stream, setStream] = useState(null);\n// //   const [peer, setPeer] = useState(null);\n// //   const [calling, setCalling] = useState(false);\n// //   const localAudioRef = useRef(null);\n// //   const remoteAudioRef = useRef(null);\n\n// //   useEffect(() => {\n// //     // Request user media\n// //     navigator.mediaDevices.getUserMedia({ audio: true })\n// //       .then(mediaStream => {\n// //         setStream(mediaStream);\n// //         if (localAudioRef.current) {\n// //           localAudioRef.current.srcObject = mediaStream;\n// //         }\n// //       })\n// //       .catch(error => {\n// //         console.error('Error accessing media devices.', error);\n// //       });\n\n// //     socket.on('offer', handleOffer);\n// //     socket.on('answer', handleAnswer);\n// //     socket.on('ice-candidate', handleIceCandidate);\n\n// //     return () => {\n// //       socket.off('offer', handleOffer);\n// //       socket.off('answer', handleAnswer);\n// //       socket.off('ice-candidate', handleIceCandidate);\n// //     };\n// //   }, []);\n\n// //   const startCall = () => {\n// //     const newPeer = new SimplePeer({\n// //       initiator: true,\n// //       trickle: false,\n// //       stream: stream,\n// //     });\n\n// //     newPeer.on('signal', (data) => {\n// //       socket.emit('offer', { offer: data, to: receiverId });\n// //     });\n\n// //     newPeer.on('stream', (remoteStream) => {\n// //       if (remoteAudioRef.current) {\n// //         remoteAudioRef.current.srcObject = remoteStream;\n// //       }\n// //     });\n\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// //     setPeer(newPeer);\n// //     setCalling(true);\n// //   };\n\n// //   const handleOffer = (data) => {\n// //     const newPeer = new SimplePeer({\n// //       initiator: false,\n// //       trickle: false,\n// //     });\n\n// //     newPeer.on('signal', (signal) => {\n// //       socket.emit('answer', { answer: signal, to: receiverId });\n// //     });\n\n// //     newPeer.on('stream', (remoteStream) => {\n// //       if (remoteAudioRef.current) {\n// //         remoteAudioRef.current.srcObject = remoteStream;\n// //       }\n// //     });\n\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n// //     newPeer.signal(data.offer);\n// //     setPeer(newPeer);\n// //     setCalling(true);\n// //   };\n\n// //   const handleAnswer = (data) => {\n// //     if (peer) {\n// //       peer.signal(data.answer);\n// //     } else {\n// //       console.error('Peer connection is not initialized.');\n// //     }\n// //   };\n\n// //   const handleIceCandidate = (data) => {\n// //     if (peer) {\n// //       peer.signal(data.candidate);\n// //     } else {\n// //       console.error('Peer connection is not initialized.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h2>Audio Call</h2>\n// //       <audio ref={localAudioRef} autoPlay muted />\n// //       <audio ref={remoteAudioRef} autoPlay />\n// //       <button onClick={startCall} disabled={calling}>Start Call</button>\n// //     </div>\n// //   );\n// // };\n\n// // export default AudioCall;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import SimplePeer from 'simple-peer';\n\n// const socket = io('http://localhost:3000'); // Replace with your server URL\n\n// const AudioCall = ({ receiverId }) => {\n//   const [stream, setStream] = useState(null);\n//   const [peer, setPeer] = useState(null);\n//   const [calling, setCalling] = useState(false);\n//   const localAudioRef = useRef(null);\n//   const remoteAudioRef = useRef(null);\n\n//   useEffect(() => {\n//     // Request user media\n//     navigator.mediaDevices.getUserMedia({ audio: true })\n//       .then(mediaStream => {\n//         setStream(mediaStream);\n//         if (localAudioRef.current) {\n//           localAudioRef.current.srcObject = mediaStream;\n//         }\n//       })\n//       .catch(error => {\n//         console.error('Error accessing media devices.', error);\n//       });\n\n//     socket.on('offer', handleOffer);\n//     socket.on('answer', handleAnswer);\n//     socket.on('ice-candidate', handleIceCandidate);\n\n//     return () => {\n//       socket.off('offer', handleOffer);\n//       socket.off('answer', handleAnswer);\n//       socket.off('ice-candidate', handleIceCandidate);\n//       // Clean up on component unmount\n//       if (stream) {\n//         stream.getTracks().forEach(track => track.stop());\n//       }\n//       if (peer) {\n//         peer.destroy();\n//       }\n//     };\n//   }, []);\n\n//   const startCall = () => {\n//     const newPeer = new SimplePeer({\n//       initiator: true,\n//       trickle: false,\n//       stream: stream,\n//     });\n\n//     newPeer.on('signal', (data) => {\n//       socket.emit('offer', { offer: data, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleOffer = (data) => {\n//     const newPeer = new SimplePeer({\n//       initiator: false,\n//       trickle: false,\n//     });\n\n//     newPeer.on('signal', (signal) => {\n//       socket.emit('answer', { answer: signal, to: receiverId });\n//     });\n\n//     newPeer.on('stream', (remoteStream) => {\n//       if (remoteAudioRef.current) {\n//         remoteAudioRef.current.srcObject = remoteStream;\n//       }\n//     });\n\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\n\n//     newPeer.signal(data.offer);\n//     setPeer(newPeer);\n//     setCalling(true);\n//   };\n\n//   const handleAnswer = (data) => {\n//     if (peer) {\n//       peer.signal(data.answer);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   const handleIceCandidate = (data) => {\n//     if (peer) {\n//       peer.signal(data.candidate);\n//     } else {\n//       console.error('Peer connection is not initialized.');\n//     }\n//   };\n\n//   const endCall = () => {\n//     if (peer) {\n//       peer.destroy();\n//       setPeer(null);\n//     }\n//     if (stream) {\n//       stream.getTracks().forEach(track => track.stop());\n//       setStream(null);\n//     }\n//     setCalling(false);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Audio Call</h2>\n//       <audio ref={localAudioRef} autoPlay muted />\n//       <audio ref={remoteAudioRef} autoPlay />\n//       {calling ? (\n//         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\n//           End Call\n//         </button>\n//       ) : (\n//         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\n//           Start Call\n//         </button>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default AudioCall;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport SimplePeer from 'simple-peer';\nimport { toast } from 'react-toastify'; // Import React Toastify\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3000'); // Replace with your server URL\n\nconst AudioCall = ({\n  receiverId\n}) => {\n  _s();\n  const [stream, setStream] = useState(null);\n  const [peer, setPeer] = useState(null);\n  const [calling, setCalling] = useState(false);\n  const localAudioRef = useRef(null);\n  const remoteAudioRef = useRef(null);\n  useEffect(() => {\n    // Request user media\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(mediaStream => {\n      setStream(mediaStream);\n      if (localAudioRef.current) {\n        localAudioRef.current.srcObject = mediaStream;\n      }\n    }).catch(error => {\n      console.error('Error accessing media devices.', error);\n    });\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleIceCandidate);\n    return () => {\n      socket.off('offer', handleOffer);\n      socket.off('answer', handleAnswer);\n      socket.off('ice-candidate', handleIceCandidate);\n      // Clean up on component unmount\n      if (stream) {\n        stream.getTracks().forEach(track => track.stop());\n      }\n      if (peer) {\n        peer.destroy();\n      }\n    };\n  }, []);\n  const startCall = () => {\n    const newPeer = new SimplePeer({\n      initiator: true,\n      trickle: false,\n      stream: stream\n    });\n    newPeer.on('signal', data => {\n      socket.emit('offer', {\n        offer: data,\n        to: receiverId\n      });\n    });\n    newPeer.on('stream', remoteStream => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStream;\n      }\n    });\n    newPeer.on('error', err => console.error('Peer error:', err));\n    setPeer(newPeer);\n    setCalling(true);\n  };\n  const handleOffer = data => {\n    if (Notification.permission === 'granted') {\n      toast('Incoming call from user'); // Show toast notification\n    }\n    const newPeer = new SimplePeer({\n      initiator: false,\n      trickle: false\n    });\n    newPeer.on('signal', signal => {\n      socket.emit('answer', {\n        answer: signal,\n        to: receiverId\n      });\n    });\n    newPeer.on('stream', remoteStream => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStream;\n      }\n    });\n    newPeer.on('error', err => console.error('Peer error:', err));\n    newPeer.signal(data.offer);\n    setPeer(newPeer);\n    setCalling(true);\n  };\n  const handleAnswer = data => {\n    if (peer) {\n      peer.signal(data.answer);\n    } else {\n      console.error('Peer connection is not initialized.');\n    }\n  };\n  const handleIceCandidate = data => {\n    if (peer) {\n      peer.signal(data.candidate);\n    } else {\n      console.error('Peer connection is not initialized.');\n    }\n  };\n  const endCall = () => {\n    if (peer) {\n      peer.destroy();\n      setPeer(null);\n    }\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    setCalling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Audio Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: localAudioRef,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: remoteAudioRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), calling ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: endCall,\n      className: \"bg-red-500 text-white p-2 rounded\",\n      children: \"End Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startCall,\n      className: \"bg-blue-500 text-white p-2 rounded\",\n      children: \"Start Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioCall, \"uSjBznZRr9zKDgG1tWkq23aYomo=\");\n_c = AudioCall;\nexport default AudioCall;\nvar _c;\n$RefreshReg$(_c, \"AudioCall\");","map":{"version":3,"names":["React","useState","useRef","useEffect","io","SimplePeer","toast","jsxDEV","_jsxDEV","socket","AudioCall","receiverId","_s","stream","setStream","peer","setPeer","calling","setCalling","localAudioRef","remoteAudioRef","navigator","mediaDevices","getUserMedia","audio","then","mediaStream","current","srcObject","catch","error","console","on","handleOffer","handleAnswer","handleIceCandidate","off","getTracks","forEach","track","stop","destroy","startCall","newPeer","initiator","trickle","data","emit","offer","to","remoteStream","err","Notification","permission","signal","answer","candidate","endCall","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","onClick","className","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/VoiceCalls.js"],"sourcesContent":["// // import React, { useState, useRef, useEffect } from 'react';\r\n// // import io from 'socket.io-client';\r\n// // import SimplePeer from 'simple-peer';\r\n\r\n// // const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// // const AudioCall = ({ receiverId }) => {\r\n// //   const [stream, setStream] = useState(null);\r\n// //   const [peer, setPeer] = useState(null);\r\n// //   const [calling, setCalling] = useState(false);\r\n// //   const localAudioRef = useRef(null);\r\n// //   const remoteAudioRef = useRef(null);\r\n\r\n// //   useEffect(() => {\r\n// //     // Request user media\r\n// //     navigator.mediaDevices.getUserMedia({ audio: true })\r\n// //       .then(mediaStream => {\r\n// //         setStream(mediaStream);\r\n// //         if (localAudioRef.current) {\r\n// //           localAudioRef.current.srcObject = mediaStream;\r\n// //         }\r\n// //       })\r\n// //       .catch(error => {\r\n// //         console.error('Error accessing media devices.', error);\r\n// //       });\r\n\r\n// //     socket.on('offer', handleOffer);\r\n// //     socket.on('answer', handleAnswer);\r\n// //     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n// //     return () => {\r\n// //       socket.off('offer', handleOffer);\r\n// //       socket.off('answer', handleAnswer);\r\n// //       socket.off('ice-candidate', handleIceCandidate);\r\n// //     };\r\n// //   }, []);\r\n\r\n// //   const startCall = () => {\r\n// //     const newPeer = new SimplePeer({\r\n// //       initiator: true,\r\n// //       trickle: false,\r\n// //       stream: stream,\r\n// //     });\r\n\r\n// //     newPeer.on('signal', (data) => {\r\n// //       socket.emit('offer', { offer: data, to: receiverId });\r\n// //     });\r\n\r\n// //     newPeer.on('stream', (remoteStream) => {\r\n// //       if (remoteAudioRef.current) {\r\n// //         remoteAudioRef.current.srcObject = remoteStream;\r\n// //       }\r\n// //     });\r\n\r\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// //     setPeer(newPeer);\r\n// //     setCalling(true);\r\n// //   };\r\n\r\n// //   const handleOffer = (data) => {\r\n// //     const newPeer = new SimplePeer({\r\n// //       initiator: false,\r\n// //       trickle: false,\r\n// //     });\r\n\r\n// //     newPeer.on('signal', (signal) => {\r\n// //       socket.emit('answer', { answer: signal, to: receiverId });\r\n// //     });\r\n\r\n// //     newPeer.on('stream', (remoteStream) => {\r\n// //       if (remoteAudioRef.current) {\r\n// //         remoteAudioRef.current.srcObject = remoteStream;\r\n// //       }\r\n// //     });\r\n\r\n// //     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n// //     newPeer.signal(data.offer);\r\n// //     setPeer(newPeer);\r\n// //     setCalling(true);\r\n// //   };\r\n\r\n// //   const handleAnswer = (data) => {\r\n// //     if (peer) {\r\n// //       peer.signal(data.answer);\r\n// //     } else {\r\n// //       console.error('Peer connection is not initialized.');\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleIceCandidate = (data) => {\r\n// //     if (peer) {\r\n// //       peer.signal(data.candidate);\r\n// //     } else {\r\n// //       console.error('Peer connection is not initialized.');\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div>\r\n// //       <h2>Audio Call</h2>\r\n// //       <audio ref={localAudioRef} autoPlay muted />\r\n// //       <audio ref={remoteAudioRef} autoPlay />\r\n// //       <button onClick={startCall} disabled={calling}>Start Call</button>\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default AudioCall;\r\n\r\n\r\n// import React, { useState, useRef, useEffect } from 'react';\r\n// import io from 'socket.io-client';\r\n// import SimplePeer from 'simple-peer';\r\n\r\n// const socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\n// const AudioCall = ({ receiverId }) => {\r\n//   const [stream, setStream] = useState(null);\r\n//   const [peer, setPeer] = useState(null);\r\n//   const [calling, setCalling] = useState(false);\r\n//   const localAudioRef = useRef(null);\r\n//   const remoteAudioRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     // Request user media\r\n//     navigator.mediaDevices.getUserMedia({ audio: true })\r\n//       .then(mediaStream => {\r\n//         setStream(mediaStream);\r\n//         if (localAudioRef.current) {\r\n//           localAudioRef.current.srcObject = mediaStream;\r\n//         }\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('Error accessing media devices.', error);\r\n//       });\r\n\r\n//     socket.on('offer', handleOffer);\r\n//     socket.on('answer', handleAnswer);\r\n//     socket.on('ice-candidate', handleIceCandidate);\r\n\r\n//     return () => {\r\n//       socket.off('offer', handleOffer);\r\n//       socket.off('answer', handleAnswer);\r\n//       socket.off('ice-candidate', handleIceCandidate);\r\n//       // Clean up on component unmount\r\n//       if (stream) {\r\n//         stream.getTracks().forEach(track => track.stop());\r\n//       }\r\n//       if (peer) {\r\n//         peer.destroy();\r\n//       }\r\n//     };\r\n//   }, []);\r\n\r\n//   const startCall = () => {\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: true,\r\n//       trickle: false,\r\n//       stream: stream,\r\n//     });\r\n\r\n//     newPeer.on('signal', (data) => {\r\n//       socket.emit('offer', { offer: data, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleOffer = (data) => {\r\n//     const newPeer = new SimplePeer({\r\n//       initiator: false,\r\n//       trickle: false,\r\n//     });\r\n\r\n//     newPeer.on('signal', (signal) => {\r\n//       socket.emit('answer', { answer: signal, to: receiverId });\r\n//     });\r\n\r\n//     newPeer.on('stream', (remoteStream) => {\r\n//       if (remoteAudioRef.current) {\r\n//         remoteAudioRef.current.srcObject = remoteStream;\r\n//       }\r\n//     });\r\n\r\n//     newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n//     newPeer.signal(data.offer);\r\n//     setPeer(newPeer);\r\n//     setCalling(true);\r\n//   };\r\n\r\n//   const handleAnswer = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.answer);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   const handleIceCandidate = (data) => {\r\n//     if (peer) {\r\n//       peer.signal(data.candidate);\r\n//     } else {\r\n//       console.error('Peer connection is not initialized.');\r\n//     }\r\n//   };\r\n\r\n//   const endCall = () => {\r\n//     if (peer) {\r\n//       peer.destroy();\r\n//       setPeer(null);\r\n//     }\r\n//     if (stream) {\r\n//       stream.getTracks().forEach(track => track.stop());\r\n//       setStream(null);\r\n//     }\r\n//     setCalling(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Audio Call</h2>\r\n//       <audio ref={localAudioRef} autoPlay muted />\r\n//       <audio ref={remoteAudioRef} autoPlay />\r\n//       {calling ? (\r\n//         <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n//           End Call\r\n//         </button>\r\n//       ) : (\r\n//         <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n//           Start Call\r\n//         </button>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AudioCall;\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport SimplePeer from 'simple-peer';\r\nimport { toast } from 'react-toastify'; // Import React Toastify\r\n\r\nconst socket = io('http://localhost:3000'); // Replace with your server URL\r\n\r\nconst AudioCall = ({ receiverId }) => {\r\n  const [stream, setStream] = useState(null);\r\n  const [peer, setPeer] = useState(null);\r\n  const [calling, setCalling] = useState(false);\r\n  const localAudioRef = useRef(null);\r\n  const remoteAudioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Request user media\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(mediaStream => {\r\n        setStream(mediaStream);\r\n        if (localAudioRef.current) {\r\n          localAudioRef.current.srcObject = mediaStream;\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error accessing media devices.', error);\r\n      });\r\n\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleIceCandidate);\r\n\r\n    return () => {\r\n      socket.off('offer', handleOffer);\r\n      socket.off('answer', handleAnswer);\r\n      socket.off('ice-candidate', handleIceCandidate);\r\n      // Clean up on component unmount\r\n      if (stream) {\r\n        stream.getTracks().forEach(track => track.stop());\r\n      }\r\n      if (peer) {\r\n        peer.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const startCall = () => {\r\n    const newPeer = new SimplePeer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream: stream,\r\n    });\r\n\r\n    newPeer.on('signal', (data) => {\r\n      socket.emit('offer', { offer: data, to: receiverId });\r\n    });\r\n\r\n    newPeer.on('stream', (remoteStream) => {\r\n      if (remoteAudioRef.current) {\r\n        remoteAudioRef.current.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n    setPeer(newPeer);\r\n    setCalling(true);\r\n  };\r\n\r\n  const handleOffer = (data) => {\r\n    if (Notification.permission === 'granted') {\r\n      toast('Incoming call from user'); // Show toast notification\r\n    }\r\n\r\n    const newPeer = new SimplePeer({\r\n      initiator: false,\r\n      trickle: false,\r\n    });\r\n\r\n    newPeer.on('signal', (signal) => {\r\n      socket.emit('answer', { answer: signal, to: receiverId });\r\n    });\r\n\r\n    newPeer.on('stream', (remoteStream) => {\r\n      if (remoteAudioRef.current) {\r\n        remoteAudioRef.current.srcObject = remoteStream;\r\n      }\r\n    });\r\n\r\n    newPeer.on('error', (err) => console.error('Peer error:', err));\r\n\r\n    newPeer.signal(data.offer);\r\n    setPeer(newPeer);\r\n    setCalling(true);\r\n  };\r\n\r\n  const handleAnswer = (data) => {\r\n    if (peer) {\r\n      peer.signal(data.answer);\r\n    } else {\r\n      console.error('Peer connection is not initialized.');\r\n    }\r\n  };\r\n\r\n  const handleIceCandidate = (data) => {\r\n    if (peer) {\r\n      peer.signal(data.candidate);\r\n    } else {\r\n      console.error('Peer connection is not initialized.');\r\n    }\r\n  };\r\n\r\n  const endCall = () => {\r\n    if (peer) {\r\n      peer.destroy();\r\n      setPeer(null);\r\n    }\r\n    if (stream) {\r\n      stream.getTracks().forEach(track => track.stop());\r\n      setStream(null);\r\n    }\r\n    setCalling(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Audio Call</h2>\r\n      <audio ref={localAudioRef} autoPlay muted />\r\n      <audio ref={remoteAudioRef} autoPlay />\r\n      {calling ? (\r\n        <button onClick={endCall} className=\"bg-red-500 text-white p-2 rounded\">\r\n          End Call\r\n        </button>\r\n      ) : (\r\n        <button onClick={startCall} className=\"bg-blue-500 text-white p-2 rounded\">\r\n          Start Call\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioCall;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,UAAU,MAAM,aAAa;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}