{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\Chatpage.js\",\n  _s = $RefreshSig$();\n// // // // // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // // // // import { io } from 'socket.io-client';\n// // // // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // // // // const ChatPage = () => {\n// // // // // // //     const [messages, setMessages] = useState([]);\n// // // // // // //     const [messageText, setMessageText] = useState('');\n// // // // // // //     const messageEndRef = useRef(null);\n// // // // // // //     const navigate = useNavigate();\n// // // // // // //     const { receiverId } = useParams();\n\n// // // // // // //     const userId = localStorage.getItem('userId');\n// // // // // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // // // // //     useEffect(() => {\n// // // // // // //         if (!receiverId) return;\n\n// // // // // // //         // Socket connection events\n// // // // // // //         socket.on('connect', () => {\n// // // // // // //             console.log('Connected to socket server');\n// // // // // // //         });\n\n// // // // // // //         socket.on('disconnect', () => {\n// // // // // // //             console.log('Disconnected from socket server');\n// // // // // // //         });\n\n// // // // // // //         // const fetchMessages = async () => {\n// // // // // // //         //     const receiverId = localStorage.getItem('userId');\n// // // // // // //         //     const senderId = localStorage.getItem('touserId');\n// // // // // // //         //     try {\n// // // // // // //         //         const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // // // //         //         const result = await response.json();\n// // // // // // //         //         console.log(\"result\"+result);\n// // // // // // //         //         if (Array.isArray(result.messages)) {\n// // // // // // //         //             setMessages(result.messages);\n// // // // // // //         //         } else {\n// // // // // // //         //             throw new Error('Unexpected response format');\n// // // // // // //         //         }\n// // // // // // //         //     } catch (error) {\n// // // // // // //         //         console.error('Failed to fetch messages:', error);\n// // // // // // //         //     }\n// // // // // // //         // };\n\n// // // // // // //         const fetchMessages = async () => {\n// // // // // // //             const receiverId = localStorage.getItem('userId');\n// // // // // // //             const senderId = localStorage.getItem('touserId');\n// // // // // // //             try {\n// // // // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // // // //                 console.log(\"Response:\", response); // Log the raw response object\n// // // // // // //                 const result = await response.json();\n// // // // // // //                 console.log(\"Result:\", result); // Log the JSON result\n// // // // // // //                 if (Array.isArray(result.messages)) {\n// // // // // // //                     setMessages(result.messages);\n// // // // // // //                 } else {\n// // // // // // //                     throw new Error('Unexpected response format');\n// // // // // // //                 }\n// // // // // // //             } catch (error) {\n// // // // // // //                 console.error('Failed to fetch messages:', error);\n// // // // // // //             }\n// // // // // // //         };\n\n// // // // // // //         fetchMessages();\n\n// // // // // // //         socket.emit('joinRoom', receiverId);\n\n// // // // // // //         socket.on('message', (message) => {\n// // // // // // //             console.log('Received message:', message); // Debug message\n// // // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // // // // //         });\n\n// // // // // // //         socket.on('messageDeleted', (messageId) => {\n// // // // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // // // // //         });\n\n// // // // // // //         return () => {\n// // // // // // //             socket.off('connect');\n// // // // // // //             socket.off('disconnect');\n// // // // // // //             socket.off('message');\n// // // // // // //             socket.off('messageDeleted');\n// // // // // // //         };\n// // // // // // //     }, [receiverId, userId]);\n\n// // // // // // //     const handleSendMessage = async () => {\n// // // // // // //         if (messageText.trim()) {\n// // // // // // //             try {\n// // // // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // // // // //                     method: 'POST',\n// // // // // // //                     headers: {\n// // // // // // //                         'Content-Type': 'application/json',\n// // // // // // //                     },\n// // // // // // //                     body: JSON.stringify({\n// // // // // // //                         senderId: userId,\n// // // // // // //                         receiverId: storedToUserId,\n// // // // // // //                         text: messageText,\n// // // // // // //                     }),\n// // // // // // //                 });\n// // // // // // //                 const result = await response.json();\n// // // // // // //                 if (response.ok) {\n// // // // // // //                     setMessageText(''); // Clear the input box\n// // // // // // //                 } else {\n// // // // // // //                     console.error('SendMessage Error:', result.message);\n// // // // // // //                 }\n// // // // // // //             } catch (error) {\n// // // // // // //                 console.error('SendMessage Fetch Error:', error);\n// // // // // // //             }\n// // // // // // //         }\n// // // // // // //     };\n\n// // // // // // //     const handleDeleteMessage = async (messageId) => {\n// // // // // // //         try {\n// // // // // // //             await fetch('http://localhost:3001/deleteMessage', {\n// // // // // // //                 method: 'POST',\n// // // // // // //                 headers: {\n// // // // // // //                     'Content-Type': 'application/json',\n// // // // // // //                 },\n// // // // // // //                 body: JSON.stringify({ messageId }),\n// // // // // // //             });\n// // // // // // //         } catch (error) {\n// // // // // // //             console.error('DeleteMessage Error:', error);\n// // // // // // //         }\n// // // // // // //     };\n\n// // // // // // //     const handleBack = () => {\n// // // // // // //         navigate('/home');\n// // // // // // //     };\n\n// // // // // // //     const handleCallUser = () => {\n// // // // // // //         console.log('Calling user:', receiverId);\n// // // // // // //     };\n\n// // // // // // //     return (\n// // // // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // // // // //             <div className=\"flex items-center mb-4\">\n// // // // // // //                 <img\n// // // // // // //                     src={defaultAvatar}\n// // // // // // //                     alt=\"Avatar\"\n// // // // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // // // // //                 />\n// // // // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // // // // //             </div>\n\n// // // // // // //             <button\n// // // // // // //                 onClick={handleBack}\n// // // // // // //                 type=\"button\"\n// // // // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // // // // //             >\n// // // // // // //                 <div\n// // // // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // // // // //                 >\n// // // // // // //                     <svg\n// // // // // // //                         width=\"25px\"\n// // // // // // //                         height=\"25px\"\n// // // // // // //                         viewBox=\"0 0 1024 1024\"\n// // // // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // // // // //                     >\n// // // // // // //                         <path\n// // // // // // //                             fill=\"#000000\"\n// // // // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // // // // //                         ></path>\n// // // // // // //                         <path\n// // // // // // //                             fill=\"#000000\"\n// // // // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // // // // //                         ></path>\n// // // // // // //                     </svg>\n// // // // // // //                 </div>\n// // // // // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // // // // //             </button>\n\n// // // // // // //             <div className=\"flex justify-end mb-4\">\n// // // // // // //                 <button\n// // // // // // //                     onClick={handleCallUser}\n// // // // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // // // // //                 >\n// // // // // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // // // // //                 </button>\n// // // // // // //                 <button\n// // // // // // //                     onClick={handleCallUser}\n// // // // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // // // // //                 >\n// // // // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // // // // //                 </button>\n// // // // // // //             </div>\n\n// // // // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\n// // // // // // //                 <div className=\"flex-grow\">\n// // // // // // //                     {messages.length > 0 ? (\n// // // // // // //                         messages.map((message) => (\n// // // // // // //                             <div\n// // // // // // //                                 key={message.id}\n// // // // // // //                                 className={`p-4 mb-2 rounded shadow ${\n// // // // // // //                                     message.senderId === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\n// // // // // // //                                 }`}\n// // // // // // //                             >\n// // // // // // //                                 <p>{message.text}</p>\n// // // // // // //                                 {message.senderId === userId && (\n// // // // // // //                                     <button\n// // // // // // //                                         onClick={() => handleDeleteMessage(message.id)}\n// // // // // // //                                         className=\"text-red-500\"\n// // // // // // //                                     >\n// // // // // // //                                         Delete\n// // // // // // //                                     </button>\n// // // // // // //                                 )}\n// // // // // // //                             </div>\n// // // // // // //                         ))\n// // // // // // //                     ) : (\n// // // // // // //                         <p>No messages yet.</p>\n// // // // // // //                     )}\n// // // // // // //                     <div ref={messageEndRef} />\n// // // // // // //                 </div>\n// // // // // // //             </div>\n\n// // // // // // //             <div className=\"flex\">\n// // // // // // //                 <input\n// // // // // // //                     type=\"text\"\n// // // // // // //                     value={messageText}\n// // // // // // //                     onChange={(e) => setMessageText(e.target.value)}\n// // // // // // //                     placeholder=\"Type your message...\"\n// // // // // // //                     className=\"w-full px-3 py-2 border rounded\"\n// // // // // // //                 />\n// // // // // // //                 <button\n// // // // // // //                     onClick={handleSendMessage}\n// // // // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\n// // // // // // //                 >\n// // // // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\n// // // // // // //                 </button>\n// // // // // // //             </div>\n// // // // // // //         </div>\n// // // // // // //     );\n// // // // // // // };\n\n// // // // // // // export default ChatPage;\n\n// // // // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // // // import { io } from 'socket.io-client';\n// // // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // // // const ChatPage = () => {\n// // // // // //     const [messages, setMessages] = useState([]);\n// // // // // //     const [messageText, setMessageText] = useState('');\n// // // // // //     const messageEndRef = useRef(null);\n// // // // // //     const navigate = useNavigate();\n// // // // // //     const { receiverId } = useParams();\n\n// // // // // //     const userId = localStorage.getItem('userId');\n// // // // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // // // //     useEffect(() => {\n// // // // // //         if (!receiverId) return;\n\n// // // // // //         socket.on('connect', () => {\n// // // // // //             console.log('Connected to socket server');\n// // // // // //         });\n\n// // // // // //         socket.on('disconnect', () => {\n// // // // // //             console.log('Disconnected from socket server');\n// // // // // //         });\n\n// // // // // //         const fetchMessages = async () => {\n// // // // // //             const receiverId = localStorage.getItem('userId');\n// // // // // //             const senderId = localStorage.getItem('touserId');\n// // // // // //             try {\n// // // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // // //                 const result = await response.json();\n// // // // // //                 console.log(\"Result:\", result);\n// // // // // //                 if (Array.isArray(result.messages)) {\n// // // // // //                     setMessages(result.messages);\n// // // // // //                 } else {\n// // // // // //                     throw new Error('Unexpected response format');\n// // // // // //                 }\n// // // // // //             } catch (error) {\n// // // // // //                 console.error('Failed to fetch messages:', error);\n// // // // // //             }\n// // // // // //         };\n\n// // // // // //         fetchMessages();\n\n// // // // // //         socket.emit('joinRoom', receiverId);\n\n// // // // // //         socket.on('message', (message) => {\n// // // // // //             console.log('Received message:', message); // Debug message\n// // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // // // //         });\n\n// // // // // //         socket.on('messageDeleted', (messageId) => {\n// // // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // // // //         });\n\n// // // // // //         return () => {\n// // // // // //             socket.off('connect');\n// // // // // //             socket.off('disconnect');\n// // // // // //             socket.off('message');\n// // // // // //             socket.off('messageDeleted');\n// // // // // //         };\n// // // // // //     }, [receiverId, userId]);\n\n// // // // // //     const handleSendMessage = async () => {\n// // // // // //         if (messageText.trim()) {\n// // // // // //             try {\n// // // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // // // //                     method: 'POST',\n// // // // // //                     headers: {\n// // // // // //                         'Content-Type': 'application/json',\n// // // // // //                     },\n// // // // // //                     body: JSON.stringify({\n// // // // // //                         senderId: userId,\n// // // // // //                         receiverId: storedToUserId,\n// // // // // //                         text: messageText,\n// // // // // //                     }),\n// // // // // //                 });\n// // // // // //                 const result = await response.json();\n// // // // // //                 if (response.ok) {\n// // // // // //                     setMessageText(''); // Clear the input box\n// // // // // //                 } else {\n// // // // // //                     console.error('SendMessage Error:', result.message);\n// // // // // //                 }\n// // // // // //             } catch (error) {\n// // // // // //                 console.error('SendMessage Fetch Error:', error);\n// // // // // //             }\n// // // // // //         }\n// // // // // //     };\n\n// // // // // //     const handleDeleteMessage = async (messageId) => {\n// // // // // //         try {\n// // // // // //             await fetch('http://localhost:3001/deleteMessage', {\n// // // // // //                 method: 'POST',\n// // // // // //                 headers: {\n// // // // // //                     'Content-Type': 'application/json',\n// // // // // //                 },\n// // // // // //                 body: JSON.stringify({ messageId }),\n// // // // // //             });\n// // // // // //         } catch (error) {\n// // // // // //             console.error('DeleteMessage Error:', error);\n// // // // // //         }\n// // // // // //     };\n\n// // // // // //     const handleBack = () => {\n// // // // // //         navigate('/home');\n// // // // // //     };\n\n// // // // // //     const handleCallUser = () => {\n// // // // // //         console.log('Calling user:', receiverId);\n// // // // // //     };\n\n// // // // // //     return (\n// // // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // // // //             <div className=\"flex items-center mb-4\">\n// // // // // //                 <img\n// // // // // //                     src={defaultAvatar}\n// // // // // //                     alt=\"Avatar\"\n// // // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // // // //                 />\n// // // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // // // //             </div>\n\n// // // // // //             <button\n// // // // // //                 onClick={handleBack}\n// // // // // //                 type=\"button\"\n// // // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // // // //             >\n// // // // // //                 <div\n// // // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // // // //                 >\n// // // // // //                     <svg\n// // // // // //                         width=\"25px\"\n// // // // // //                         height=\"25px\"\n// // // // // //                         viewBox=\"0 0 1024 1024\"\n// // // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // // // //                     >\n// // // // // //                         <path\n// // // // // //                             fill=\"#000000\"\n// // // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // // // //                         ></path>\n// // // // // //                         <path\n// // // // // //                             fill=\"#000000\"\n// // // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // // // //                         ></path>\n// // // // // //                     </svg>\n// // // // // //                 </div>\n// // // // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // // // //             </button>\n\n// // // // // //             <div className=\"flex justify-end mb-4\">\n// // // // // //                 <button\n// // // // // //                     onClick={handleCallUser}\n// // // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // // // //                 >\n// // // // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // // // //                 </button>\n// // // // // //                 <button\n// // // // // //                     onClick={handleCallUser}\n// // // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // // // //                 >\n// // // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // // // //                 </button>\n// // // // // //             </div>\n\n// // // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\n// // // // // //                 <div className=\"flex-grow\">\n// // // // // //                     {messages.length > 0 ? (\n// // // // // //                         messages.map((message) => (\n// // // // // //                             <div\n// // // // // //                                 key={message.id}\n// // // // // //                                 className={`p-4 mb-2 rounded shadow ${\n// // // // // //                                     message.from_user_id === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\n// // // // // //                                 }`}\n// // // // // //                             >\n// // // // // //                                 <p>{message.content}</p>\n// // // // // //                                 {message.from_user_id === userId && (\n// // // // // //                                     <button\n// // // // // //                                         onClick={() => handleDeleteMessage(message.id)}\n// // // // // //                                         className=\"text-red-500\"\n// // // // // //                                     >\n// // // // // //                                         Delete\n// // // // // //                                     </button>\n// // // // // //                                 )}\n// // // // // //                             </div>\n// // // // // //                         ))\n// // // // // //                     ) : (\n// // // // // //                         <p>No messages yet.</p>\n// // // // // //                     )}\n// // // // // //                     <div ref={messageEndRef} />\n// // // // // //                 </div>\n// // // // // //             </div>\n\n// // // // // //             <div className=\"flex\">\n// // // // // //                 <input\n// // // // // //                     type=\"text\"\n// // // // // //                     value={messageText}\n// // // // // //                     onChange={(e) => setMessageText(e.target.value)}\n// // // // // //                     placeholder=\"Type your message...\"\n// // // // // //                     className=\"w-full px-3 py-2 border rounded\"\n// // // // // //                 />\n// // // // // //                 <button\n// // // // // //                     onClick={handleSendMessage}\n// // // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\n// // // // // //                 >\n// // // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\n// // // // // //                 </button>\n// // // // // //             </div>\n// // // // // //         </div>\n// // // // // //     );\n// // // // // // };\n\n// // // // // // export default ChatPage;\n\n// // // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // // import { io } from 'socket.io-client';\n// // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // // const ChatPage = () => {\n// // // // //     const [messages, setMessages] = useState([]);\n// // // // //     const [messageText, setMessageText] = useState('');\n// // // // //     const messageEndRef = useRef(null);\n// // // // //     const navigate = useNavigate();\n// // // // //     const { receiverId } = useParams();\n\n// // // // //     const userId = localStorage.getItem('userId');\n// // // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // // //     useEffect(() => {\n// // // // //         if (!receiverId) return;\n\n// // // // //         socket.on('connect', () => {\n// // // // //             console.log('Connected to socket server');\n// // // // //         });\n\n// // // // //         socket.on('disconnect', () => {\n// // // // //             console.log('Disconnected from socket server');\n// // // // //         });\n\n// // // // //         const fetchMessages = async () => {\n// // // // //             const receiverId = localStorage.getItem('userId');\n// // // // //             const senderId = localStorage.getItem('touserId');\n// // // // //             try {\n// // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // //                 const result = await response.json();\n// // // // //                 console.log(\"Result:\", result);\n// // // // //                 if (Array.isArray(result.messages)) {\n// // // // //                     setMessages(result.messages);\n// // // // //                 } else {\n// // // // //                     throw new Error('Unexpected response format');\n// // // // //                 }\n// // // // //             } catch (error) {\n// // // // //                 console.error('Failed to fetch messages:', error);\n// // // // //             }\n// // // // //         };\n\n// // // // //         fetchMessages();\n\n// // // // //         socket.emit('joinRoom', receiverId);\n\n// // // // //         socket.on('message', (message) => {\n// // // // //             console.log('Received message:', message); // Debug message\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // // //         });\n\n// // // // //         socket.on('messageDeleted', (messageId) => {\n// // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // // //         });\n\n// // // // //         return () => {\n// // // // //             socket.off('connect');\n// // // // //             socket.off('disconnect');\n// // // // //             socket.off('message');\n// // // // //             socket.off('messageDeleted');\n// // // // //         };\n// // // // //     }, [receiverId, userId]);\n\n// // // // //     const handleSendMessage = async () => {\n// // // // //         if (messageText.trim()) {\n// // // // //             try {\n// // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // // //                     method: 'POST',\n// // // // //                     headers: {\n// // // // //                         'Content-Type': 'application/json',\n// // // // //                     },\n// // // // //                     body: JSON.stringify({\n// // // // //                         senderId: userId,\n// // // // //                         receiverId: storedToUserId,\n// // // // //                         text: messageText,\n// // // // //                     }),\n// // // // //                 });\n// // // // //                 const result = await response.json();\n// // // // //                 if (response.ok) {\n// // // // //                     setMessageText(''); // Clear the input box\n// // // // //                 } else {\n// // // // //                     console.error('SendMessage Error:', result.message);\n// // // // //                 }\n// // // // //             } catch (error) {\n// // // // //                 console.error('SendMessage Fetch Error:', error);\n// // // // //             }\n// // // // //         }\n// // // // //     };\n\n// // // // //     const handleDeleteMessage = async (messageId) => {\n// // // // //         try {\n// // // // //             await fetch('http://localhost:3001/deleteMessage', {\n// // // // //                 method: 'POST',\n// // // // //                 headers: {\n// // // // //                     'Content-Type': 'application/json',\n// // // // //                 },\n// // // // //                 body: JSON.stringify({ messageId }),\n// // // // //             });\n// // // // //         } catch (error) {\n// // // // //             console.error('DeleteMessage Error:', error);\n// // // // //         }\n// // // // //     };\n\n// // // // //     const handleBack = () => {\n// // // // //         navigate('/home');\n// // // // //     };\n\n// // // // //     const handleCallUser = () => {\n// // // // //         console.log('Calling user:', receiverId);\n// // // // //     };\n\n// // // // //     return (\n// // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // // //             <div className=\"flex items-center mb-4\">\n// // // // //                 <img\n// // // // //                     src={defaultAvatar}\n// // // // //                     alt=\"Avatar\"\n// // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // // //                 />\n// // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // // //             </div>\n\n// // // // //             <button\n// // // // //                 onClick={handleBack}\n// // // // //                 type=\"button\"\n// // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // // //             >\n// // // // //                 <div\n// // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // // //                 >\n// // // // //                     <svg\n// // // // //                         width=\"25px\"\n// // // // //                         height=\"25px\"\n// // // // //                         viewBox=\"0 0 1024 1024\"\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // // //                     >\n// // // // //                         <path\n// // // // //                             fill=\"#000000\"\n// // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // // //                         ></path>\n// // // // //                         <path\n// // // // //                             fill=\"#000000\"\n// // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // // //                         ></path>\n// // // // //                     </svg>\n// // // // //                 </div>\n// // // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // // //             </button>\n\n// // // // //             <div className=\"flex justify-end mb-4\">\n// // // // //                 <button\n// // // // //                     onClick={handleCallUser}\n// // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // // //                 >\n// // // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // // //                 </button>\n// // // // //                 <button\n// // // // //                     onClick={handleCallUser}\n// // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // // //                 >\n// // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // // //                 </button>\n// // // // //             </div>\n\n// // // // //             <div className=\"flex flex-col flex-grow\">\n// // // // //                 {/* Fixed Size Message Container */}\n// // // // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4  overflow-y-auto\">\n// // // // //                 {/* <div className=\"w-full max-w-xl mx-auto h-96 bg-gray-100 p-4 rounded-xl overflow-y-auto\"> */}\n\n// // // // //                     <div className=\"flex flex-col gap-2\">\n// // // // //                         {messages.length > 0 ? (\n// // // // //                             messages.map((message) => (\n// // // // //                                 <div\n// // // // //                                     key={message.id}\n// // // // //                                     className={`p-4 max-w-max rounded shadow ${\n// // // // //                                         message.from_user_id === userId\n// // // // //                                             ? 'bg-blue-200 self-end'\n// // // // //                                             : 'bg-white self-start'\n// // // // //                                     }`}\n// // // // //                                 >\n// // // // //                                     <p>{message.content}</p>\n// // // // //                                     {message.from_user_id === userId && (\n// // // // //                                         <button\n// // // // //                                             onClick={() => handleDeleteMessage(message.id)}\n// // // // //                                             className=\"text-red-500\"\n// // // // //                                         >\n// // // // //                                             Delete\n// // // // //                                         </button>\n// // // // //                                     )}\n// // // // //                                 </div>\n// // // // //                             ))\n// // // // //                         ) : (\n// // // // //                             <p>No messages yet.</p>\n// // // // //                         )}\n// // // // //                         <div ref={messageEndRef} />\n// // // // //                     </div>\n// // // // //                 </div>\n\n// // // // //                 <div className=\"flex mt-4\">\n// // // // //                     <input\n// // // // //                         type=\"text\"\n// // // // //                         value={messageText}\n// // // // //                         onChange={(e) => setMessageText(e.target.value)}\n// // // // //                         placeholder=\"Type your message...\"\n// // // // //                         className=\"w-full px-3 py-2 border rounded\"\n// // // // //                     />\n// // // // //                     <button\n// // // // //                     onClick={handleSendMessage}\n// // // // //                     class=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// // // // //                     >\n// // // // //                     Send\n// // // // //                     <svg\n// // // // //                         class=\"w-5 h-5\"\n// // // // //                         stroke=\"currentColor\"\n// // // // //                         stroke-width=\"1.5\"\n// // // // //                         viewBox=\"0 0 24 24\"\n// // // // //                         fill=\"none\"\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // // //                     >\n// // // // //                         <path\n// // // // //                         d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// // // // //                         stroke-linejoin=\"round\"\n// // // // //                         stroke-linecap=\"round\"\n// // // // //                         ></path>\n// // // // //                     </svg>\n// // // // //                     </button>\n\n// // // // //                 </div>\n// // // // //             </div>\n// // // // //         </div>\n// // // // //     );\n// // // // // };\n\n// // // // // export default ChatPage;\n// // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // import { io } from 'socket.io-client';\n// // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // const ChatPage = () => {\n// // // //     const [messages, setMessages] = useState([]);\n// // // //     const [messageText, setMessageText] = useState('');\n// // // //     const messageEndRef = useRef(null);\n// // // //     const navigate = useNavigate();\n// // // //     const { receiverId } = useParams();\n\n// // // //     const userId = localStorage.getItem('userId');\n// // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // //     useEffect(() => {\n// // // //         if (!receiverId) return;\n\n// // // //         socket.on('connect', () => {\n// // // //             console.log('Connected to socket server');\n// // // //         });\n\n// // // //         socket.on('disconnect', () => {\n// // // //             console.log('Disconnected from socket server');\n// // // //         });\n\n// // // //         const fetchMessages = async () => {\n// // // //             const receiverId = localStorage.getItem('userId');\n// // // //             const senderId = localStorage.getItem('touserId');\n// // // //             try {\n// // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // //                 const result = await response.json();\n// // // //                 if (Array.isArray(result.messages)) {\n// // // //                     setMessages(result.messages);\n// // // //                 } else {\n// // // //                     throw new Error('Unexpected response format');\n// // // //                 }\n// // // //             } catch (error) {\n// // // //                 console.error('Failed to fetch messages:', error);\n// // // //             }\n// // // //         };\n\n// // // //         fetchMessages();\n\n// // // //         socket.emit('joinRoom', receiverId);\n\n// // // //         socket.on('message', (message) => {\n// // // //             console.log('Received message:', message);\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // //         });\n\n// // // //         socket.on('messageDeleted', (messageId) => {\n// // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // //         });\n\n// // // //         return () => {\n// // // //             socket.off('connect');\n// // // //             socket.off('disconnect');\n// // // //             socket.off('message');\n// // // //             socket.off('messageDeleted');\n// // // //         };\n// // // //     }, [receiverId, userId]);\n\n// // // //     const handleSendMessage = async () => {\n// // // //         if (messageText.trim()) {\n// // // //             try {\n// // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // //                     method: 'POST',\n// // // //                     headers: {\n// // // //                         'Content-Type': 'application/json',\n// // // //                     },\n// // // //                     body: JSON.stringify({\n// // // //                         senderId: userId,\n// // // //                         receiverId: storedToUserId,\n// // // //                         text: messageText,\n// // // //                     }),\n// // // //                 });\n// // // //                 const result = await response.json();\n// // // //                 if (response.ok) {\n// // // //                     setMessageText(''); // Clear the input box\n// // // //                 } else {\n// // // //                     console.error('SendMessage Error:', result.message);\n// // // //                 }\n// // // //             } catch (error) {\n// // // //                 console.error('SendMessage Fetch Error:', error);\n// // // //             }\n// // // //         }\n// // // //     };\n\n// // // //     const handleDeleteMessage = async (messageId) => {\n// // // //         try {\n// // // //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// // // //                 method: 'POST',\n// // // //                 headers: {\n// // // //                     'Content-Type': 'application/json',\n// // // //                 },\n// // // //                 body: JSON.stringify({ messageId }),\n// // // //             });\n// // // //             const result = await response.json();\n// // // //             if (response.ok) {\n// // // //                 // Optionally, you can provide user feedback here\n// // // //             } else {\n// // // //                 console.error('DeleteMessage Error:', result.message);\n// // // //             }\n// // // //         } catch (error) {\n// // // //             console.error('DeleteMessage Fetch Error:', error);\n// // // //         }\n// // // //     };\n\n// // // //     const isMessageDeletable = (createdAt) => {\n// // // //         const messageTime = new Date(createdAt);\n// // // //         const currentTime = new Date();\n// // // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// // // //         return diffMinutes <= 2;\n// // // //     };\n\n// // // //     const handleBack = () => {\n// // // //         navigate('/home');\n// // // //     };\n\n// // // //     const handleCallUser = () => {\n// // // //         console.log('Calling user:', receiverId);\n// // // //     };\n\n// // // //     return (\n// // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // //             <div className=\"flex items-center mb-4\">\n// // // //                 <img\n// // // //                     src={defaultAvatar}\n// // // //                     alt=\"Avatar\"\n// // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // //                 />\n// // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // //             </div>\n\n// // // //             <button\n// // // //                 onClick={handleBack}\n// // // //                 type=\"button\"\n// // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // //             >\n// // // //                 <div\n// // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // //                 >\n// // // //                     <svg\n// // // //                         width=\"25px\"\n// // // //                         height=\"25px\"\n// // // //                         viewBox=\"0 0 1024 1024\"\n// // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // //                     >\n// // // //                         <path\n// // // //                             fill=\"#000000\"\n// // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // //                         ></path>\n// // // //                         <path\n// // // //                             fill=\"#000000\"\n// // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // //                         ></path>\n// // // //                     </svg>\n// // // //                 </div>\n// // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // //             </button>\n\n// // // //             <div className=\"flex justify-end mb-4\">\n// // // //                 <button\n// // // //                     onClick={handleCallUser}\n// // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // //                 >\n// // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // //                 </button>\n// // // //                 <button\n// // // //                     onClick={handleCallUser}\n// // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // //                 >\n// // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // //                 </button>\n// // // //             </div>\n\n// // // //             <div className=\"flex flex-col flex-grow\">\n// // // //                 {/* Fixed Size Message Container */}\n// // // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// // // //                     <div className=\"flex flex-col gap-2\">\n// // // //                         {messages.length > 0 ? (\n// // // //                             messages.map((message) => (\n// // // //                                 <div\n// // // //                                     key={message.id}\n// // // //                                     className={`p-4 max-w-max rounded shadow ${\n// // // //                                         message.from_user_id === userId\n// // // //                                             ? 'bg-blue-200 self-end'\n// // // //                                             : 'bg-white self-start'\n// // // //                                     }`}\n// // // //                                 >\n// // // //                                     <p>{message.content}</p>\n// // // //                                     {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\n// // // //                                         <button\n// // // //                                             onClick={() => {\n// // // //                                                 handleDeleteMessage(message.id);\n// // // //                                                 setMessages((prevMessages) =>\n// // // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// // // //                                                 );\n// // // //                                             }}\n// // // //                                             className=\"text-red-500\"\n// // // //                                         >\n// // // //                                             Delete\n// // // //                                         </button>\n// // // //                                     )}\n// // // //                                 </div>\n// // // //                             ))\n// // // //                         ) : (\n// // // //                             <p>No messages yet.</p>\n// // // //                         )}\n// // // //                         <div ref={messageEndRef} />\n// // // //                     </div>\n// // // //                 </div>\n\n// // // //                 <div className=\"flex mt-4\">\n// // // //                     <input\n// // // //                         type=\"text\"\n// // // //                         value={messageText}\n// // // //                         onChange={(e) => setMessageText(e.target.value)}\n// // // //                         placeholder=\"Type your message...\"\n// // // //                         className=\"w-full px-3 py-2 border rounded\"\n// // // //                     />\n// // // //                     <button\n// // // //                         onClick={() => {\n// // // //                             handleSendMessage();\n// // // //                             setMessages((prevMessages) => [\n// // // //                                 ...prevMessages,\n// // // //                                 {\n// // // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// // // //                                     content: messageText,\n// // // //                                     from_user_id: userId,\n// // // //                                     created_at: new Date().toISOString(),\n// // // //                                 },\n// // // //                             ]);\n// // // //                         }}\n// // // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// // // //                     >\n// // // //                         Send\n// // // //                         <svg\n// // // //                             className=\"w-5 h-5\"\n// // // //                             stroke=\"currentColor\"\n// // // //                             strokeWidth=\"1.5\"\n// // // //                             viewBox=\"0 0 24 24\"\n// // // //                             fill=\"none\"\n// // // //                             xmlns=\"http://www.w3.org/2000/svg\"\n// // // //                         >\n// // // //                             <path\n// // // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// // // //                                 strokeLinejoin=\"round\"\n// // // //                                 strokeLinecap=\"round\"\n// // // //                             ></path>\n// // // //                         </svg>\n// // // //                     </button>\n// // // //                 </div>\n// // // //             </div>\n// // // //         </div>\n// // // //     );\n// // // // };\n\n// // // // export default ChatPage;\n\n// // // import React, { useState, useEffect, useRef } from 'react';\n// // // import { useNavigate, useParams } from 'react-router-dom';\n// // // import { io } from 'socket.io-client';\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// // // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// // // import 'webrtc-adapter';\n\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // const ChatPage = () => {\n// // //     const [messages, setMessages] = useState([]);\n// // //     const [messageText, setMessageText] = useState('');\n// // //     const [reactions, setReactions] = useState({});\n// // //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n// // //     const messageEndRef = useRef(null);\n// // //     const navigate = useNavigate();\n// // //     const { receiverId } = useParams();\n\n// // //     const userId = localStorage.getItem('userId');\n// // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // //     useEffect(() => {\n// // //         if (!receiverId) return;\n\n// // //         socket.on('connect', () => {\n// // //             console.log('Connected to socket server');\n// // //         });\n\n// // //         socket.on('disconnect', () => {\n// // //             console.log('Disconnected from socket server');\n// // //         });\n\n// // //         const fetchMessages = async () => {\n// // //             const receiverId = localStorage.getItem('userId');\n// // //             const senderId = localStorage.getItem('touserId');\n// // //             try {\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // //                 const result = await response.json();\n// // //                 if (Array.isArray(result.messages)) {\n// // //                     setMessages(result.messages);\n// // //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n// // //                 } else {\n// // //                     throw new Error('Unexpected response format');\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('Failed to fetch messages:', error);\n// // //             }\n// // //         };\n\n// // //         const fetchReactions = async (messageIds) => {\n// // //             try {\n// // //                 const response = await fetch('http://localhost:3001/getReactions', {\n// // //                     method: 'POST',\n// // //                     headers: {\n// // //                         'Content-Type': 'application/json',\n// // //                     },\n// // //                     body: JSON.stringify({ messageIds }),\n// // //                 });\n// // //                 const result = await response.json();\n// // //                 setReactions(result.reactions);\n// // //             } catch (error) {\n// // //                 console.error('Failed to fetch reactions:', error);\n// // //             }\n// // //         };\n\n// // //         fetchMessages();\n\n// // //         socket.emit('joinRoom', receiverId);\n\n// // //         socket.on('message', (message) => {\n// // //             console.log('Received message:', message);\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // //         });\n\n// // //         socket.on('messageDeleted', (messageId) => {\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // //         });\n\n// // //         socket.on('reaction', (reaction) => {\n// // //             setReactions((prevReactions) => {\n// // //                 const updatedReactions = { ...prevReactions };\n// // //                 if (!updatedReactions[reaction.messageId]) {\n// // //                     updatedReactions[reaction.messageId] = [];\n// // //                 }\n// // //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n// // //                     (r) => r.userId !== reaction.userId\n// // //                 );\n// // //                 updatedReactions[reaction.messageId].push(reaction);\n// // //                 return updatedReactions;\n// // //             });\n// // //         });\n\n// // //         return () => {\n// // //             socket.off('connect');\n// // //             socket.off('disconnect');\n// // //             socket.off('message');\n// // //             socket.off('messageDeleted');\n// // //             socket.off('reaction');\n// // //         };\n// // //     }, [receiverId, userId]);\n\n// // //     const handleSendMessage = async () => {\n// // //         if (messageText.trim()) {\n// // //             try {\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // //                     method: 'POST',\n// // //                     headers: {\n// // //                         'Content-Type': 'application/json',\n// // //                     },\n// // //                     body: JSON.stringify({\n// // //                         senderId: userId,\n// // //                         receiverId: storedToUserId,\n// // //                         text: messageText,\n// // //                     }),\n// // //                 });\n// // //                 const result = await response.json();\n// // //                 if (response.ok) {\n// // //                     setMessageText(''); // Clear the input box\n// // //                 } else {\n// // //                     console.error('SendMessage Error:', result.message);\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('SendMessage Fetch Error:', error);\n// // //             }\n// // //         }\n// // //     };\n\n// // //     const handleDeleteMessage = async (messageId) => {\n// // //         try {\n// // //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// // //                 method: 'POST',\n// // //                 headers: {\n// // //                     'Content-Type': 'application/json',\n// // //                 },\n// // //                 body: JSON.stringify({ messageId }),\n// // //             });\n// // //             const result = await response.json();\n// // //             if (response.ok) {\n// // //                 // Optionally, you can provide user feedback here\n// // //             } else {\n// // //                 console.error('DeleteMessage Error:', result.message);\n// // //             }\n// // //         } catch (error) {\n// // //             console.error('DeleteMessage Fetch Error:', error);\n// // //         }\n// // //     };\n\n// // //     // const handleAddReaction = async (messageId, reactionType) => {\n// // //     //     try {\n// // //     //         await fetch('http://localhost:3001/addReaction', {\n// // //     //             method: 'POST',\n// // //     //             headers: {\n// // //     //                 'Content-Type': 'application/json',\n// // //     //             },\n// // //     //             body: JSON.stringify({ messageId, userId, reactionType }),\n// // //     //         });\n// // //     //         socket.emit('reaction', { messageId, userId, reactionType });\n// // //     //     } catch (error) {\n// // //     //         console.error('AddReaction Fetch Error:', error);\n// // //     //     }\n// // //     // };\n// // //     const handleAddReaction = async (messageId, reactionType) => {\n// // //         try {\n// // //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n// // //                 method: 'POST',\n// // //                 headers: {\n// // //                     'Content-Type': 'application/json',\n// // //                 },\n// // //                 body: JSON.stringify({ messageId, userId, reactionType }),\n// // //             });\n\n// // //             if (response.ok) {\n// // //                 const result = await response.json();\n// // //                 console.log('Reaction added successfully:', result);\n// // //             } else {\n// // //                 const errorText = await response.text();\n// // //                 console.error('AddReaction Error:', errorText);\n// // //             }\n// // //         } catch (error) {\n// // //             console.error('AddReaction Fetch Error:', error);\n// // //         }\n// // //     };\n\n// // //     const isMessageDeletable = (createdAt) => {\n// // //         const messageTime = new Date(createdAt);\n// // //         const currentTime = new Date();\n// // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// // //         return diffMinutes <= 2;\n// // //     };\n\n// // //     const handleBack = () => {\n// // //         navigate('/home');\n// // //     };\n\n// // //     const handleCallUser = () => {\n// // //         console.log('Calling user:', receiverId);\n// // //     };\n\n// // //     return (\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // //             <div className=\"flex items-center mb-4\">\n// // //                 <img\n// // //                     src={defaultAvatar}\n// // //                     alt=\"Avatar\"\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // //                 />\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // //             </div>\n\n// // //             <button\n// // //                 onClick={handleBack}\n// // //                 type=\"button\"\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // //             >\n// // //                 <div\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // //                 >\n// // //                     <svg\n// // //                         width=\"25px\"\n// // //                         height=\"25px\"\n// // //                         viewBox=\"0 0 1024 1024\"\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // //                     >\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // //                         ></path>\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // //                         ></path>\n// // //                     </svg>\n// // //                 </div>\n// // //                 <p className=\"translate-x-2\">Go Back</p>\n// // //             </button>\n\n// // //             <div className=\"flex justify-end mb-4\">\n// // //                 <button\n// // //                     onClick={handleCallUser}\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // //                 >\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //                 <button\n// // //                     onClick={handleCallUser}\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // //                 >\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //             </div>\n\n// // //             <div className=\"flex flex-col flex-grow\">\n// // //                 {/* Fixed Size Message Container */}\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// // //                     <div className=\"flex flex-col gap-2\">\n// // //                         {messages.length > 0 ? (\n// // //                             messages.map((message) => (\n// // //                                 <div\n// // //                                     key={message.id}\n// // //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n// // //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n// // //                                     onMouseLeave={() => setHoveredMessageId(null)}\n// // //                                 >\n// // //                                     <div className=\"text-sm\">{message.content}</div>\n// // //                                     {hoveredMessageId === message.id && (\n// // //                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\n// // //                                             {['👍', '❤️', '😂'].map((reaction) => (\n// // //                                                 <button\n// // //                                                     key={reaction}\n// // //                                                     onClick={() => handleAddReaction(message.id, reaction)}\n// // //                                                     className=\"text-xl\"\n// // //                                                 >\n// // //                                                     {reaction}\n// // //                                                 </button>\n// // //                                             ))}\n// // //                                         </div>\n// // //                                     )}\n// // //                                     <div className=\"flex space-x-2\">\n// // //                                         {reactions[message.id]?.map((reaction, index) => (\n// // //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n// // //                                         ))}\n// // //                                     </div>\n// // //                                     {isMessageDeletable(message.created_at) && (\n// // //                                         <button\n// // //                                             onClick={() => {\n// // //                                                 handleDeleteMessage(message.id);\n// // //                                                 setMessages((prevMessages) =>\n// // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// // //                                                 );\n// // //                                             }}\n// // //                                             className=\"text-red-500 absolute top-2 right-2\"\n// // //                                         >\n// // //                                             Delete\n// // //                                         </button>\n// // //                                     )}\n// // //                                 </div>\n// // //                             ))\n// // //                         ) : (\n// // //                             <p>No messages yet.</p>\n// // //                         )}\n// // //                         <div ref={messageEndRef} />\n// // //                     </div>\n// // //                 </div>\n\n// // //                 <div className=\"flex mt-4\">\n// // //                     <input\n// // //                         type=\"text\"\n// // //                         value={messageText}\n// // //                         onChange={(e) => setMessageText(e.target.value)}\n// // //                         placeholder=\"Type your message...\"\n// // //                         className=\"w-full px-3 py-2 border rounded\"\n// // //                     />\n// // //                     <button\n// // //                         onClick={() => {\n// // //                             handleSendMessage();\n// // //                             setMessages((prevMessages) => [\n// // //                                 ...prevMessages,\n// // //                                 {\n// // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// // //                                     content: messageText,\n// // //                                     from_user_id: userId,\n// // //                                     created_at: new Date().toISOString(),\n// // //                                 },\n// // //                             ]);\n// // //                         }}\n// // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// // //                     >\n// // //                         Send\n// // //                         <svg\n// // //                             className=\"w-5 h-5\"\n// // //                             stroke=\"currentColor\"\n// // //                             strokeWidth=\"1.5\"\n// // //                             viewBox=\"0 0 24 24\"\n// // //                             fill=\"none\"\n// // //                             xmlns=\"http://www.w3.org/2000/svg\"\n// // //                         >\n// // //                             <path\n// // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// // //                                 strokeLinejoin=\"round\"\n// // //                                 strokeLinecap=\"round\"\n// // //                             ></path>\n// // //                         </svg>\n// // //                     </button>\n// // //                 </div>\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default ChatPage;\n\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { useNavigate, useParams } from 'react-router-dom';\n// // import { io } from 'socket.io-client';\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// // import 'webrtc-adapter';\n\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // const ChatPage = () => {\n// //     const [messages, setMessages] = useState([]);\n// //     const [messageText, setMessageText] = useState('');\n// //     const [reactions, setReactions] = useState({});\n// //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n// //     const messageEndRef = useRef(null);\n// //     const navigate = useNavigate();\n// //     const { receiverId } = useParams();\n\n// //     const userId = localStorage.getItem('userId');\n// //     const storedToUserId = localStorage.getItem('touserId');\n// //     const [localStream, setLocalStream] = useState(null);\n// //     const [remoteStream, setRemoteStream] = useState(null);\n// //     const [peerConnection, setPeerConnection] = useState(null);\n\n// //     useEffect(() => {\n// //         if (!receiverId) return;\n\n// //         socket.on('connect', () => {\n// //             console.log('Connected to socket server');\n// //         });\n\n// //         socket.on('disconnect', () => {\n// //             console.log('Disconnected from socket server');\n// //         });\n\n// //         const fetchMessages = async () => {\n// //             const receiverId = localStorage.getItem('userId');\n// //             const senderId = localStorage.getItem('touserId');\n// //             try {\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// //                 const result = await response.json();\n// //                 if (Array.isArray(result.messages)) {\n// //                     setMessages(result.messages);\n// //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n// //                 } else {\n// //                     throw new Error('Unexpected response format');\n// //                 }\n// //             } catch (error) {\n// //                 console.error('Failed to fetch messages:', error);\n// //             }\n// //         };\n\n// //         const fetchReactions = async (messageIds) => {\n// //             try {\n// //                 const response = await fetch('http://localhost:3001/getReactions', {\n// //                     method: 'POST',\n// //                     headers: {\n// //                         'Content-Type': 'application/json',\n// //                     },\n// //                     body: JSON.stringify({ messageIds }),\n// //                 });\n// //                 const result = await response.json();\n// //                 setReactions(result.reactions);\n// //             } catch (error) {\n// //                 console.error('Failed to fetch reactions:', error);\n// //             }\n// //         };\n\n// //         fetchMessages();\n\n// //         socket.emit('joinRoom', receiverId);\n\n// //         socket.on('message', (message) => {\n// //             console.log('Received message:', message);\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //         });\n\n// //         socket.on('messageDeleted', (messageId) => {\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// //         });\n\n// //         socket.on('reaction', (reaction) => {\n// //             setReactions((prevReactions) => {\n// //                 const updatedReactions = { ...prevReactions };\n// //                 if (!updatedReactions[reaction.messageId]) {\n// //                     updatedReactions[reaction.messageId] = [];\n// //                 }\n// //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n// //                     (r) => r.userId !== reaction.userId\n// //                 );\n// //                 updatedReactions[reaction.messageId].push(reaction);\n// //                 return updatedReactions;\n// //             });\n// //         });\n\n// //         // WebRTC setup\n// //         const setupWebRTC = async () => {\n// //             const pc = new RTCPeerConnection();\n// //             setPeerConnection(pc);\n\n// //             // Handle incoming remote stream\n// //             pc.ontrack = (event) => {\n// //                 setRemoteStream(event.streams[0]);\n// //             };\n\n// //             // Handle ICE candidates\n// //             pc.onicecandidate = (event) => {\n// //                 if (event.candidate) {\n// //                     socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\n// //                 }\n// //             };\n\n// //             // Get local media\n// //             try {\n// //                 const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n// //                 setLocalStream(stream);\n// //                 stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n// //             } catch (error) {\n// //                 console.error('Error getting local media:', error);\n// //             }\n\n// //             // Handle incoming offer\n// //             socket.on('callOffer', async (offer) => {\n// //                 await pc.setRemoteDescription(new RTCSessionDescription(offer));\n// //                 const answer = await pc.createAnswer();\n// //                 await pc.setLocalDescription(answer);\n// //                 socket.emit('callAnswer', { answer, to: receiverId });\n// //             });\n\n// //             // Handle incoming answer\n// //             socket.on('callAnswer', async (answer) => {\n// //                 await pc.setRemoteDescription(new RTCSessionDescription(answer));\n// //             });\n\n// //             // Handle incoming ICE candidates\n// //             socket.on('iceCandidate', async (candidate) => {\n// //                 try {\n// //                     await pc.addIceCandidate(new RTCIceCandidate(candidate));\n// //                 } catch (error) {\n// //                     console.error('Error adding ICE candidate:', error);\n// //                 }\n// //             });\n// //         };\n\n// //         setupWebRTC();\n\n// //         return () => {\n// //             socket.off('connect');\n// //             socket.off('disconnect');\n// //             socket.off('message');\n// //             socket.off('messageDeleted');\n// //             socket.off('reaction');\n// //             socket.off('callOffer');\n// //             socket.off('callAnswer');\n// //             socket.off('iceCandidate');\n// //             if (peerConnection) {\n// //                 peerConnection.close();\n// //             }\n// //             if (localStream) {\n// //                 localStream.getTracks().forEach(track => track.stop());\n// //             }\n// //         };\n// //     }, [receiverId, userId]);\n\n// //     const handleSendMessage = async () => {\n// //         if (messageText.trim()) {\n// //             try {\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// //                     method: 'POST',\n// //                     headers: {\n// //                         'Content-Type': 'application/json',\n// //                     },\n// //                     body: JSON.stringify({\n// //                         senderId: userId,\n// //                         receiverId: storedToUserId,\n// //                         text: messageText,\n// //                     }),\n// //                 });\n// //                 const result = await response.json();\n// //                 if (response.ok) {\n// //                     setMessageText(''); // Clear the input box\n// //                 } else {\n// //                     console.error('SendMessage Error:', result.message);\n// //                 }\n// //             } catch (error) {\n// //                 console.error('SendMessage Fetch Error:', error);\n// //             }\n// //         }\n// //     };\n\n// //     const handleDeleteMessage = async (messageId) => {\n// //         try {\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// //                 method: 'POST',\n// //                 headers: {\n// //                     'Content-Type': 'application/json',\n// //                 },\n// //                 body: JSON.stringify({ messageId }),\n// //             });\n// //             const result = await response.json();\n// //             if (response.ok) {\n// //                 // Optionally, you can provide user feedback here\n// //             } else {\n// //                 console.error('DeleteMessage Error:', result.message);\n// //             }\n// //         } catch (error) {\n// //             console.error('DeleteMessage Fetch Error:', error);\n// //         }\n// //     };\n\n// //     const handleAddReaction = async (messageId, reactionType) => {\n// //         try {\n// //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n// //                 method: 'POST',\n// //                 headers: {\n// //                     'Content-Type': 'application/json',\n// //                 },\n// //                 body: JSON.stringify({ messageId, userId, reactionType }),\n// //             });\n\n// //             if (response.ok) {\n// //                 const result = await response.json();\n// //                 console.log('Reaction added successfully:', result);\n// //             } else {\n// //                 const errorText = await response.text();\n// //                 console.error('AddReaction Error:', errorText);\n// //             }\n// //         } catch (error) {\n// //             console.error('AddReaction Fetch Error:', error);\n// //         }\n// //     };\n\n// //     const isMessageDeletable = (createdAt) => {\n// //         const messageTime = new Date(createdAt);\n// //         const currentTime = new Date();\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// //         return diffMinutes <= 2;\n// //     };\n\n// //     const handleBack = () => {\n// //         navigate('/home');\n// //     };\n\n// //     const handleCallUser = (callType) => {\n// //         console.log('Calling user:', receiverId, 'Type:', callType);\n\n// //         if (peerConnection) {\n// //             peerConnection.createOffer().then(offer => {\n// //                 peerConnection.setLocalDescription(offer).then(() => {\n// //                     socket.emit('callOffer', { offer, to: receiverId });\n// //                 });\n// //             }).catch(error => {\n// //                 console.error('Error creating offer:', error);\n// //             });\n// //         }\n// //     };\n\n// //     return (\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// //             <div className=\"flex items-center mb-4\">\n// //                 <img\n// //                     src={defaultAvatar}\n// //                     alt=\"Avatar\"\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// //                 />\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// //             </div>\n\n// //             <button\n// //                 onClick={handleBack}\n// //                 type=\"button\"\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// //             >\n// //                 <div\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// //                 >\n// //                     <svg\n// //                         width=\"25px\"\n// //                         height=\"25px\"\n// //                         viewBox=\"0 0 1024 1024\"\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\n// //                     >\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// //                         ></path>\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// //                         ></path>\n// //                     </svg>\n// //                 </div>\n// //                 <p className=\"translate-x-2\">Go Back</p>\n// //             </button>\n\n// //             <div className=\"flex justify-end mb-4\">\n// //                 <button\n// //                     onClick={() => handleCallUser('voice')}\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// //                 >\n// //                     <PhoneIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //                 <button\n// //                     onClick={() => handleCallUser('video')}\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// //                 >\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //             </div>\n\n// //             {localStream && (\n// //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n// //                     <video\n// //                         autoPlay\n// //                         muted\n// //                         ref={(video) => {\n// //                             if (video) {\n// //                                 video.srcObject = localStream;\n// //                             }\n// //                         }}\n// //                         className=\"w-full h-full object-cover\"\n// //                     />\n// //                 </div>\n// //             )}\n\n// // {remoteStream && (\n// //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n// //                     <video\n// //                         autoPlay\n// //                         ref={(video) => {\n// //                             if (video) {\n// //                                 video.srcObject = remoteStream;\n// //                             }\n// //                         }}\n// //                         className=\"w-full h-full object-cover\"\n// //                     />\n// //                 </div>\n// //             )}\n\n// //             <div className=\"flex flex-col flex-grow\">\n// //                 {/* Fixed Size Message Container */}\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// //                     <div className=\"flex flex-col gap-2\">\n// //                         {messages.length > 0 ? (\n// //                             messages.map((message) => (\n// //                                 <div\n// //                                     key={message.id}\n// //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n// //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n// //                                     onMouseLeave={() => setHoveredMessageId(null)}\n// //                                 >\n// //                                     <div className=\"text-sm\">{message.content}</div>\n// //                                     {hoveredMessageId === message.id && (\n// //                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\n// //                                             {['👍', '❤️', '😂'].map((reaction) => (\n// //                                                 <button\n// //                                                     key={reaction}\n// //                                                     onClick={() => handleAddReaction(message.id, reaction)}\n// //                                                     className=\"text-xl\"\n// //                                                 >\n// //                                                     {reaction}\n// //                                                 </button>\n// //                                             ))}\n// //                                         </div>\n// //                                     )}\n// //                                     <div className=\"flex space-x-2\">\n// //                                         {reactions[message.id]?.map((reaction, index) => (\n// //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n// //                                         ))}\n// //                                     </div>\n// //                                     {isMessageDeletable(message.created_at) && (\n// //                                         <button\n// //                                             onClick={() => {\n// //                                                 handleDeleteMessage(message.id);\n// //                                                 setMessages((prevMessages) =>\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// //                                                 );\n// //                                             }}\n// //                                             className=\"text-red-500 absolute top-2 right-2\"\n// //                                         >\n// //                                             Delete\n// //                                         </button>\n// //                                     )}\n// //                                 </div>\n// //                             ))\n// //                         ) : (\n// //                             <p>No messages yet.</p>\n// //                         )}\n// //                         <div ref={messageEndRef} />\n// //                     </div>\n// //                 </div>\n\n// //                 <div className=\"flex mt-4\">\n// //                     <input\n// //                         type=\"text\"\n// //                         value={messageText}\n// //                         onChange={(e) => setMessageText(e.target.value)}\n// //                         placeholder=\"Type your message...\"\n// //                         className=\"w-full px-3 py-2 border rounded\"\n// //                     />\n// //                     <button\n// //                         onClick={() => {\n// //                             handleSendMessage();\n// //                             setMessages((prevMessages) => [\n// //                                 ...prevMessages,\n// //                                 {\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// //                                     content: messageText,\n// //                                     from_user_id: userId,\n// //                                     created_at: new Date().toISOString(),\n// //                                 },\n// //                             ]);\n// //                         }}\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// //                     >\n// //                         Send\n// //                         <svg\n// //                             className=\"w-5 h-5\"\n// //                             stroke=\"currentColor\"\n// //                             strokeWidth=\"1.5\"\n// //                             viewBox=\"0 0 24 24\"\n// //                             fill=\"none\"\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\n// //                         >\n// //                             <path\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// //                                 strokeLinejoin=\"round\"\n// //                                 strokeLinecap=\"round\"\n// //                             ></path>\n// //                         </svg>\n// //                     </button>\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default ChatPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { io } from 'socket.io-client';\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// import 'webrtc-adapter';\n\n// const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// const ChatPage = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [messageText, setMessageText] = useState('');\n//     const [reactions, setReactions] = useState({});\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n//     const messageEndRef = useRef(null);\n//     const navigate = useNavigate();\n//     const { receiverId } = useParams();\n\n//     const userId = localStorage.getItem('userId');\n//     const storedToUserId = localStorage.getItem('touserId');\n//     const [localStream, setLocalStream] = useState(null);\n//     const [remoteStream, setRemoteStream] = useState(null);\n//     const [peerConnection, setPeerConnection] = useState(null);\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n\n//     useEffect(() => {\n//         if (!receiverId) return;\n\n//         socket.on('connect', () => {\n//             console.log('Connected to socket server');\n//         });\n\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from socket server');\n//         });\n\n//         const fetchMessages = async () => {\n//             const receiverId = localStorage.getItem('userId');\n//             const senderId = localStorage.getItem('touserId');\n//             try {\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n//                 const result = await response.json();\n//                 if (Array.isArray(result.messages)) {\n//                     setMessages(result.messages);\n//                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n//                 } else {\n//                     throw new Error('Unexpected response format');\n//                 }\n//             } catch (error) {\n//                 console.error('Failed to fetch messages:', error);\n//             }\n//         };\n\n//         const fetchReactions = async (messageIds) => {\n//             try {\n//                 const response = await fetch('http://localhost:3001/getReactions', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({ messageIds }),\n//                 });\n//                 const result = await response.json();\n//                 setReactions(result.reactions);\n//             } catch (error) {\n//                 console.error('Failed to fetch reactions:', error);\n//             }\n//         };\n\n//         fetchMessages();\n\n//         socket.emit('joinRoom', receiverId);\n\n//         socket.on('message', (message) => {\n//             console.log('Received message:', message);\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//         });\n\n//         socket.on('messageDeleted', (messageId) => {\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n//         });\n\n//         socket.on('reaction', (reaction) => {\n//             setReactions((prevReactions) => {\n//                 const updatedReactions = { ...prevReactions };\n//                 if (!updatedReactions[reaction.messageId]) {\n//                     updatedReactions[reaction.messageId] = [];\n//                 }\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n//                     (r) => r.userId !== reaction.userId\n//                 );\n//                 updatedReactions[reaction.messageId].push(reaction);\n//                 return updatedReactions;\n//             });\n//         });\n\n//         // WebRTC setup\n//         const setupWebRTC = async () => {\n//             const pc = new RTCPeerConnection();\n//             setPeerConnection(pc);\n\n//             // Handle incoming remote stream\n//             pc.ontrack = (event) => {\n//                 setRemoteStream(event.streams[0]);\n//             };\n\n//             // Handle ICE candidates\n//             pc.onicecandidate = (event) => {\n//                 if (event.candidate) {\n//                     socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\n//                 }\n//             };\n\n//             // Get local media\n//             try {\n//                 const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n//                 setLocalStream(stream);\n//                 stream.getTracks().forEach((track) => pc.addTrack(track, stream));\n//             } catch (error) {\n//                 console.error('Error getting local media:', error);\n//             }\n\n//             // Handle incoming offer\n//             socket.on('callOffer', async (offer) => {\n//                 await pc.setRemoteDescription(new RTCSessionDescription(offer));\n//                 const answer = await pc.createAnswer();\n//                 await pc.setLocalDescription(answer);\n//                 socket.emit('callAnswer', { answer, to: receiverId });\n//                 setIsCallActive(true); // Set call status to active\n//             });\n\n//             // Handle incoming answer\n//             socket.on('callAnswer', async (answer) => {\n//                 await pc.setRemoteDescription(new RTCSessionDescription(answer));\n//             });\n\n//             // Handle incoming ICE candidates\n//             socket.on('iceCandidate', async (candidate) => {\n//                 try {\n//                     await pc.addIceCandidate(new RTCIceCandidate(candidate));\n//                 } catch (error) {\n//                     console.error('Error adding ICE candidate:', error);\n//                 }\n//             });\n//         };\n\n//         setupWebRTC();\n\n//         return () => {\n//             socket.off('connect');\n//             socket.off('disconnect');\n//             socket.off('message');\n//             socket.off('messageDeleted');\n//             socket.off('reaction');\n//             socket.off('callOffer');\n//             socket.off('callAnswer');\n//             socket.off('iceCandidate');\n//             if (peerConnection) {\n//                 peerConnection.close();\n//             }\n//             if (localStream) {\n//                 localStream.getTracks().forEach(track => track.stop());\n//             }\n//         };\n//     }, [receiverId, userId]);\n\n//     const handleSendMessage = async () => {\n//         if (messageText.trim()) {\n//             try {\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({\n//                         senderId: userId,\n//                         receiverId: storedToUserId,\n//                         text: messageText,\n//                     }),\n//                 });\n//                 const result = await response.json();\n//                 if (response.ok) {\n//                     setMessageText(''); // Clear the input box\n//                 } else {\n//                     console.error('SendMessage Error:', result.message);\n//                 }\n//             } catch (error) {\n//                 console.error('SendMessage Fetch Error:', error);\n//             }\n//         }\n//     };\n\n//     const handleDeleteMessage = async (messageId) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId }),\n//             });\n//             const result = await response.json();\n//             if (response.ok) {\n//                 // Optionally, you can provide user feedback here\n//             } else {\n//                 console.error('DeleteMessage Error:', result.message);\n//             }\n//         } catch (error) {\n//             console.error('DeleteMessage Fetch Error:', error);\n//         }\n//     };\n\n//     const handleAddReaction = async (messageId, reactionType) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\n//             });\n\n//             if (response.ok) {\n//                 const result = await response.json();\n//                 console.log('Reaction added successfully:', result);\n//             } else {\n//                 const errorText = await response.text();\n//                 console.error('AddReaction Error:', errorText);\n//             }\n//         } catch (error) {\n//             console.error('AddReaction Fetch Error:', error);\n//         }\n//     };\n\n//     const isMessageDeletable = (createdAt) => {\n//         const messageTime = new Date(createdAt);\n//         const currentTime = new Date();\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n//         return diffMinutes <= 2;\n//     };\n\n//     const handleBack = () => {\n//         navigate('/home');\n//     };\n\n//     const handleCallUser = (callType) => {\n//         console.log('Calling user:', receiverId, 'Type:', callType);\n\n//         if (peerConnection) {\n//             peerConnection.createOffer().then(offer => {\n//                 peerConnection.setLocalDescription(offer).then(() => {\n//                     socket.emit('callOffer', { offer, to: receiverId });\n//                     setIsCallActive(true);\n//                 });\n//             }).catch(error => {\n//                 console.error('Error creating offer:', error);\n//             });\n//         }\n//     };\n\n//     const handleEndCall = () => {\n//         if (peerConnection) {\n//             peerConnection.close();\n//             setPeerConnection(null);\n//         }\n//         if (localStream) {\n//             localStream.getTracks().forEach(track => track.stop());\n//             setLocalStream(null);\n//         }\n//         if (remoteStream) {\n//             setRemoteStream(null);\n//         }\n//         setIsCallActive(false);\n//     socket.emit('callEnd', { to: receiverId });\n//         // socket.emit('callEnd', { to: receiverId });\n//     };\n\n//     return (\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n//             <div className=\"flex items-center mb-4\">\n//                 <img\n//                     src={defaultAvatar}\n//                     alt=\"Avatar\"\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n//                 />\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n//             </div>\n\n//             <button\n//                 onClick={handleBack}\n//                 type=\"button\"\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n//             >\n//                 <div\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n//                 >\n//                     <svg\n//                         width=\"25px\"\n//                         height=\"25px\"\n//                         viewBox=\"0 0 1024 1024\"\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                     >\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n//                         ></path>\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n//                         ></path>\n//                     </svg>\n//                 </div>\n//                 <p className=\"translate-x-2\">Go Back</p>\n//             </button>\n\n//             <div className=\"flex justify-end mb-4\">\n//                 <button\n//                     onClick={() => handleCallUser('voice')}\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n//                 >\n//                     <PhoneIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 <button\n//                     onClick={() => handleCallUser('video')}\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n//                 >\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 {isCallActive && (\n//         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\n//             End Call\n//         </button>\n//     )}\n//             </div>\n\n//             {localStream && (\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         muted\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = localStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n// {remoteStream && (\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\n//                     <video\n//                         autoPlay\n//                         ref={(video) => {\n//                             if (video) {\n//                                 video.srcObject = remoteStream;\n//                             }\n//                         }}\n//                         className=\"w-full h-full object-cover\"\n//                     />\n//                 </div>\n//             )}\n\n//             <div className=\"flex flex-col flex-grow\">\n//                 {/* Fixed Size Message Container */}\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n//                     <div className=\"flex flex-col gap-2\">\n//                         {messages.length > 0 ? (\n//                             messages.map((message) => (\n//                                 <div\n//                                     key={message.id}\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\n//                                 >\n//                                     <div className=\"text-sm\">{message.content}</div>\n//                                     {hoveredMessageId === message.id && (\n//                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\n//                                                 <button\n//                                                     key={reaction}\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\n//                                                     className=\"text-xl\"\n//                                                 >\n//                                                     {reaction}\n//                                                 </button>\n//                                             ))}\n//                                         </div>\n//                                     )}\n//                                     <div className=\"flex space-x-2\">\n//                                         {reactions[message.id]?.map((reaction, index) => (\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n//                                         ))}\n//                                     </div>\n//                                     {isMessageDeletable(message.created_at) && (\n//                                         <button\n//                                             onClick={() => {\n//                                                 handleDeleteMessage(message.id);\n//                                                 setMessages((prevMessages) =>\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\n//                                                 );\n//                                             }}\n//                                             className=\"text-red-500 absolute top-2 right-2\"\n//                                         >\n//                                             Delete\n//                                         </button>\n//                                     )}\n//                                 </div>\n//                             ))\n//                         ) : (\n//                             <p>No messages yet.</p>\n//                         )}\n//                         <div ref={messageEndRef} />\n//                     </div>\n//                 </div>\n\n//                 <div className=\"flex mt-4\">\n//                     <input\n//                         type=\"text\"\n//                         value={messageText}\n//                         onChange={(e) => setMessageText(e.target.value)}\n//                         placeholder=\"Type your message...\"\n//                         className=\"w-full px-3 py-2 border rounded\"\n//                     />\n//                     <button\n//                         onClick={() => {\n//                             handleSendMessage();\n//                             setMessages((prevMessages) => [\n//                                 ...prevMessages,\n//                                 {\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n//                                     content: messageText,\n//                                     from_user_id: userId,\n//                                     created_at: new Date().toISOString(),\n//                                 },\n//                             ]);\n//                         }}\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n//                     >\n//                         Send\n//                         <svg\n//                             className=\"w-5 h-5\"\n//                             stroke=\"currentColor\"\n//                             strokeWidth=\"1.5\"\n//                             viewBox=\"0 0 24 24\"\n//                             fill=\"none\"\n//                             xmlns=\"http://www.w3.org/2000/svg\"\n//                         >\n//                             <path\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n//                                 strokeLinejoin=\"round\"\n//                                 strokeLinecap=\"round\"\n//                             ></path>\n//                         </svg>\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ChatPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n//This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\nimport 'webrtc-adapter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001'); // Replace with your server URL\n\nconst ChatPage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageText, setMessageText] = useState('');\n  const [reactions, setReactions] = useState({});\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const messageEndRef = useRef(null);\n  const navigate = useNavigate();\n  const {\n    receiverId\n  } = useParams();\n  const userId = localStorage.getItem('userId');\n  const storedToUserId = localStorage.getItem('touserId');\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [peerConnection, setPeerConnection] = useState(null);\n  const [isCallActive, setIsCallActive] = useState(false); // New state for call status\n\n  useEffect(() => {\n    if (!receiverId) return;\n    socket.on('connect', () => {\n      console.log('Connected to socket server');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n    });\n    const fetchMessages = async () => {\n      const receiverId = localStorage.getItem('userId');\n      const senderId = localStorage.getItem('touserId');\n      try {\n        const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n        const result = await response.json();\n        if (Array.isArray(result.messages)) {\n          setMessages(result.messages);\n          fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n        } else {\n          throw new Error('Unexpected response format');\n        }\n      } catch (error) {\n        console.error('Failed to fetch messages:', error);\n      }\n    };\n    const fetchReactions = async messageIds => {\n      try {\n        const response = await fetch('http://localhost:3001/getReactions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messageIds\n          })\n        });\n        const result = await response.json();\n        setReactions(result.reactions);\n      } catch (error) {\n        console.error('Failed to fetch reactions:', error);\n      }\n    };\n    fetchMessages();\n    socket.emit('joinRoom', receiverId);\n    socket.on('message', message => {\n      var _messageEndRef$curren;\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n      (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n    socket.on('messageDeleted', messageId => {\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n    });\n    socket.on('reaction', reaction => {\n      setReactions(prevReactions => {\n        const updatedReactions = {\n          ...prevReactions\n        };\n        if (!updatedReactions[reaction.messageId]) {\n          updatedReactions[reaction.messageId] = [];\n        }\n        updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(r => r.userId !== reaction.userId);\n        updatedReactions[reaction.messageId].push(reaction);\n        return updatedReactions;\n      });\n    });\n    socket.on('callOffer', async offer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        socket.emit('callAnswer', {\n          answer,\n          to: receiverId\n        });\n        setIsCallActive(true);\n      }\n    });\n\n    // Handle incoming answer\n    socket.on('callAnswer', async answer => {\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    });\n\n    // Handle incoming ICE candidates\n    socket.on('iceCandidate', async candidate => {\n      if (peerConnection) {\n        try {\n          await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n        } catch (error) {\n          console.error('Error adding ICE candidate:', error);\n        }\n      }\n    });\n    // };\n\n    // setupWebRTC();\n\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('message');\n      socket.off('messageDeleted');\n      socket.off('reaction');\n      socket.off('callOffer');\n      socket.off('callAnswer');\n      socket.off('iceCandidate');\n      if (peerConnection) {\n        peerConnection.close();\n      }\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [receiverId, userId, peerConnection, localStream]);\n  const setupWebRTC = async () => {\n    const pc = new RTCPeerConnection();\n    setPeerConnection(pc);\n\n    // Handle incoming remote stream\n    pc.ontrack = event => {\n      setRemoteStream(event.streams[0]);\n    };\n\n    // Handle ICE candidates\n    pc.onicecandidate = event => {\n      if (event.candidate) {\n        socket.emit('iceCandidate', {\n          candidate: event.candidate,\n          to: receiverId\n        });\n      }\n    };\n\n    // Get local media\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      setLocalStream(stream);\n      stream.getTracks().forEach(track => pc.addTrack(track, stream));\n    } catch (error) {\n      console.error('Error getting local media:', error);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (messageText.trim()) {\n      try {\n        const response = await fetch('http://localhost:3001/sendMessage', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            senderId: userId,\n            receiverId: storedToUserId,\n            text: messageText\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          setMessageText(''); // Clear the input box\n        } else {\n          console.error('SendMessage Error:', result.message);\n        }\n      } catch (error) {\n        console.error('SendMessage Fetch Error:', error);\n      }\n    }\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      const response = await fetch('http://localhost:3001/deleteMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        // Optionally, you can provide user feedback here\n      } else {\n        console.error('DeleteMessage Error:', result.message);\n      }\n    } catch (error) {\n      console.error('DeleteMessage Fetch Error:', error);\n    }\n  };\n  const handleAddReaction = async (messageId, reactionType) => {\n    try {\n      const response = await fetch('http://localhost:3001/addReaction', {\n        // Ensure this URL is correct\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId,\n          userId,\n          reactionType\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Reaction added successfully:', result);\n      } else {\n        const errorText = await response.text();\n        console.error('AddReaction Error:', errorText);\n      }\n    } catch (error) {\n      console.error('AddReaction Fetch Error:', error);\n    }\n  };\n  const isMessageDeletable = createdAt => {\n    const messageTime = new Date(createdAt);\n    const currentTime = new Date();\n    const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n    return diffMinutes <= 2;\n  };\n  const handleBack = () => {\n    navigate('/home');\n  };\n  const handleCallUser = async callType => {\n    console.log('Calling user:', receiverId, 'Type:', callType);\n    if (!peerConnection || peerConnection.signalingState === 'closed') {\n      await setupWebRTC(); // Set up WebRTC and get local media stream\n    }\n    if (peerConnection) {\n      try {\n        const offer = await peerConnection.createOffer();\n        await peerConnection.setLocalDescription(offer);\n        socket.emit('callOffer', {\n          offer,\n          to: receiverId\n        });\n        setIsCallActive(true);\n      } catch (error) {\n        console.error('Error creating offer:', error);\n      }\n    }\n  };\n  const handleEndCall = () => {\n    if (peerConnection) {\n      peerConnection.close();\n      setPeerConnection(null);\n    }\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n      setLocalStream(null);\n    }\n    if (remoteStream) {\n      setRemoteStream(null);\n    }\n    setIsCallActive(false);\n    socket.emit('callEnd', {\n      to: receiverId\n    });\n    // socket.emit('callEnd', { to: receiverId });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: defaultAvatar,\n        alt: \"Avatar\",\n        className: \"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2536,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2541,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2535,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      type: \"button\",\n      className: \"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"25px\",\n          height: \"25px\",\n          viewBox: \"0 0 1024 1024\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2558,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2562,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2552,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2549,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"translate-x-2\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2568,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2544,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCallUser('voice'),\n        className: \"bg-green-500 text-white py-2 px-4 rounded mr-2\",\n        children: /*#__PURE__*/_jsxDEV(PhoneIcon, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2576,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2572,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCallUser('video'),\n        className: \"bg-blue-500 text-white py-2 px-4 rounded\",\n        children: /*#__PURE__*/_jsxDEV(VideoCameraIcon, {\n          className: \"w-6 h-6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2582,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2578,\n        columnNumber: 17\n      }, this), isCallActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndCall,\n        className: \"p-2 text-red-500\",\n        children: \"End Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2585,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2571,\n      columnNumber: 13\n    }, this), localStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        muted: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = localStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2593,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2592,\n      columnNumber: 17\n    }, this), remoteStream && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        ref: video => {\n          if (video) {\n            video.srcObject = remoteStream;\n          }\n        },\n        className: \"w-full h-full object-cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2608,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2607,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-grow\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col gap-2\",\n          children: [messages.length > 0 ? messages.map(message => {\n            var _reactions$message$id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`,\n              onMouseEnter: () => setHoveredMessageId(message.id),\n              onMouseLeave: () => setHoveredMessageId(null),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm\",\n                children: message.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2633,\n                columnNumber: 37\n              }, this), hoveredMessageId === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"absolute bottom-2 right-2 flex space-x-1\",\n                children: ['👍', '❤️', '😂'].map(reaction => /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleAddReaction(message.id, reaction),\n                  className: \"text-xl\",\n                  children: reaction\n                }, reaction, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2637,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2635,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex space-x-2\",\n                children: (_reactions$message$id = reactions[message.id]) === null || _reactions$message$id === void 0 ? void 0 : _reactions$message$id.map((reaction, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-xs\",\n                  children: reaction.reactionType\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2649,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2647,\n                columnNumber: 37\n              }, this), isMessageDeletable(message.created_at) && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  handleDeleteMessage(message.id);\n                  setMessages(prevMessages => prevMessages.filter(msg => msg.id !== message.id));\n                },\n                className: \"text-red-500 absolute top-2 right-2\",\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2653,\n                columnNumber: 41\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2627,\n              columnNumber: 33\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No messages yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2668,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messageEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2670,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2624,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2623,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: messageText,\n          onChange: e => setMessageText(e.target.value),\n          placeholder: \"Type your message...\",\n          className: \"w-full px-3 py-2 border rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2675,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleSendMessage();\n            setMessages(prevMessages => [...prevMessages, {\n              id: new Date().toISOString(),\n              // Temporary ID, should be replaced by server ID\n              content: messageText,\n              from_user_id: userId,\n              created_at: new Date().toISOString()\n            }]);\n          },\n          className: \"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\",\n          children: [\"Send\", /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"w-5 h-5\",\n            stroke: \"currentColor\",\n            strokeWidth: \"1.5\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\",\n              strokeLinejoin: \"round\",\n              strokeLinecap: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2706,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2698,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2682,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2674,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2621,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2534,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"HWT06gId9yU1Jt22fjXcnvDUNL8=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","io","defaultAvatar","PhoneIcon","VideoCameraIcon","jsxDEV","_jsxDEV","socket","ChatPage","_s","messages","setMessages","messageText","setMessageText","reactions","setReactions","hoveredMessageId","setHoveredMessageId","messageEndRef","navigate","receiverId","userId","localStorage","getItem","storedToUserId","localStream","setLocalStream","remoteStream","setRemoteStream","peerConnection","setPeerConnection","isCallActive","setIsCallActive","on","console","log","fetchMessages","senderId","response","fetch","result","json","Array","isArray","fetchReactions","map","msg","id","Error","error","messageIds","method","headers","body","JSON","stringify","emit","message","_messageEndRef$curren","prevMessages","current","scrollIntoView","behavior","messageId","filter","reaction","prevReactions","updatedReactions","r","push","offer","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","to","candidate","addIceCandidate","RTCIceCandidate","off","close","getTracks","forEach","track","stop","setupWebRTC","pc","RTCPeerConnection","ontrack","event","streams","onicecandidate","stream","navigator","mediaDevices","getUserMedia","audio","video","addTrack","handleSendMessage","trim","text","ok","handleDeleteMessage","handleAddReaction","reactionType","errorText","isMessageDeletable","createdAt","messageTime","Date","currentTime","diffMinutes","handleBack","handleCallUser","callType","signalingState","createOffer","handleEndCall","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","width","height","viewBox","xmlns","fill","d","autoPlay","muted","ref","srcObject","length","_reactions$message$id","from_user_id","onMouseEnter","onMouseLeave","content","index","created_at","value","onChange","e","target","placeholder","toISOString","stroke","strokeWidth","strokeLinejoin","strokeLinecap","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/Chatpage.js"],"sourcesContent":["// // // // // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // // // // import { io } from 'socket.io-client';\r\n// // // // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // // // // const ChatPage = () => {\r\n// // // // // // //     const [messages, setMessages] = useState([]);\r\n// // // // // // //     const [messageText, setMessageText] = useState('');\r\n// // // // // // //     const messageEndRef = useRef(null);\r\n// // // // // // //     const navigate = useNavigate();\r\n// // // // // // //     const { receiverId } = useParams();\r\n\r\n// // // // // // //     const userId = localStorage.getItem('userId');\r\n// // // // // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // // // // //     useEffect(() => {\r\n// // // // // // //         if (!receiverId) return;\r\n\r\n// // // // // // //         // Socket connection events\r\n// // // // // // //         socket.on('connect', () => {\r\n// // // // // // //             console.log('Connected to socket server');\r\n// // // // // // //         });\r\n\r\n// // // // // // //         socket.on('disconnect', () => {\r\n// // // // // // //             console.log('Disconnected from socket server');\r\n// // // // // // //         });\r\n\r\n// // // // // // //         // const fetchMessages = async () => {\r\n// // // // // // //         //     const receiverId = localStorage.getItem('userId');\r\n// // // // // // //         //     const senderId = localStorage.getItem('touserId');\r\n// // // // // // //         //     try {\r\n// // // // // // //         //         const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // // // //         //         const result = await response.json();\r\n// // // // // // //         //         console.log(\"result\"+result);\r\n// // // // // // //         //         if (Array.isArray(result.messages)) {\r\n// // // // // // //         //             setMessages(result.messages);\r\n// // // // // // //         //         } else {\r\n// // // // // // //         //             throw new Error('Unexpected response format');\r\n// // // // // // //         //         }\r\n// // // // // // //         //     } catch (error) {\r\n// // // // // // //         //         console.error('Failed to fetch messages:', error);\r\n// // // // // // //         //     }\r\n// // // // // // //         // };\r\n\r\n// // // // // // //         const fetchMessages = async () => {\r\n// // // // // // //             const receiverId = localStorage.getItem('userId');\r\n// // // // // // //             const senderId = localStorage.getItem('touserId');\r\n// // // // // // //             try {\r\n// // // // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // // // //                 console.log(\"Response:\", response); // Log the raw response object\r\n// // // // // // //                 const result = await response.json();\r\n// // // // // // //                 console.log(\"Result:\", result); // Log the JSON result\r\n// // // // // // //                 if (Array.isArray(result.messages)) {\r\n// // // // // // //                     setMessages(result.messages);\r\n// // // // // // //                 } else {\r\n// // // // // // //                     throw new Error('Unexpected response format');\r\n// // // // // // //                 }\r\n// // // // // // //             } catch (error) {\r\n// // // // // // //                 console.error('Failed to fetch messages:', error);\r\n// // // // // // //             }\r\n// // // // // // //         };\r\n        \r\n        \r\n        \r\n// // // // // // //         fetchMessages();\r\n\r\n// // // // // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // // // // //         socket.on('message', (message) => {\r\n// // // // // // //             console.log('Received message:', message); // Debug message\r\n// // // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // // // // //         });\r\n\r\n// // // // // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // // // // //         });\r\n\r\n// // // // // // //         return () => {\r\n// // // // // // //             socket.off('connect');\r\n// // // // // // //             socket.off('disconnect');\r\n// // // // // // //             socket.off('message');\r\n// // // // // // //             socket.off('messageDeleted');\r\n// // // // // // //         };\r\n// // // // // // //     }, [receiverId, userId]);\r\n\r\n// // // // // // //     const handleSendMessage = async () => {\r\n// // // // // // //         if (messageText.trim()) {\r\n// // // // // // //             try {\r\n// // // // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // // // // //                     method: 'POST',\r\n// // // // // // //                     headers: {\r\n// // // // // // //                         'Content-Type': 'application/json',\r\n// // // // // // //                     },\r\n// // // // // // //                     body: JSON.stringify({\r\n// // // // // // //                         senderId: userId,\r\n// // // // // // //                         receiverId: storedToUserId,\r\n// // // // // // //                         text: messageText,\r\n// // // // // // //                     }),\r\n// // // // // // //                 });\r\n// // // // // // //                 const result = await response.json();\r\n// // // // // // //                 if (response.ok) {\r\n// // // // // // //                     setMessageText(''); // Clear the input box\r\n// // // // // // //                 } else {\r\n// // // // // // //                     console.error('SendMessage Error:', result.message);\r\n// // // // // // //                 }\r\n// // // // // // //             } catch (error) {\r\n// // // // // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // // // // //             }\r\n// // // // // // //         }\r\n// // // // // // //     };\r\n\r\n// // // // // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // // // // //         try {\r\n// // // // // // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // // // // // //                 method: 'POST',\r\n// // // // // // //                 headers: {\r\n// // // // // // //                     'Content-Type': 'application/json',\r\n// // // // // // //                 },\r\n// // // // // // //                 body: JSON.stringify({ messageId }),\r\n// // // // // // //             });\r\n// // // // // // //         } catch (error) {\r\n// // // // // // //             console.error('DeleteMessage Error:', error);\r\n// // // // // // //         }\r\n// // // // // // //     };\r\n\r\n// // // // // // //     const handleBack = () => {\r\n// // // // // // //         navigate('/home');\r\n// // // // // // //     };\r\n\r\n// // // // // // //     const handleCallUser = () => {\r\n// // // // // // //         console.log('Calling user:', receiverId);\r\n// // // // // // //     };\r\n\r\n// // // // // // //     return (\r\n// // // // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // // // // //             <div className=\"flex items-center mb-4\">\r\n// // // // // // //                 <img\r\n// // // // // // //                     src={defaultAvatar}\r\n// // // // // // //                     alt=\"Avatar\"\r\n// // // // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // // // // //                 />\r\n// // // // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // // // // //             </div>\r\n\r\n// // // // // // //             <button\r\n// // // // // // //                 onClick={handleBack}\r\n// // // // // // //                 type=\"button\"\r\n// // // // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // // // // //             >\r\n// // // // // // //                 <div\r\n// // // // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // // // // //                 >\r\n// // // // // // //                     <svg\r\n// // // // // // //                         width=\"25px\"\r\n// // // // // // //                         height=\"25px\"\r\n// // // // // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // // // // //                     >\r\n// // // // // // //                         <path\r\n// // // // // // //                             fill=\"#000000\"\r\n// // // // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // // // // //                         ></path>\r\n// // // // // // //                         <path\r\n// // // // // // //                             fill=\"#000000\"\r\n// // // // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // // // // //                         ></path>\r\n// // // // // // //                     </svg>\r\n// // // // // // //                 </div>\r\n// // // // // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // // // // //             </button>\r\n\r\n// // // // // // //             <div className=\"flex justify-end mb-4\">\r\n// // // // // // //                 <button\r\n// // // // // // //                     onClick={handleCallUser}\r\n// // // // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // // // // //                 >\r\n// // // // // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // // // // //                 </button>\r\n// // // // // // //                 <button\r\n// // // // // // //                     onClick={handleCallUser}\r\n// // // // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // // // // //                 >\r\n// // // // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // // // // //                 </button>\r\n// // // // // // //             </div>\r\n\r\n// // // // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\r\n// // // // // // //                 <div className=\"flex-grow\">\r\n// // // // // // //                     {messages.length > 0 ? (\r\n// // // // // // //                         messages.map((message) => (\r\n// // // // // // //                             <div\r\n// // // // // // //                                 key={message.id}\r\n// // // // // // //                                 className={`p-4 mb-2 rounded shadow ${\r\n// // // // // // //                                     message.senderId === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\r\n// // // // // // //                                 }`}\r\n// // // // // // //                             >\r\n// // // // // // //                                 <p>{message.text}</p>\r\n// // // // // // //                                 {message.senderId === userId && (\r\n// // // // // // //                                     <button\r\n// // // // // // //                                         onClick={() => handleDeleteMessage(message.id)}\r\n// // // // // // //                                         className=\"text-red-500\"\r\n// // // // // // //                                     >\r\n// // // // // // //                                         Delete\r\n// // // // // // //                                     </button>\r\n// // // // // // //                                 )}\r\n// // // // // // //                             </div>\r\n// // // // // // //                         ))\r\n// // // // // // //                     ) : (\r\n// // // // // // //                         <p>No messages yet.</p>\r\n// // // // // // //                     )}\r\n// // // // // // //                     <div ref={messageEndRef} />\r\n// // // // // // //                 </div>\r\n// // // // // // //             </div>\r\n\r\n// // // // // // //             <div className=\"flex\">\r\n// // // // // // //                 <input\r\n// // // // // // //                     type=\"text\"\r\n// // // // // // //                     value={messageText}\r\n// // // // // // //                     onChange={(e) => setMessageText(e.target.value)}\r\n// // // // // // //                     placeholder=\"Type your message...\"\r\n// // // // // // //                     className=\"w-full px-3 py-2 border rounded\"\r\n// // // // // // //                 />\r\n// // // // // // //                 <button\r\n// // // // // // //                     onClick={handleSendMessage}\r\n// // // // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\r\n// // // // // // //                 >\r\n// // // // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\r\n// // // // // // //                 </button>\r\n// // // // // // //             </div>\r\n// // // // // // //         </div>\r\n// // // // // // //     );\r\n// // // // // // // };\r\n\r\n// // // // // // // export default ChatPage;\r\n\r\n\r\n// // // // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // // // import { io } from 'socket.io-client';\r\n// // // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // // // const ChatPage = () => {\r\n// // // // // //     const [messages, setMessages] = useState([]);\r\n// // // // // //     const [messageText, setMessageText] = useState('');\r\n// // // // // //     const messageEndRef = useRef(null);\r\n// // // // // //     const navigate = useNavigate();\r\n// // // // // //     const { receiverId } = useParams();\r\n\r\n// // // // // //     const userId = localStorage.getItem('userId');\r\n// // // // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // // // //     useEffect(() => {\r\n// // // // // //         if (!receiverId) return;\r\n\r\n// // // // // //         socket.on('connect', () => {\r\n// // // // // //             console.log('Connected to socket server');\r\n// // // // // //         });\r\n\r\n// // // // // //         socket.on('disconnect', () => {\r\n// // // // // //             console.log('Disconnected from socket server');\r\n// // // // // //         });\r\n\r\n// // // // // //         const fetchMessages = async () => {\r\n// // // // // //             const receiverId = localStorage.getItem('userId');\r\n// // // // // //             const senderId = localStorage.getItem('touserId');\r\n// // // // // //             try {\r\n// // // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // // //                 const result = await response.json();\r\n// // // // // //                 console.log(\"Result:\", result);\r\n// // // // // //                 if (Array.isArray(result.messages)) {\r\n// // // // // //                     setMessages(result.messages);\r\n// // // // // //                 } else {\r\n// // // // // //                     throw new Error('Unexpected response format');\r\n// // // // // //                 }\r\n// // // // // //             } catch (error) {\r\n// // // // // //                 console.error('Failed to fetch messages:', error);\r\n// // // // // //             }\r\n// // // // // //         };\r\n\r\n// // // // // //         fetchMessages();\r\n\r\n// // // // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // // // //         socket.on('message', (message) => {\r\n// // // // // //             console.log('Received message:', message); // Debug message\r\n// // // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // // // //         });\r\n\r\n// // // // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // // // //         });\r\n\r\n// // // // // //         return () => {\r\n// // // // // //             socket.off('connect');\r\n// // // // // //             socket.off('disconnect');\r\n// // // // // //             socket.off('message');\r\n// // // // // //             socket.off('messageDeleted');\r\n// // // // // //         };\r\n// // // // // //     }, [receiverId, userId]);\r\n\r\n// // // // // //     const handleSendMessage = async () => {\r\n// // // // // //         if (messageText.trim()) {\r\n// // // // // //             try {\r\n// // // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // // // //                     method: 'POST',\r\n// // // // // //                     headers: {\r\n// // // // // //                         'Content-Type': 'application/json',\r\n// // // // // //                     },\r\n// // // // // //                     body: JSON.stringify({\r\n// // // // // //                         senderId: userId,\r\n// // // // // //                         receiverId: storedToUserId,\r\n// // // // // //                         text: messageText,\r\n// // // // // //                     }),\r\n// // // // // //                 });\r\n// // // // // //                 const result = await response.json();\r\n// // // // // //                 if (response.ok) {\r\n// // // // // //                     setMessageText(''); // Clear the input box\r\n// // // // // //                 } else {\r\n// // // // // //                     console.error('SendMessage Error:', result.message);\r\n// // // // // //                 }\r\n// // // // // //             } catch (error) {\r\n// // // // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // // // //             }\r\n// // // // // //         }\r\n// // // // // //     };\r\n\r\n// // // // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // // // //         try {\r\n// // // // // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // // // // //                 method: 'POST',\r\n// // // // // //                 headers: {\r\n// // // // // //                     'Content-Type': 'application/json',\r\n// // // // // //                 },\r\n// // // // // //                 body: JSON.stringify({ messageId }),\r\n// // // // // //             });\r\n// // // // // //         } catch (error) {\r\n// // // // // //             console.error('DeleteMessage Error:', error);\r\n// // // // // //         }\r\n// // // // // //     };\r\n\r\n// // // // // //     const handleBack = () => {\r\n// // // // // //         navigate('/home');\r\n// // // // // //     };\r\n\r\n// // // // // //     const handleCallUser = () => {\r\n// // // // // //         console.log('Calling user:', receiverId);\r\n// // // // // //     };\r\n\r\n// // // // // //     return (\r\n// // // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // // // //             <div className=\"flex items-center mb-4\">\r\n// // // // // //                 <img\r\n// // // // // //                     src={defaultAvatar}\r\n// // // // // //                     alt=\"Avatar\"\r\n// // // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // // // //                 />\r\n// // // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // // // //             </div>\r\n\r\n// // // // // //             <button\r\n// // // // // //                 onClick={handleBack}\r\n// // // // // //                 type=\"button\"\r\n// // // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // // // //             >\r\n// // // // // //                 <div\r\n// // // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // // // //                 >\r\n// // // // // //                     <svg\r\n// // // // // //                         width=\"25px\"\r\n// // // // // //                         height=\"25px\"\r\n// // // // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // // // //                     >\r\n// // // // // //                         <path\r\n// // // // // //                             fill=\"#000000\"\r\n// // // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // // // //                         ></path>\r\n// // // // // //                         <path\r\n// // // // // //                             fill=\"#000000\"\r\n// // // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // // // //                         ></path>\r\n// // // // // //                     </svg>\r\n// // // // // //                 </div>\r\n// // // // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // // // //             </button>\r\n\r\n// // // // // //             <div className=\"flex justify-end mb-4\">\r\n// // // // // //                 <button\r\n// // // // // //                     onClick={handleCallUser}\r\n// // // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // // // //                 >\r\n// // // // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // // // //                 </button>\r\n// // // // // //                 <button\r\n// // // // // //                     onClick={handleCallUser}\r\n// // // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // // // //                 >\r\n// // // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // // // //                 </button>\r\n// // // // // //             </div>\r\n\r\n// // // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\r\n// // // // // //                 <div className=\"flex-grow\">\r\n// // // // // //                     {messages.length > 0 ? (\r\n// // // // // //                         messages.map((message) => (\r\n// // // // // //                             <div\r\n// // // // // //                                 key={message.id}\r\n// // // // // //                                 className={`p-4 mb-2 rounded shadow ${\r\n// // // // // //                                     message.from_user_id === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\r\n// // // // // //                                 }`}\r\n// // // // // //                             >\r\n// // // // // //                                 <p>{message.content}</p>\r\n// // // // // //                                 {message.from_user_id === userId && (\r\n// // // // // //                                     <button\r\n// // // // // //                                         onClick={() => handleDeleteMessage(message.id)}\r\n// // // // // //                                         className=\"text-red-500\"\r\n// // // // // //                                     >\r\n// // // // // //                                         Delete\r\n// // // // // //                                     </button>\r\n// // // // // //                                 )}\r\n// // // // // //                             </div>\r\n// // // // // //                         ))\r\n// // // // // //                     ) : (\r\n// // // // // //                         <p>No messages yet.</p>\r\n// // // // // //                     )}\r\n// // // // // //                     <div ref={messageEndRef} />\r\n// // // // // //                 </div>\r\n// // // // // //             </div>\r\n\r\n// // // // // //             <div className=\"flex\">\r\n// // // // // //                 <input\r\n// // // // // //                     type=\"text\"\r\n// // // // // //                     value={messageText}\r\n// // // // // //                     onChange={(e) => setMessageText(e.target.value)}\r\n// // // // // //                     placeholder=\"Type your message...\"\r\n// // // // // //                     className=\"w-full px-3 py-2 border rounded\"\r\n// // // // // //                 />\r\n// // // // // //                 <button\r\n// // // // // //                     onClick={handleSendMessage}\r\n// // // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\r\n// // // // // //                 >\r\n// // // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\r\n// // // // // //                 </button>\r\n// // // // // //             </div>\r\n// // // // // //         </div>\r\n// // // // // //     );\r\n// // // // // // };\r\n\r\n// // // // // // export default ChatPage;\r\n\r\n// // // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // // import { io } from 'socket.io-client';\r\n// // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // // const ChatPage = () => {\r\n// // // // //     const [messages, setMessages] = useState([]);\r\n// // // // //     const [messageText, setMessageText] = useState('');\r\n// // // // //     const messageEndRef = useRef(null);\r\n// // // // //     const navigate = useNavigate();\r\n// // // // //     const { receiverId } = useParams();\r\n\r\n// // // // //     const userId = localStorage.getItem('userId');\r\n// // // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // // //     useEffect(() => {\r\n// // // // //         if (!receiverId) return;\r\n\r\n// // // // //         socket.on('connect', () => {\r\n// // // // //             console.log('Connected to socket server');\r\n// // // // //         });\r\n\r\n// // // // //         socket.on('disconnect', () => {\r\n// // // // //             console.log('Disconnected from socket server');\r\n// // // // //         });\r\n\r\n// // // // //         const fetchMessages = async () => {\r\n// // // // //             const receiverId = localStorage.getItem('userId');\r\n// // // // //             const senderId = localStorage.getItem('touserId');\r\n// // // // //             try {\r\n// // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // //                 const result = await response.json();\r\n// // // // //                 console.log(\"Result:\", result);\r\n// // // // //                 if (Array.isArray(result.messages)) {\r\n// // // // //                     setMessages(result.messages);\r\n// // // // //                 } else {\r\n// // // // //                     throw new Error('Unexpected response format');\r\n// // // // //                 }\r\n// // // // //             } catch (error) {\r\n// // // // //                 console.error('Failed to fetch messages:', error);\r\n// // // // //             }\r\n// // // // //         };\r\n\r\n// // // // //         fetchMessages();\r\n\r\n// // // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // // //         socket.on('message', (message) => {\r\n// // // // //             console.log('Received message:', message); // Debug message\r\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // // //         });\r\n\r\n// // // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // // //         });\r\n\r\n// // // // //         return () => {\r\n// // // // //             socket.off('connect');\r\n// // // // //             socket.off('disconnect');\r\n// // // // //             socket.off('message');\r\n// // // // //             socket.off('messageDeleted');\r\n// // // // //         };\r\n// // // // //     }, [receiverId, userId]);\r\n\r\n// // // // //     const handleSendMessage = async () => {\r\n// // // // //         if (messageText.trim()) {\r\n// // // // //             try {\r\n// // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // // //                     method: 'POST',\r\n// // // // //                     headers: {\r\n// // // // //                         'Content-Type': 'application/json',\r\n// // // // //                     },\r\n// // // // //                     body: JSON.stringify({\r\n// // // // //                         senderId: userId,\r\n// // // // //                         receiverId: storedToUserId,\r\n// // // // //                         text: messageText,\r\n// // // // //                     }),\r\n// // // // //                 });\r\n// // // // //                 const result = await response.json();\r\n// // // // //                 if (response.ok) {\r\n// // // // //                     setMessageText(''); // Clear the input box\r\n// // // // //                 } else {\r\n// // // // //                     console.error('SendMessage Error:', result.message);\r\n// // // // //                 }\r\n// // // // //             } catch (error) {\r\n// // // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // // //             }\r\n// // // // //         }\r\n// // // // //     };\r\n\r\n// // // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // // //         try {\r\n// // // // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // // // //                 method: 'POST',\r\n// // // // //                 headers: {\r\n// // // // //                     'Content-Type': 'application/json',\r\n// // // // //                 },\r\n// // // // //                 body: JSON.stringify({ messageId }),\r\n// // // // //             });\r\n// // // // //         } catch (error) {\r\n// // // // //             console.error('DeleteMessage Error:', error);\r\n// // // // //         }\r\n// // // // //     };\r\n\r\n// // // // //     const handleBack = () => {\r\n// // // // //         navigate('/home');\r\n// // // // //     };\r\n\r\n// // // // //     const handleCallUser = () => {\r\n// // // // //         console.log('Calling user:', receiverId);\r\n// // // // //     };\r\n\r\n// // // // //     return (\r\n// // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // // //             <div className=\"flex items-center mb-4\">\r\n// // // // //                 <img\r\n// // // // //                     src={defaultAvatar}\r\n// // // // //                     alt=\"Avatar\"\r\n// // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // // //                 />\r\n// // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // // //             </div>\r\n\r\n// // // // //             <button\r\n// // // // //                 onClick={handleBack}\r\n// // // // //                 type=\"button\"\r\n// // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // // //             >\r\n// // // // //                 <div\r\n// // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // // //                 >\r\n// // // // //                     <svg\r\n// // // // //                         width=\"25px\"\r\n// // // // //                         height=\"25px\"\r\n// // // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // // //                     >\r\n// // // // //                         <path\r\n// // // // //                             fill=\"#000000\"\r\n// // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // // //                         ></path>\r\n// // // // //                         <path\r\n// // // // //                             fill=\"#000000\"\r\n// // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // // //                         ></path>\r\n// // // // //                     </svg>\r\n// // // // //                 </div>\r\n// // // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // // //             </button>\r\n\r\n// // // // //             <div className=\"flex justify-end mb-4\">\r\n// // // // //                 <button\r\n// // // // //                     onClick={handleCallUser}\r\n// // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // // //                 >\r\n// // // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // // //                 </button>\r\n// // // // //                 <button\r\n// // // // //                     onClick={handleCallUser}\r\n// // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // // //                 >\r\n// // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // // //                 </button>\r\n// // // // //             </div>\r\n\r\n// // // // //             <div className=\"flex flex-col flex-grow\">\r\n// // // // //                 {/* Fixed Size Message Container */}\r\n// // // // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4  overflow-y-auto\">\r\n// // // // //                 {/* <div className=\"w-full max-w-xl mx-auto h-96 bg-gray-100 p-4 rounded-xl overflow-y-auto\"> */}\r\n\r\n// // // // //                     <div className=\"flex flex-col gap-2\">\r\n// // // // //                         {messages.length > 0 ? (\r\n// // // // //                             messages.map((message) => (\r\n// // // // //                                 <div\r\n// // // // //                                     key={message.id}\r\n// // // // //                                     className={`p-4 max-w-max rounded shadow ${\r\n// // // // //                                         message.from_user_id === userId\r\n// // // // //                                             ? 'bg-blue-200 self-end'\r\n// // // // //                                             : 'bg-white self-start'\r\n// // // // //                                     }`}\r\n// // // // //                                 >\r\n// // // // //                                     <p>{message.content}</p>\r\n// // // // //                                     {message.from_user_id === userId && (\r\n// // // // //                                         <button\r\n// // // // //                                             onClick={() => handleDeleteMessage(message.id)}\r\n// // // // //                                             className=\"text-red-500\"\r\n// // // // //                                         >\r\n// // // // //                                             Delete\r\n// // // // //                                         </button>\r\n// // // // //                                     )}\r\n// // // // //                                 </div>\r\n// // // // //                             ))\r\n// // // // //                         ) : (\r\n// // // // //                             <p>No messages yet.</p>\r\n// // // // //                         )}\r\n// // // // //                         <div ref={messageEndRef} />\r\n// // // // //                     </div>\r\n// // // // //                 </div>\r\n\r\n// // // // //                 <div className=\"flex mt-4\">\r\n// // // // //                     <input\r\n// // // // //                         type=\"text\"\r\n// // // // //                         value={messageText}\r\n// // // // //                         onChange={(e) => setMessageText(e.target.value)}\r\n// // // // //                         placeholder=\"Type your message...\"\r\n// // // // //                         className=\"w-full px-3 py-2 border rounded\"\r\n// // // // //                     />\r\n// // // // //                     <button\r\n// // // // //                     onClick={handleSendMessage}\r\n// // // // //                     class=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// // // // //                     >\r\n// // // // //                     Send\r\n// // // // //                     <svg\r\n// // // // //                         class=\"w-5 h-5\"\r\n// // // // //                         stroke=\"currentColor\"\r\n// // // // //                         stroke-width=\"1.5\"\r\n// // // // //                         viewBox=\"0 0 24 24\"\r\n// // // // //                         fill=\"none\"\r\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // // //                     >\r\n// // // // //                         <path\r\n// // // // //                         d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// // // // //                         stroke-linejoin=\"round\"\r\n// // // // //                         stroke-linecap=\"round\"\r\n// // // // //                         ></path>\r\n// // // // //                     </svg>\r\n// // // // //                     </button>\r\n\r\n// // // // //                 </div>\r\n// // // // //             </div>\r\n// // // // //         </div>\r\n// // // // //     );\r\n// // // // // };\r\n\r\n// // // // // export default ChatPage;\r\n// // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // import { io } from 'socket.io-client';\r\n// // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // const ChatPage = () => {\r\n// // // //     const [messages, setMessages] = useState([]);\r\n// // // //     const [messageText, setMessageText] = useState('');\r\n// // // //     const messageEndRef = useRef(null);\r\n// // // //     const navigate = useNavigate();\r\n// // // //     const { receiverId } = useParams();\r\n\r\n// // // //     const userId = localStorage.getItem('userId');\r\n// // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // //     useEffect(() => {\r\n// // // //         if (!receiverId) return;\r\n\r\n// // // //         socket.on('connect', () => {\r\n// // // //             console.log('Connected to socket server');\r\n// // // //         });\r\n\r\n// // // //         socket.on('disconnect', () => {\r\n// // // //             console.log('Disconnected from socket server');\r\n// // // //         });\r\n\r\n// // // //         const fetchMessages = async () => {\r\n// // // //             const receiverId = localStorage.getItem('userId');\r\n// // // //             const senderId = localStorage.getItem('touserId');\r\n// // // //             try {\r\n// // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // //                 const result = await response.json();\r\n// // // //                 if (Array.isArray(result.messages)) {\r\n// // // //                     setMessages(result.messages);\r\n// // // //                 } else {\r\n// // // //                     throw new Error('Unexpected response format');\r\n// // // //                 }\r\n// // // //             } catch (error) {\r\n// // // //                 console.error('Failed to fetch messages:', error);\r\n// // // //             }\r\n// // // //         };\r\n\r\n// // // //         fetchMessages();\r\n\r\n// // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // //         socket.on('message', (message) => {\r\n// // // //             console.log('Received message:', message);\r\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // //         });\r\n\r\n// // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // //         });\r\n\r\n// // // //         return () => {\r\n// // // //             socket.off('connect');\r\n// // // //             socket.off('disconnect');\r\n// // // //             socket.off('message');\r\n// // // //             socket.off('messageDeleted');\r\n// // // //         };\r\n// // // //     }, [receiverId, userId]);\r\n\r\n// // // //     const handleSendMessage = async () => {\r\n// // // //         if (messageText.trim()) {\r\n// // // //             try {\r\n// // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // //                     method: 'POST',\r\n// // // //                     headers: {\r\n// // // //                         'Content-Type': 'application/json',\r\n// // // //                     },\r\n// // // //                     body: JSON.stringify({\r\n// // // //                         senderId: userId,\r\n// // // //                         receiverId: storedToUserId,\r\n// // // //                         text: messageText,\r\n// // // //                     }),\r\n// // // //                 });\r\n// // // //                 const result = await response.json();\r\n// // // //                 if (response.ok) {\r\n// // // //                     setMessageText(''); // Clear the input box\r\n// // // //                 } else {\r\n// // // //                     console.error('SendMessage Error:', result.message);\r\n// // // //                 }\r\n// // // //             } catch (error) {\r\n// // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // //             }\r\n// // // //         }\r\n// // // //     };\r\n\r\n// // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // //         try {\r\n// // // //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// // // //                 method: 'POST',\r\n// // // //                 headers: {\r\n// // // //                     'Content-Type': 'application/json',\r\n// // // //                 },\r\n// // // //                 body: JSON.stringify({ messageId }),\r\n// // // //             });\r\n// // // //             const result = await response.json();\r\n// // // //             if (response.ok) {\r\n// // // //                 // Optionally, you can provide user feedback here\r\n// // // //             } else {\r\n// // // //                 console.error('DeleteMessage Error:', result.message);\r\n// // // //             }\r\n// // // //         } catch (error) {\r\n// // // //             console.error('DeleteMessage Fetch Error:', error);\r\n// // // //         }\r\n// // // //     };\r\n\r\n// // // //     const isMessageDeletable = (createdAt) => {\r\n// // // //         const messageTime = new Date(createdAt);\r\n// // // //         const currentTime = new Date();\r\n// // // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// // // //         return diffMinutes <= 2;\r\n// // // //     };\r\n\r\n// // // //     const handleBack = () => {\r\n// // // //         navigate('/home');\r\n// // // //     };\r\n\r\n// // // //     const handleCallUser = () => {\r\n// // // //         console.log('Calling user:', receiverId);\r\n// // // //     };\r\n\r\n// // // //     return (\r\n// // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // //             <div className=\"flex items-center mb-4\">\r\n// // // //                 <img\r\n// // // //                     src={defaultAvatar}\r\n// // // //                     alt=\"Avatar\"\r\n// // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // //                 />\r\n// // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // //             </div>\r\n\r\n// // // //             <button\r\n// // // //                 onClick={handleBack}\r\n// // // //                 type=\"button\"\r\n// // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // //             >\r\n// // // //                 <div\r\n// // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // //                 >\r\n// // // //                     <svg\r\n// // // //                         width=\"25px\"\r\n// // // //                         height=\"25px\"\r\n// // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // //                     >\r\n// // // //                         <path\r\n// // // //                             fill=\"#000000\"\r\n// // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // //                         ></path>\r\n// // // //                         <path\r\n// // // //                             fill=\"#000000\"\r\n// // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // //                         ></path>\r\n// // // //                     </svg>\r\n// // // //                 </div>\r\n// // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // //             </button>\r\n\r\n// // // //             <div className=\"flex justify-end mb-4\">\r\n// // // //                 <button\r\n// // // //                     onClick={handleCallUser}\r\n// // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // //                 >\r\n// // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // //                 </button>\r\n// // // //                 <button\r\n// // // //                     onClick={handleCallUser}\r\n// // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // //                 >\r\n// // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // //                 </button>\r\n// // // //             </div>\r\n\r\n// // // //             <div className=\"flex flex-col flex-grow\">\r\n// // // //                 {/* Fixed Size Message Container */}\r\n// // // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// // // //                     <div className=\"flex flex-col gap-2\">\r\n// // // //                         {messages.length > 0 ? (\r\n// // // //                             messages.map((message) => (\r\n// // // //                                 <div\r\n// // // //                                     key={message.id}\r\n// // // //                                     className={`p-4 max-w-max rounded shadow ${\r\n// // // //                                         message.from_user_id === userId\r\n// // // //                                             ? 'bg-blue-200 self-end'\r\n// // // //                                             : 'bg-white self-start'\r\n// // // //                                     }`}\r\n// // // //                                 >\r\n// // // //                                     <p>{message.content}</p>\r\n// // // //                                     {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\r\n// // // //                                         <button\r\n// // // //                                             onClick={() => {\r\n// // // //                                                 handleDeleteMessage(message.id);\r\n// // // //                                                 setMessages((prevMessages) =>\r\n// // // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// // // //                                                 );\r\n// // // //                                             }}\r\n// // // //                                             className=\"text-red-500\"\r\n// // // //                                         >\r\n// // // //                                             Delete\r\n// // // //                                         </button>\r\n// // // //                                     )}\r\n// // // //                                 </div>\r\n// // // //                             ))\r\n// // // //                         ) : (\r\n// // // //                             <p>No messages yet.</p>\r\n// // // //                         )}\r\n// // // //                         <div ref={messageEndRef} />\r\n// // // //                     </div>\r\n// // // //                 </div>\r\n\r\n// // // //                 <div className=\"flex mt-4\">\r\n// // // //                     <input\r\n// // // //                         type=\"text\"\r\n// // // //                         value={messageText}\r\n// // // //                         onChange={(e) => setMessageText(e.target.value)}\r\n// // // //                         placeholder=\"Type your message...\"\r\n// // // //                         className=\"w-full px-3 py-2 border rounded\"\r\n// // // //                     />\r\n// // // //                     <button\r\n// // // //                         onClick={() => {\r\n// // // //                             handleSendMessage();\r\n// // // //                             setMessages((prevMessages) => [\r\n// // // //                                 ...prevMessages,\r\n// // // //                                 {\r\n// // // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// // // //                                     content: messageText,\r\n// // // //                                     from_user_id: userId,\r\n// // // //                                     created_at: new Date().toISOString(),\r\n// // // //                                 },\r\n// // // //                             ]);\r\n// // // //                         }}\r\n// // // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// // // //                     >\r\n// // // //                         Send\r\n// // // //                         <svg\r\n// // // //                             className=\"w-5 h-5\"\r\n// // // //                             stroke=\"currentColor\"\r\n// // // //                             strokeWidth=\"1.5\"\r\n// // // //                             viewBox=\"0 0 24 24\"\r\n// // // //                             fill=\"none\"\r\n// // // //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // //                         >\r\n// // // //                             <path\r\n// // // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// // // //                                 strokeLinejoin=\"round\"\r\n// // // //                                 strokeLinecap=\"round\"\r\n// // // //                             ></path>\r\n// // // //                         </svg>\r\n// // // //                     </button>\r\n// // // //                 </div>\r\n// // // //             </div>\r\n// // // //         </div>\r\n// // // //     );\r\n// // // // };\r\n\r\n// // // // export default ChatPage;\r\n\r\n// // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // import { io } from 'socket.io-client';\r\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// // // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// // // import 'webrtc-adapter';\r\n\r\n\r\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // const ChatPage = () => {\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const [messageText, setMessageText] = useState('');\r\n// // //     const [reactions, setReactions] = useState({});\r\n// // //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n// // //     const messageEndRef = useRef(null);\r\n// // //     const navigate = useNavigate();\r\n// // //     const { receiverId } = useParams();\r\n\r\n// // //     const userId = localStorage.getItem('userId');\r\n// // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // //     useEffect(() => {\r\n// // //         if (!receiverId) return;\r\n\r\n// // //         socket.on('connect', () => {\r\n// // //             console.log('Connected to socket server');\r\n// // //         });\r\n\r\n// // //         socket.on('disconnect', () => {\r\n// // //             console.log('Disconnected from socket server');\r\n// // //         });\r\n\r\n// // //         const fetchMessages = async () => {\r\n// // //             const receiverId = localStorage.getItem('userId');\r\n// // //             const senderId = localStorage.getItem('touserId');\r\n// // //             try {\r\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // //                 const result = await response.json();\r\n// // //                 if (Array.isArray(result.messages)) {\r\n// // //                     setMessages(result.messages);\r\n// // //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n// // //                 } else {\r\n// // //                     throw new Error('Unexpected response format');\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('Failed to fetch messages:', error);\r\n// // //             }\r\n// // //         };\r\n\r\n// // //         const fetchReactions = async (messageIds) => {\r\n// // //             try {\r\n// // //                 const response = await fetch('http://localhost:3001/getReactions', {\r\n// // //                     method: 'POST',\r\n// // //                     headers: {\r\n// // //                         'Content-Type': 'application/json',\r\n// // //                     },\r\n// // //                     body: JSON.stringify({ messageIds }),\r\n// // //                 });\r\n// // //                 const result = await response.json();\r\n// // //                 setReactions(result.reactions);\r\n// // //             } catch (error) {\r\n// // //                 console.error('Failed to fetch reactions:', error);\r\n// // //             }\r\n// // //         };\r\n\r\n// // //         fetchMessages();\r\n\r\n// // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // //         socket.on('message', (message) => {\r\n// // //             console.log('Received message:', message);\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // //         });\r\n\r\n// // //         socket.on('messageDeleted', (messageId) => {\r\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // //         });\r\n\r\n// // //         socket.on('reaction', (reaction) => {\r\n// // //             setReactions((prevReactions) => {\r\n// // //                 const updatedReactions = { ...prevReactions };\r\n// // //                 if (!updatedReactions[reaction.messageId]) {\r\n// // //                     updatedReactions[reaction.messageId] = [];\r\n// // //                 }\r\n// // //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n// // //                     (r) => r.userId !== reaction.userId\r\n// // //                 );\r\n// // //                 updatedReactions[reaction.messageId].push(reaction);\r\n// // //                 return updatedReactions;\r\n// // //             });\r\n// // //         });\r\n\r\n// // //         return () => {\r\n// // //             socket.off('connect');\r\n// // //             socket.off('disconnect');\r\n// // //             socket.off('message');\r\n// // //             socket.off('messageDeleted');\r\n// // //             socket.off('reaction');\r\n// // //         };\r\n// // //     }, [receiverId, userId]);\r\n\r\n// // //     const handleSendMessage = async () => {\r\n// // //         if (messageText.trim()) {\r\n// // //             try {\r\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // //                     method: 'POST',\r\n// // //                     headers: {\r\n// // //                         'Content-Type': 'application/json',\r\n// // //                     },\r\n// // //                     body: JSON.stringify({\r\n// // //                         senderId: userId,\r\n// // //                         receiverId: storedToUserId,\r\n// // //                         text: messageText,\r\n// // //                     }),\r\n// // //                 });\r\n// // //                 const result = await response.json();\r\n// // //                 if (response.ok) {\r\n// // //                     setMessageText(''); // Clear the input box\r\n// // //                 } else {\r\n// // //                     console.error('SendMessage Error:', result.message);\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('SendMessage Fetch Error:', error);\r\n// // //             }\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleDeleteMessage = async (messageId) => {\r\n// // //         try {\r\n// // //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// // //                 method: 'POST',\r\n// // //                 headers: {\r\n// // //                     'Content-Type': 'application/json',\r\n// // //                 },\r\n// // //                 body: JSON.stringify({ messageId }),\r\n// // //             });\r\n// // //             const result = await response.json();\r\n// // //             if (response.ok) {\r\n// // //                 // Optionally, you can provide user feedback here\r\n// // //             } else {\r\n// // //                 console.error('DeleteMessage Error:', result.message);\r\n// // //             }\r\n// // //         } catch (error) {\r\n// // //             console.error('DeleteMessage Fetch Error:', error);\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     // const handleAddReaction = async (messageId, reactionType) => {\r\n// // //     //     try {\r\n// // //     //         await fetch('http://localhost:3001/addReaction', {\r\n// // //     //             method: 'POST',\r\n// // //     //             headers: {\r\n// // //     //                 'Content-Type': 'application/json',\r\n// // //     //             },\r\n// // //     //             body: JSON.stringify({ messageId, userId, reactionType }),\r\n// // //     //         });\r\n// // //     //         socket.emit('reaction', { messageId, userId, reactionType });\r\n// // //     //     } catch (error) {\r\n// // //     //         console.error('AddReaction Fetch Error:', error);\r\n// // //     //     }\r\n// // //     // };\r\n// // //     const handleAddReaction = async (messageId, reactionType) => {\r\n// // //         try {\r\n// // //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n// // //                 method: 'POST',\r\n// // //                 headers: {\r\n// // //                     'Content-Type': 'application/json',\r\n// // //                 },\r\n// // //                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n// // //             });\r\n    \r\n// // //             if (response.ok) {\r\n// // //                 const result = await response.json();\r\n// // //                 console.log('Reaction added successfully:', result);\r\n// // //             } else {\r\n// // //                 const errorText = await response.text();\r\n// // //                 console.error('AddReaction Error:', errorText);\r\n// // //             }\r\n// // //         } catch (error) {\r\n// // //             console.error('AddReaction Fetch Error:', error);\r\n// // //         }\r\n// // //     };\r\n    \r\n\r\n// // //     const isMessageDeletable = (createdAt) => {\r\n// // //         const messageTime = new Date(createdAt);\r\n// // //         const currentTime = new Date();\r\n// // //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// // //         return diffMinutes <= 2;\r\n// // //     };\r\n\r\n// // //     const handleBack = () => {\r\n// // //         navigate('/home');\r\n// // //     };\r\n\r\n// // //     const handleCallUser = () => {\r\n// // //         console.log('Calling user:', receiverId);\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // //             <div className=\"flex items-center mb-4\">\r\n// // //                 <img\r\n// // //                     src={defaultAvatar}\r\n// // //                     alt=\"Avatar\"\r\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // //                 />\r\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // //             </div>\r\n\r\n// // //             <button\r\n// // //                 onClick={handleBack}\r\n// // //                 type=\"button\"\r\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // //             >\r\n// // //                 <div\r\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // //                 >\r\n// // //                     <svg\r\n// // //                         width=\"25px\"\r\n// // //                         height=\"25px\"\r\n// // //                         viewBox=\"0 0 1024 1024\"\r\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                     >\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // //                         ></path>\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // //                         ></path>\r\n// // //                     </svg>\r\n// // //                 </div>\r\n// // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // //             </button>\r\n\r\n// // //             <div className=\"flex justify-end mb-4\">\r\n// // //                 <button\r\n// // //                     onClick={handleCallUser}\r\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // //                 >\r\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //                 <button\r\n// // //                     onClick={handleCallUser}\r\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // //                 >\r\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //             </div>\r\n\r\n// // //             <div className=\"flex flex-col flex-grow\">\r\n// // //                 {/* Fixed Size Message Container */}\r\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// // //                     <div className=\"flex flex-col gap-2\">\r\n// // //                         {messages.length > 0 ? (\r\n// // //                             messages.map((message) => (\r\n// // //                                 <div\r\n// // //                                     key={message.id}\r\n// // //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n// // //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n// // //                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n// // //                                 >\r\n// // //                                     <div className=\"text-sm\">{message.content}</div>\r\n// // //                                     {hoveredMessageId === message.id && (\r\n// // //                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\r\n// // //                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n// // //                                                 <button\r\n// // //                                                     key={reaction}\r\n// // //                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n// // //                                                     className=\"text-xl\"\r\n// // //                                                 >\r\n// // //                                                     {reaction}\r\n// // //                                                 </button>\r\n// // //                                             ))}\r\n// // //                                         </div>\r\n// // //                                     )}\r\n// // //                                     <div className=\"flex space-x-2\">\r\n// // //                                         {reactions[message.id]?.map((reaction, index) => (\r\n// // //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n// // //                                         ))}\r\n// // //                                     </div>\r\n// // //                                     {isMessageDeletable(message.created_at) && (\r\n// // //                                         <button\r\n// // //                                             onClick={() => {\r\n// // //                                                 handleDeleteMessage(message.id);\r\n// // //                                                 setMessages((prevMessages) =>\r\n// // //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// // //                                                 );\r\n// // //                                             }}\r\n// // //                                             className=\"text-red-500 absolute top-2 right-2\"\r\n// // //                                         >\r\n// // //                                             Delete\r\n// // //                                         </button>\r\n// // //                                     )}\r\n// // //                                 </div>\r\n// // //                             ))\r\n// // //                         ) : (\r\n// // //                             <p>No messages yet.</p>\r\n// // //                         )}\r\n// // //                         <div ref={messageEndRef} />\r\n// // //                     </div>\r\n// // //                 </div>\r\n\r\n// // //                 <div className=\"flex mt-4\">\r\n// // //                     <input\r\n// // //                         type=\"text\"\r\n// // //                         value={messageText}\r\n// // //                         onChange={(e) => setMessageText(e.target.value)}\r\n// // //                         placeholder=\"Type your message...\"\r\n// // //                         className=\"w-full px-3 py-2 border rounded\"\r\n// // //                     />\r\n// // //                     <button\r\n// // //                         onClick={() => {\r\n// // //                             handleSendMessage();\r\n// // //                             setMessages((prevMessages) => [\r\n// // //                                 ...prevMessages,\r\n// // //                                 {\r\n// // //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// // //                                     content: messageText,\r\n// // //                                     from_user_id: userId,\r\n// // //                                     created_at: new Date().toISOString(),\r\n// // //                                 },\r\n// // //                             ]);\r\n// // //                         }}\r\n// // //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// // //                     >\r\n// // //                         Send\r\n// // //                         <svg\r\n// // //                             className=\"w-5 h-5\"\r\n// // //                             stroke=\"currentColor\"\r\n// // //                             strokeWidth=\"1.5\"\r\n// // //                             viewBox=\"0 0 24 24\"\r\n// // //                             fill=\"none\"\r\n// // //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                         >\r\n// // //                             <path\r\n// // //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// // //                                 strokeLinejoin=\"round\"\r\n// // //                                 strokeLinecap=\"round\"\r\n// // //                             ></path>\r\n// // //                         </svg>\r\n// // //                     </button>\r\n// // //                 </div>\r\n// // //             </div>\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default ChatPage;\r\n\r\n\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { useNavigate, useParams } from 'react-router-dom';\r\n// // import { io } from 'socket.io-client';\r\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// // //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// // import 'webrtc-adapter';\r\n\r\n\r\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // const ChatPage = () => {\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [messageText, setMessageText] = useState('');\r\n// //     const [reactions, setReactions] = useState({});\r\n// //     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n// //     const messageEndRef = useRef(null);\r\n// //     const navigate = useNavigate();\r\n// //     const { receiverId } = useParams();\r\n\r\n// //     const userId = localStorage.getItem('userId');\r\n// //     const storedToUserId = localStorage.getItem('touserId');\r\n// //     const [localStream, setLocalStream] = useState(null);\r\n// //     const [remoteStream, setRemoteStream] = useState(null);\r\n// //     const [peerConnection, setPeerConnection] = useState(null);\r\n\r\n\r\n// //     useEffect(() => {\r\n// //         if (!receiverId) return;\r\n\r\n// //         socket.on('connect', () => {\r\n// //             console.log('Connected to socket server');\r\n// //         });\r\n\r\n// //         socket.on('disconnect', () => {\r\n// //             console.log('Disconnected from socket server');\r\n// //         });\r\n\r\n// //         const fetchMessages = async () => {\r\n// //             const receiverId = localStorage.getItem('userId');\r\n// //             const senderId = localStorage.getItem('touserId');\r\n// //             try {\r\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// //                 const result = await response.json();\r\n// //                 if (Array.isArray(result.messages)) {\r\n// //                     setMessages(result.messages);\r\n// //                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n// //                 } else {\r\n// //                     throw new Error('Unexpected response format');\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('Failed to fetch messages:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         const fetchReactions = async (messageIds) => {\r\n// //             try {\r\n// //                 const response = await fetch('http://localhost:3001/getReactions', {\r\n// //                     method: 'POST',\r\n// //                     headers: {\r\n// //                         'Content-Type': 'application/json',\r\n// //                     },\r\n// //                     body: JSON.stringify({ messageIds }),\r\n// //                 });\r\n// //                 const result = await response.json();\r\n// //                 setReactions(result.reactions);\r\n// //             } catch (error) {\r\n// //                 console.error('Failed to fetch reactions:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         fetchMessages();\r\n\r\n// //         socket.emit('joinRoom', receiverId);\r\n\r\n// //         socket.on('message', (message) => {\r\n// //             console.log('Received message:', message);\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //         });\r\n\r\n// //         socket.on('messageDeleted', (messageId) => {\r\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// //         });\r\n\r\n// //         socket.on('reaction', (reaction) => {\r\n// //             setReactions((prevReactions) => {\r\n// //                 const updatedReactions = { ...prevReactions };\r\n// //                 if (!updatedReactions[reaction.messageId]) {\r\n// //                     updatedReactions[reaction.messageId] = [];\r\n// //                 }\r\n// //                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n// //                     (r) => r.userId !== reaction.userId\r\n// //                 );\r\n// //                 updatedReactions[reaction.messageId].push(reaction);\r\n// //                 return updatedReactions;\r\n// //             });\r\n// //         });\r\n\r\n\r\n        \r\n// //         // WebRTC setup\r\n// //         const setupWebRTC = async () => {\r\n// //             const pc = new RTCPeerConnection();\r\n// //             setPeerConnection(pc);\r\n\r\n// //             // Handle incoming remote stream\r\n// //             pc.ontrack = (event) => {\r\n// //                 setRemoteStream(event.streams[0]);\r\n// //             };\r\n\r\n// //             // Handle ICE candidates\r\n// //             pc.onicecandidate = (event) => {\r\n// //                 if (event.candidate) {\r\n// //                     socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n// //                 }\r\n// //             };\r\n\r\n// //             // Get local media\r\n// //             try {\r\n// //                 const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n// //                 setLocalStream(stream);\r\n// //                 stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n// //             } catch (error) {\r\n// //                 console.error('Error getting local media:', error);\r\n// //             }\r\n\r\n// //             // Handle incoming offer\r\n// //             socket.on('callOffer', async (offer) => {\r\n// //                 await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n// //                 const answer = await pc.createAnswer();\r\n// //                 await pc.setLocalDescription(answer);\r\n// //                 socket.emit('callAnswer', { answer, to: receiverId });\r\n// //             });\r\n\r\n// //             // Handle incoming answer\r\n// //             socket.on('callAnswer', async (answer) => {\r\n// //                 await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n// //             });\r\n\r\n// //             // Handle incoming ICE candidates\r\n// //             socket.on('iceCandidate', async (candidate) => {\r\n// //                 try {\r\n// //                     await pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n// //                 } catch (error) {\r\n// //                     console.error('Error adding ICE candidate:', error);\r\n// //                 }\r\n// //             });\r\n// //         };\r\n\r\n// //         setupWebRTC();\r\n\r\n// //         return () => {\r\n// //             socket.off('connect');\r\n// //             socket.off('disconnect');\r\n// //             socket.off('message');\r\n// //             socket.off('messageDeleted');\r\n// //             socket.off('reaction');\r\n// //             socket.off('callOffer');\r\n// //             socket.off('callAnswer');\r\n// //             socket.off('iceCandidate');\r\n// //             if (peerConnection) {\r\n// //                 peerConnection.close();\r\n// //             }\r\n// //             if (localStream) {\r\n// //                 localStream.getTracks().forEach(track => track.stop());\r\n// //             }\r\n// //         };\r\n// //     }, [receiverId, userId]);\r\n\r\n// //     const handleSendMessage = async () => {\r\n// //         if (messageText.trim()) {\r\n// //             try {\r\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// //                     method: 'POST',\r\n// //                     headers: {\r\n// //                         'Content-Type': 'application/json',\r\n// //                     },\r\n// //                     body: JSON.stringify({\r\n// //                         senderId: userId,\r\n// //                         receiverId: storedToUserId,\r\n// //                         text: messageText,\r\n// //                     }),\r\n// //                 });\r\n// //                 const result = await response.json();\r\n// //                 if (response.ok) {\r\n// //                     setMessageText(''); // Clear the input box\r\n// //                 } else {\r\n// //                     console.error('SendMessage Error:', result.message);\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('SendMessage Fetch Error:', error);\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleDeleteMessage = async (messageId) => {\r\n// //         try {\r\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// //                 method: 'POST',\r\n// //                 headers: {\r\n// //                     'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: JSON.stringify({ messageId }),\r\n// //             });\r\n// //             const result = await response.json();\r\n// //             if (response.ok) {\r\n// //                 // Optionally, you can provide user feedback here\r\n// //             } else {\r\n// //                 console.error('DeleteMessage Error:', result.message);\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('DeleteMessage Fetch Error:', error);\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleAddReaction = async (messageId, reactionType) => {\r\n// //         try {\r\n// //             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n// //                 method: 'POST',\r\n// //                 headers: {\r\n// //                     'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n// //             });\r\n    \r\n// //             if (response.ok) {\r\n// //                 const result = await response.json();\r\n// //                 console.log('Reaction added successfully:', result);\r\n// //             } else {\r\n// //                 const errorText = await response.text();\r\n// //                 console.error('AddReaction Error:', errorText);\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('AddReaction Fetch Error:', error);\r\n// //         }\r\n// //     };\r\n    \r\n\r\n// //     const isMessageDeletable = (createdAt) => {\r\n// //         const messageTime = new Date(createdAt);\r\n// //         const currentTime = new Date();\r\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// //         return diffMinutes <= 2;\r\n// //     };\r\n\r\n// //     const handleBack = () => {\r\n// //         navigate('/home');\r\n// //     };\r\n\r\n// //     const handleCallUser = (callType) => {\r\n// //         console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n// //         if (peerConnection) {\r\n// //             peerConnection.createOffer().then(offer => {\r\n// //                 peerConnection.setLocalDescription(offer).then(() => {\r\n// //                     socket.emit('callOffer', { offer, to: receiverId });\r\n// //                 });\r\n// //             }).catch(error => {\r\n// //                 console.error('Error creating offer:', error);\r\n// //             });\r\n// //         }\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// //             <div className=\"flex items-center mb-4\">\r\n// //                 <img\r\n// //                     src={defaultAvatar}\r\n// //                     alt=\"Avatar\"\r\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// //                 />\r\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// //             </div>\r\n\r\n// //             <button\r\n// //                 onClick={handleBack}\r\n// //                 type=\"button\"\r\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// //             >\r\n// //                 <div\r\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// //                 >\r\n// //                     <svg\r\n// //                         width=\"25px\"\r\n// //                         height=\"25px\"\r\n// //                         viewBox=\"0 0 1024 1024\"\r\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                     >\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// //                         ></path>\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// //                         ></path>\r\n// //                     </svg>\r\n// //                 </div>\r\n// //                 <p className=\"translate-x-2\">Go Back</p>\r\n// //             </button>\r\n\r\n// //             <div className=\"flex justify-end mb-4\">\r\n// //                 <button\r\n// //                     onClick={() => handleCallUser('voice')}\r\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// //                 >\r\n// //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //                 <button\r\n// //                     onClick={() => handleCallUser('video')}\r\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// //                 >\r\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //             </div>\r\n\r\n// //             {localStream && (\r\n// //                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n// //                     <video\r\n// //                         autoPlay\r\n// //                         muted\r\n// //                         ref={(video) => {\r\n// //                             if (video) {\r\n// //                                 video.srcObject = localStream;\r\n// //                             }\r\n// //                         }}\r\n// //                         className=\"w-full h-full object-cover\"\r\n// //                     />\r\n// //                 </div>\r\n// //             )}\r\n\r\n// // {remoteStream && (\r\n// //                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n// //                     <video\r\n// //                         autoPlay\r\n// //                         ref={(video) => {\r\n// //                             if (video) {\r\n// //                                 video.srcObject = remoteStream;\r\n// //                             }\r\n// //                         }}\r\n// //                         className=\"w-full h-full object-cover\"\r\n// //                     />\r\n// //                 </div>\r\n// //             )}\r\n\r\n\r\n// //             <div className=\"flex flex-col flex-grow\">\r\n// //                 {/* Fixed Size Message Container */}\r\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// //                     <div className=\"flex flex-col gap-2\">\r\n// //                         {messages.length > 0 ? (\r\n// //                             messages.map((message) => (\r\n// //                                 <div\r\n// //                                     key={message.id}\r\n// //                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n// //                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n// //                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n// //                                 >\r\n// //                                     <div className=\"text-sm\">{message.content}</div>\r\n// //                                     {hoveredMessageId === message.id && (\r\n// //                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\r\n// //                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n// //                                                 <button\r\n// //                                                     key={reaction}\r\n// //                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n// //                                                     className=\"text-xl\"\r\n// //                                                 >\r\n// //                                                     {reaction}\r\n// //                                                 </button>\r\n// //                                             ))}\r\n// //                                         </div>\r\n// //                                     )}\r\n// //                                     <div className=\"flex space-x-2\">\r\n// //                                         {reactions[message.id]?.map((reaction, index) => (\r\n// //                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n// //                                         ))}\r\n// //                                     </div>\r\n// //                                     {isMessageDeletable(message.created_at) && (\r\n// //                                         <button\r\n// //                                             onClick={() => {\r\n// //                                                 handleDeleteMessage(message.id);\r\n// //                                                 setMessages((prevMessages) =>\r\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// //                                                 );\r\n// //                                             }}\r\n// //                                             className=\"text-red-500 absolute top-2 right-2\"\r\n// //                                         >\r\n// //                                             Delete\r\n// //                                         </button>\r\n// //                                     )}\r\n// //                                 </div>\r\n// //                             ))\r\n// //                         ) : (\r\n// //                             <p>No messages yet.</p>\r\n// //                         )}\r\n// //                         <div ref={messageEndRef} />\r\n// //                     </div>\r\n// //                 </div>\r\n\r\n// //                 <div className=\"flex mt-4\">\r\n// //                     <input\r\n// //                         type=\"text\"\r\n// //                         value={messageText}\r\n// //                         onChange={(e) => setMessageText(e.target.value)}\r\n// //                         placeholder=\"Type your message...\"\r\n// //                         className=\"w-full px-3 py-2 border rounded\"\r\n// //                     />\r\n// //                     <button\r\n// //                         onClick={() => {\r\n// //                             handleSendMessage();\r\n// //                             setMessages((prevMessages) => [\r\n// //                                 ...prevMessages,\r\n// //                                 {\r\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// //                                     content: messageText,\r\n// //                                     from_user_id: userId,\r\n// //                                     created_at: new Date().toISOString(),\r\n// //                                 },\r\n// //                             ]);\r\n// //                         }}\r\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// //                     >\r\n// //                         Send\r\n// //                         <svg\r\n// //                             className=\"w-5 h-5\"\r\n// //                             stroke=\"currentColor\"\r\n// //                             strokeWidth=\"1.5\"\r\n// //                             viewBox=\"0 0 24 24\"\r\n// //                             fill=\"none\"\r\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                         >\r\n// //                             <path\r\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// //                                 strokeLinejoin=\"round\"\r\n// //                                 strokeLinecap=\"round\"\r\n// //                             ></path>\r\n// //                         </svg>\r\n// //                     </button>\r\n// //                 </div>\r\n// //             </div>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default ChatPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { io } from 'socket.io-client';\r\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// import 'webrtc-adapter';\r\n\r\n\r\n// const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// const ChatPage = () => {\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [messageText, setMessageText] = useState('');\r\n//     const [reactions, setReactions] = useState({});\r\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n//     const messageEndRef = useRef(null);\r\n//     const navigate = useNavigate();\r\n//     const { receiverId } = useParams();\r\n\r\n//     const userId = localStorage.getItem('userId');\r\n//     const storedToUserId = localStorage.getItem('touserId');\r\n//     const [localStream, setLocalStream] = useState(null);\r\n//     const [remoteStream, setRemoteStream] = useState(null);\r\n//     const [peerConnection, setPeerConnection] = useState(null);\r\n//     const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (!receiverId) return;\r\n\r\n//         socket.on('connect', () => {\r\n//             console.log('Connected to socket server');\r\n//         });\r\n\r\n//         socket.on('disconnect', () => {\r\n//             console.log('Disconnected from socket server');\r\n//         });\r\n\r\n//         const fetchMessages = async () => {\r\n//             const receiverId = localStorage.getItem('userId');\r\n//             const senderId = localStorage.getItem('touserId');\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n//                 const result = await response.json();\r\n//                 if (Array.isArray(result.messages)) {\r\n//                     setMessages(result.messages);\r\n//                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n//                 } else {\r\n//                     throw new Error('Unexpected response format');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         const fetchReactions = async (messageIds) => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/getReactions', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({ messageIds }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 setReactions(result.reactions);\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch reactions:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n\r\n//         socket.emit('joinRoom', receiverId);\r\n\r\n//         socket.on('message', (message) => {\r\n//             console.log('Received message:', message);\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//         });\r\n\r\n//         socket.on('messageDeleted', (messageId) => {\r\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n//         });\r\n\r\n//         socket.on('reaction', (reaction) => {\r\n//             setReactions((prevReactions) => {\r\n//                 const updatedReactions = { ...prevReactions };\r\n//                 if (!updatedReactions[reaction.messageId]) {\r\n//                     updatedReactions[reaction.messageId] = [];\r\n//                 }\r\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n//                     (r) => r.userId !== reaction.userId\r\n//                 );\r\n//                 updatedReactions[reaction.messageId].push(reaction);\r\n//                 return updatedReactions;\r\n//             });\r\n//         });\r\n\r\n\r\n        \r\n//         // WebRTC setup\r\n//         const setupWebRTC = async () => {\r\n//             const pc = new RTCPeerConnection();\r\n//             setPeerConnection(pc);\r\n\r\n//             // Handle incoming remote stream\r\n//             pc.ontrack = (event) => {\r\n//                 setRemoteStream(event.streams[0]);\r\n//             };\r\n\r\n//             // Handle ICE candidates\r\n//             pc.onicecandidate = (event) => {\r\n//                 if (event.candidate) {\r\n//                     socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n//                 }\r\n//             };\r\n\r\n//             // Get local media\r\n//             try {\r\n//                 const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n//                 setLocalStream(stream);\r\n//                 stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n//             } catch (error) {\r\n//                 console.error('Error getting local media:', error);\r\n//             }\r\n\r\n//             // Handle incoming offer\r\n//             socket.on('callOffer', async (offer) => {\r\n//                 await pc.setRemoteDescription(new RTCSessionDescription(offer));\r\n//                 const answer = await pc.createAnswer();\r\n//                 await pc.setLocalDescription(answer);\r\n//                 socket.emit('callAnswer', { answer, to: receiverId });\r\n//                 setIsCallActive(true); // Set call status to active\r\n//             });\r\n\r\n//             // Handle incoming answer\r\n//             socket.on('callAnswer', async (answer) => {\r\n//                 await pc.setRemoteDescription(new RTCSessionDescription(answer));\r\n//             });\r\n\r\n//             // Handle incoming ICE candidates\r\n//             socket.on('iceCandidate', async (candidate) => {\r\n//                 try {\r\n//                     await pc.addIceCandidate(new RTCIceCandidate(candidate));\r\n//                 } catch (error) {\r\n//                     console.error('Error adding ICE candidate:', error);\r\n//                 }\r\n//             });\r\n//         };\r\n\r\n//         setupWebRTC();\r\n\r\n//         return () => {\r\n//             socket.off('connect');\r\n//             socket.off('disconnect');\r\n//             socket.off('message');\r\n//             socket.off('messageDeleted');\r\n//             socket.off('reaction');\r\n//             socket.off('callOffer');\r\n//             socket.off('callAnswer');\r\n//             socket.off('iceCandidate');\r\n//             if (peerConnection) {\r\n//                 peerConnection.close();\r\n//             }\r\n//             if (localStream) {\r\n//                 localStream.getTracks().forEach(track => track.stop());\r\n//             }\r\n//         };\r\n//     }, [receiverId, userId]);\r\n\r\n//     const handleSendMessage = async () => {\r\n//         if (messageText.trim()) {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({\r\n//                         senderId: userId,\r\n//                         receiverId: storedToUserId,\r\n//                         text: messageText,\r\n//                     }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 if (response.ok) {\r\n//                     setMessageText(''); // Clear the input box\r\n//                 } else {\r\n//                     console.error('SendMessage Error:', result.message);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('SendMessage Fetch Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteMessage = async (messageId) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId }),\r\n//             });\r\n//             const result = await response.json();\r\n//             if (response.ok) {\r\n//                 // Optionally, you can provide user feedback here\r\n//             } else {\r\n//                 console.error('DeleteMessage Error:', result.message);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('DeleteMessage Fetch Error:', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddReaction = async (messageId, reactionType) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 const result = await response.json();\r\n//                 console.log('Reaction added successfully:', result);\r\n//             } else {\r\n//                 const errorText = await response.text();\r\n//                 console.error('AddReaction Error:', errorText);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('AddReaction Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const isMessageDeletable = (createdAt) => {\r\n//         const messageTime = new Date(createdAt);\r\n//         const currentTime = new Date();\r\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n//         return diffMinutes <= 2;\r\n//     };\r\n\r\n//     const handleBack = () => {\r\n//         navigate('/home');\r\n//     };\r\n\r\n//     const handleCallUser = (callType) => {\r\n//         console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n//         if (peerConnection) {\r\n//             peerConnection.createOffer().then(offer => {\r\n//                 peerConnection.setLocalDescription(offer).then(() => {\r\n//                     socket.emit('callOffer', { offer, to: receiverId });\r\n//                     setIsCallActive(true);\r\n//                 });\r\n//             }).catch(error => {\r\n//                 console.error('Error creating offer:', error);\r\n//             });\r\n//         }\r\n//     };\r\n\r\n//     const handleEndCall = () => {\r\n//         if (peerConnection) {\r\n//             peerConnection.close();\r\n//             setPeerConnection(null);\r\n//         }\r\n//         if (localStream) {\r\n//             localStream.getTracks().forEach(track => track.stop());\r\n//             setLocalStream(null);\r\n//         }\r\n//         if (remoteStream) {\r\n//             setRemoteStream(null);\r\n//         }\r\n//         setIsCallActive(false);\r\n//     socket.emit('callEnd', { to: receiverId });\r\n//         // socket.emit('callEnd', { to: receiverId });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n//             <div className=\"flex items-center mb-4\">\r\n//                 <img\r\n//                     src={defaultAvatar}\r\n//                     alt=\"Avatar\"\r\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n//                 />\r\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n//             </div>\r\n\r\n//             <button\r\n//                 onClick={handleBack}\r\n//                 type=\"button\"\r\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n//             >\r\n//                 <div\r\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n//                 >\r\n//                     <svg\r\n//                         width=\"25px\"\r\n//                         height=\"25px\"\r\n//                         viewBox=\"0 0 1024 1024\"\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                     >\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n//                         ></path>\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n//                         ></path>\r\n//                     </svg>\r\n//                 </div>\r\n//                 <p className=\"translate-x-2\">Go Back</p>\r\n//             </button>\r\n\r\n//             <div className=\"flex justify-end mb-4\">\r\n//                 <button\r\n//                     onClick={() => handleCallUser('voice')}\r\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n//                 >\r\n//                     <PhoneIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 <button\r\n//                     onClick={() => handleCallUser('video')}\r\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n//                 >\r\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 {isCallActive && (\r\n//         <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n//             End Call\r\n//         </button>\r\n//     )}\r\n//             </div>\r\n\r\n//             {localStream && (\r\n//                 <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         muted\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = localStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n// {remoteStream && (\r\n//                 <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n//                     <video\r\n//                         autoPlay\r\n//                         ref={(video) => {\r\n//                             if (video) {\r\n//                                 video.srcObject = remoteStream;\r\n//                             }\r\n//                         }}\r\n//                         className=\"w-full h-full object-cover\"\r\n//                     />\r\n//                 </div>\r\n//             )}\r\n\r\n\r\n//             <div className=\"flex flex-col flex-grow\">\r\n//                 {/* Fixed Size Message Container */}\r\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n//                     <div className=\"flex flex-col gap-2\">\r\n//                         {messages.length > 0 ? (\r\n//                             messages.map((message) => (\r\n//                                 <div\r\n//                                     key={message.id}\r\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n//                                 >\r\n//                                     <div className=\"text-sm\">{message.content}</div>\r\n//                                     {hoveredMessageId === message.id && (\r\n//                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\r\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n//                                                 <button\r\n//                                                     key={reaction}\r\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n//                                                     className=\"text-xl\"\r\n//                                                 >\r\n//                                                     {reaction}\r\n//                                                 </button>\r\n//                                             ))}\r\n//                                         </div>\r\n//                                     )}\r\n//                                     <div className=\"flex space-x-2\">\r\n//                                         {reactions[message.id]?.map((reaction, index) => (\r\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n//                                         ))}\r\n//                                     </div>\r\n//                                     {isMessageDeletable(message.created_at) && (\r\n//                                         <button\r\n//                                             onClick={() => {\r\n//                                                 handleDeleteMessage(message.id);\r\n//                                                 setMessages((prevMessages) =>\r\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n//                                                 );\r\n//                                             }}\r\n//                                             className=\"text-red-500 absolute top-2 right-2\"\r\n//                                         >\r\n//                                             Delete\r\n//                                         </button>\r\n//                                     )}\r\n//                                 </div>\r\n//                             ))\r\n//                         ) : (\r\n//                             <p>No messages yet.</p>\r\n//                         )}\r\n//                         <div ref={messageEndRef} />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"flex mt-4\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={messageText}\r\n//                         onChange={(e) => setMessageText(e.target.value)}\r\n//                         placeholder=\"Type your message...\"\r\n//                         className=\"w-full px-3 py-2 border rounded\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={() => {\r\n//                             handleSendMessage();\r\n//                             setMessages((prevMessages) => [\r\n//                                 ...prevMessages,\r\n//                                 {\r\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n//                                     content: messageText,\r\n//                                     from_user_id: userId,\r\n//                                     created_at: new Date().toISOString(),\r\n//                                 },\r\n//                             ]);\r\n//                         }}\r\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n//                     >\r\n//                         Send\r\n//                         <svg\r\n//                             className=\"w-5 h-5\"\r\n//                             stroke=\"currentColor\"\r\n//                             strokeWidth=\"1.5\"\r\n//                             viewBox=\"0 0 24 24\"\r\n//                             fill=\"none\"\r\n//                             xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         >\r\n//                             <path\r\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n//                                 strokeLinejoin=\"round\"\r\n//                                 strokeLinecap=\"round\"\r\n//                             ></path>\r\n//                         </svg>\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n//This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\nimport 'webrtc-adapter';\r\n\r\n\r\nconst socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\nconst ChatPage = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [messageText, setMessageText] = useState('');\r\n    const [reactions, setReactions] = useState({});\r\n    const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n    const messageEndRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    const { receiverId } = useParams();\r\n\r\n    const userId = localStorage.getItem('userId');\r\n    const storedToUserId = localStorage.getItem('touserId');\r\n    const [localStream, setLocalStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [peerConnection, setPeerConnection] = useState(null);\r\n    const [isCallActive, setIsCallActive] = useState(false); // New state for call status\r\n\r\n\r\n    useEffect(() => {\r\n        if (!receiverId) return;\r\n\r\n        socket.on('connect', () => {\r\n            console.log('Connected to socket server');\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected from socket server');\r\n        });\r\n\r\n        const fetchMessages = async () => {\r\n            const receiverId = localStorage.getItem('userId');\r\n            const senderId = localStorage.getItem('touserId');\r\n            try {\r\n                const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n                const result = await response.json();\r\n                if (Array.isArray(result.messages)) {\r\n                    setMessages(result.messages);\r\n                    fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n                } else {\r\n                    throw new Error('Unexpected response format');\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to fetch messages:', error);\r\n            }\r\n        };\r\n\r\n        const fetchReactions = async (messageIds) => {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/getReactions', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ messageIds }),\r\n                });\r\n                const result = await response.json();\r\n                setReactions(result.reactions);\r\n            } catch (error) {\r\n                console.error('Failed to fetch reactions:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        socket.emit('joinRoom', receiverId);\r\n\r\n        socket.on('message', (message) => {\r\n            console.log('Received message:', message);\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n            messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n\r\n        socket.on('messageDeleted', (messageId) => {\r\n            setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n        });\r\n\r\n        socket.on('reaction', (reaction) => {\r\n            setReactions((prevReactions) => {\r\n                const updatedReactions = { ...prevReactions };\r\n                if (!updatedReactions[reaction.messageId]) {\r\n                    updatedReactions[reaction.messageId] = [];\r\n                }\r\n                updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n                    (r) => r.userId !== reaction.userId\r\n                );\r\n                updatedReactions[reaction.messageId].push(reaction);\r\n                return updatedReactions;\r\n            });\r\n        });\r\n\r\n            socket.on('callOffer', async (offer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n                    const answer = await peerConnection.createAnswer();\r\n                    await peerConnection.setLocalDescription(answer);\r\n                    socket.emit('callAnswer', { answer, to: receiverId });\r\n                    setIsCallActive(true);\r\n                }\r\n            });\r\n\r\n            // Handle incoming answer\r\n            socket.on('callAnswer', async (answer) => {\r\n                if (peerConnection) {\r\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n                }\r\n            });\r\n\r\n            // Handle incoming ICE candidates\r\n            socket.on('iceCandidate', async (candidate) => {\r\n                if (peerConnection) {\r\n                    try {\r\n                        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n                    } catch (error) {\r\n                        console.error('Error adding ICE candidate:', error);\r\n                    }\r\n                }\r\n            });\r\n        // };\r\n\r\n        // setupWebRTC();\r\n\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('disconnect');\r\n            socket.off('message');\r\n            socket.off('messageDeleted');\r\n            socket.off('reaction');\r\n            socket.off('callOffer');\r\n            socket.off('callAnswer');\r\n            socket.off('iceCandidate');\r\n            if (peerConnection) {\r\n                peerConnection.close();\r\n            }\r\n            if (localStream) {\r\n                localStream.getTracks().forEach(track => track.stop());\r\n            }\r\n        };\r\n    }, [receiverId, userId, peerConnection, localStream]);\r\n\r\n    const setupWebRTC = async () => {\r\n        const pc = new RTCPeerConnection();\r\n        setPeerConnection(pc);\r\n\r\n        // Handle incoming remote stream\r\n        pc.ontrack = (event) => {\r\n            setRemoteStream(event.streams[0]);\r\n        };\r\n\r\n        // Handle ICE candidates\r\n        pc.onicecandidate = (event) => {\r\n            if (event.candidate) {\r\n                socket.emit('iceCandidate', { candidate: event.candidate, to: receiverId });\r\n            }\r\n        };\r\n\r\n        // Get local media\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\r\n            setLocalStream(stream);\r\n            stream.getTracks().forEach((track) => pc.addTrack(track, stream));\r\n        } catch (error) {\r\n            console.error('Error getting local media:', error);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (messageText.trim()) {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/sendMessage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        senderId: userId,\r\n                        receiverId: storedToUserId,\r\n                        text: messageText,\r\n                    }),\r\n                });\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    setMessageText(''); // Clear the input box\r\n                } else {\r\n                    console.error('SendMessage Error:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('SendMessage Fetch Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/deleteMessage', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId }),\r\n            });\r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                // Optionally, you can provide user feedback here\r\n            } else {\r\n                console.error('DeleteMessage Error:', result.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('DeleteMessage Fetch Error:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddReaction = async (messageId, reactionType) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ messageId, userId, reactionType }),\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('Reaction added successfully:', result);\r\n            } else {\r\n                const errorText = await response.text();\r\n                console.error('AddReaction Error:', errorText);\r\n            }\r\n        } catch (error) {\r\n            console.error('AddReaction Fetch Error:', error);\r\n        }\r\n    };\r\n    \r\n\r\n    const isMessageDeletable = (createdAt) => {\r\n        const messageTime = new Date(createdAt);\r\n        const currentTime = new Date();\r\n        const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n        return diffMinutes <= 2;\r\n    };\r\n\r\n    const handleBack = () => {\r\n        navigate('/home');\r\n    };\r\n\r\n    const handleCallUser = async (callType) => {\r\n        console.log('Calling user:', receiverId, 'Type:', callType);\r\n\r\n        if (!peerConnection || peerConnection.signalingState === 'closed') {\r\n            await setupWebRTC(); // Set up WebRTC and get local media stream\r\n        }\r\n    \r\n        if (peerConnection) {\r\n            try {\r\n                const offer = await peerConnection.createOffer();\r\n                await peerConnection.setLocalDescription(offer);\r\n                socket.emit('callOffer', { offer, to: receiverId });\r\n                setIsCallActive(true);\r\n            } catch (error) {\r\n                console.error('Error creating offer:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleEndCall = () => {\r\n        if (peerConnection) {\r\n            peerConnection.close();\r\n            setPeerConnection(null);\r\n        }\r\n        if (localStream) {\r\n            localStream.getTracks().forEach(track => track.stop());\r\n            setLocalStream(null);\r\n        }\r\n        if (remoteStream) {\r\n            setRemoteStream(null);\r\n        }\r\n        setIsCallActive(false);\r\n    socket.emit('callEnd', { to: receiverId });\r\n        // socket.emit('callEnd', { to: receiverId });\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n            <div className=\"flex items-center mb-4\">\r\n                <img\r\n                    src={defaultAvatar}\r\n                    alt=\"Avatar\"\r\n                    className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n                />\r\n                <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n            </div>\r\n\r\n            <button\r\n                onClick={handleBack}\r\n                type=\"button\"\r\n                className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n            >\r\n                <div\r\n                    className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n                >\r\n                    <svg\r\n                        width=\"25px\"\r\n                        height=\"25px\"\r\n                        viewBox=\"0 0 1024 1024\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n                <p className=\"translate-x-2\">Go Back</p>\r\n            </button>\r\n\r\n            <div className=\"flex justify-end mb-4\">\r\n                <button\r\n                    onClick={() => handleCallUser('voice')}\r\n                    className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n                >\r\n                    <PhoneIcon className=\"w-6 h-6\" />\r\n                </button>\r\n                <button\r\n                    onClick={() => handleCallUser('video')}\r\n                    className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n                >\r\n                    <VideoCameraIcon className=\"w-6 h-6\" />\r\n                </button>\r\n                {isCallActive && (\r\n        <button onClick={handleEndCall} className=\"p-2 text-red-500\">\r\n            End Call\r\n        </button>\r\n    )}\r\n            </div>\r\n\r\n            {localStream && (\r\n                <div className=\"fixed bottom-20 right-0 m-4 w-32 h-32 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        muted\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = localStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n{remoteStream && (\r\n                <div className=\"fixed bottom-0 right-40 m-4 w-64 h-64 border border-gray-400 rounded-lg overflow-hidden\">\r\n                    <video\r\n                        autoPlay\r\n                        ref={(video) => {\r\n                            if (video) {\r\n                                video.srcObject = remoteStream;\r\n                            }\r\n                        }}\r\n                        className=\"w-full h-full object-cover\"\r\n                    />\r\n                </div>\r\n            )}\r\n\r\n\r\n            <div className=\"flex flex-col flex-grow\">\r\n                {/* Fixed Size Message Container */}\r\n                <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n                    <div className=\"flex flex-col gap-2\">\r\n                        {messages.length > 0 ? (\r\n                            messages.map((message) => (\r\n                                <div\r\n                                    key={message.id}\r\n                                    className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n                                    onMouseEnter={() => setHoveredMessageId(message.id)}\r\n                                    onMouseLeave={() => setHoveredMessageId(null)}\r\n                                >\r\n                                    <div className=\"text-sm\">{message.content}</div>\r\n                                    {hoveredMessageId === message.id && (\r\n                                        <div className=\"absolute bottom-2 right-2 flex space-x-1\">\r\n                                            {['👍', '❤️', '😂'].map((reaction) => (\r\n                                                <button\r\n                                                    key={reaction}\r\n                                                    onClick={() => handleAddReaction(message.id, reaction)}\r\n                                                    className=\"text-xl\"\r\n                                                >\r\n                                                    {reaction}\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    )}\r\n                                    <div className=\"flex space-x-2\">\r\n                                        {reactions[message.id]?.map((reaction, index) => (\r\n                                            <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n                                        ))}\r\n                                    </div>\r\n                                    {isMessageDeletable(message.created_at) && (\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                handleDeleteMessage(message.id);\r\n                                                setMessages((prevMessages) =>\r\n                                                    prevMessages.filter((msg) => msg.id !== message.id)\r\n                                                );\r\n                                            }}\r\n                                            className=\"text-red-500 absolute top-2 right-2\"\r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                            ))\r\n                        ) : (\r\n                            <p>No messages yet.</p>\r\n                        )}\r\n                        <div ref={messageEndRef} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex mt-4\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={messageText}\r\n                        onChange={(e) => setMessageText(e.target.value)}\r\n                        placeholder=\"Type your message...\"\r\n                        className=\"w-full px-3 py-2 border rounded\"\r\n                    />\r\n                    <button\r\n                        onClick={() => {\r\n                            handleSendMessage();\r\n                            setMessages((prevMessages) => [\r\n                                ...prevMessages,\r\n                                {\r\n                                    id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n                                    content: messageText,\r\n                                    from_user_id: userId,\r\n                                    created_at: new Date().toISOString(),\r\n                                },\r\n                            ]);\r\n                        }}\r\n                        className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n                    >\r\n                        Send\r\n                        <svg\r\n                            className=\"w-5 h-5\"\r\n                            stroke=\"currentColor\"\r\n                            strokeWidth=\"1.5\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n                                strokeLinejoin=\"round\"\r\n                                strokeLinecap=\"round\"\r\n                            ></path>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,aAAa,MAAM,wBAAwB,CAAC,CAAC;AACpD,SAASC,SAAS,EAAEC,eAAe,QAAQ,wBAAwB;AACnE;AACA,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxB,MAAMC,MAAM,GAAGN,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkB,SAAS,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}