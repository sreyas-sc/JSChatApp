{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreyas\\\\OneDrive\\\\Desktop\\\\BellaCode\\\\chat-app-frontend\\\\src\\\\components\\\\Chatpage.js\",\n  _s = $RefreshSig$();\n// // // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // // import { io } from 'socket.io-client';\n// // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // // const ChatPage = () => {\n// // // // //     const [messages, setMessages] = useState([]);\n// // // // //     const [messageText, setMessageText] = useState('');\n// // // // //     const messageEndRef = useRef(null);\n// // // // //     const navigate = useNavigate();\n// // // // //     const { receiverId } = useParams();\n\n// // // // //     const userId = localStorage.getItem('userId');\n// // // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // // //     useEffect(() => {\n// // // // //         if (!receiverId) return;\n\n// // // // //         // Socket connection events\n// // // // //         socket.on('connect', () => {\n// // // // //             console.log('Connected to socket server');\n// // // // //         });\n\n// // // // //         socket.on('disconnect', () => {\n// // // // //             console.log('Disconnected from socket server');\n// // // // //         });\n\n// // // // //         // const fetchMessages = async () => {\n// // // // //         //     const receiverId = localStorage.getItem('userId');\n// // // // //         //     const senderId = localStorage.getItem('touserId');\n// // // // //         //     try {\n// // // // //         //         const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // //         //         const result = await response.json();\n// // // // //         //         console.log(\"result\"+result);\n// // // // //         //         if (Array.isArray(result.messages)) {\n// // // // //         //             setMessages(result.messages);\n// // // // //         //         } else {\n// // // // //         //             throw new Error('Unexpected response format');\n// // // // //         //         }\n// // // // //         //     } catch (error) {\n// // // // //         //         console.error('Failed to fetch messages:', error);\n// // // // //         //     }\n// // // // //         // };\n\n// // // // //         const fetchMessages = async () => {\n// // // // //             const receiverId = localStorage.getItem('userId');\n// // // // //             const senderId = localStorage.getItem('touserId');\n// // // // //             try {\n// // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // // //                 console.log(\"Response:\", response); // Log the raw response object\n// // // // //                 const result = await response.json();\n// // // // //                 console.log(\"Result:\", result); // Log the JSON result\n// // // // //                 if (Array.isArray(result.messages)) {\n// // // // //                     setMessages(result.messages);\n// // // // //                 } else {\n// // // // //                     throw new Error('Unexpected response format');\n// // // // //                 }\n// // // // //             } catch (error) {\n// // // // //                 console.error('Failed to fetch messages:', error);\n// // // // //             }\n// // // // //         };\n\n// // // // //         fetchMessages();\n\n// // // // //         socket.emit('joinRoom', receiverId);\n\n// // // // //         socket.on('message', (message) => {\n// // // // //             console.log('Received message:', message); // Debug message\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // // //         });\n\n// // // // //         socket.on('messageDeleted', (messageId) => {\n// // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // // //         });\n\n// // // // //         return () => {\n// // // // //             socket.off('connect');\n// // // // //             socket.off('disconnect');\n// // // // //             socket.off('message');\n// // // // //             socket.off('messageDeleted');\n// // // // //         };\n// // // // //     }, [receiverId, userId]);\n\n// // // // //     const handleSendMessage = async () => {\n// // // // //         if (messageText.trim()) {\n// // // // //             try {\n// // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // // //                     method: 'POST',\n// // // // //                     headers: {\n// // // // //                         'Content-Type': 'application/json',\n// // // // //                     },\n// // // // //                     body: JSON.stringify({\n// // // // //                         senderId: userId,\n// // // // //                         receiverId: storedToUserId,\n// // // // //                         text: messageText,\n// // // // //                     }),\n// // // // //                 });\n// // // // //                 const result = await response.json();\n// // // // //                 if (response.ok) {\n// // // // //                     setMessageText(''); // Clear the input box\n// // // // //                 } else {\n// // // // //                     console.error('SendMessage Error:', result.message);\n// // // // //                 }\n// // // // //             } catch (error) {\n// // // // //                 console.error('SendMessage Fetch Error:', error);\n// // // // //             }\n// // // // //         }\n// // // // //     };\n\n// // // // //     const handleDeleteMessage = async (messageId) => {\n// // // // //         try {\n// // // // //             await fetch('http://localhost:3001/deleteMessage', {\n// // // // //                 method: 'POST',\n// // // // //                 headers: {\n// // // // //                     'Content-Type': 'application/json',\n// // // // //                 },\n// // // // //                 body: JSON.stringify({ messageId }),\n// // // // //             });\n// // // // //         } catch (error) {\n// // // // //             console.error('DeleteMessage Error:', error);\n// // // // //         }\n// // // // //     };\n\n// // // // //     const handleBack = () => {\n// // // // //         navigate('/home');\n// // // // //     };\n\n// // // // //     const handleCallUser = () => {\n// // // // //         console.log('Calling user:', receiverId);\n// // // // //     };\n\n// // // // //     return (\n// // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // // //             <div className=\"flex items-center mb-4\">\n// // // // //                 <img\n// // // // //                     src={defaultAvatar}\n// // // // //                     alt=\"Avatar\"\n// // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // // //                 />\n// // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // // //             </div>\n\n// // // // //             <button\n// // // // //                 onClick={handleBack}\n// // // // //                 type=\"button\"\n// // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // // //             >\n// // // // //                 <div\n// // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // // //                 >\n// // // // //                     <svg\n// // // // //                         width=\"25px\"\n// // // // //                         height=\"25px\"\n// // // // //                         viewBox=\"0 0 1024 1024\"\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // // //                     >\n// // // // //                         <path\n// // // // //                             fill=\"#000000\"\n// // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // // //                         ></path>\n// // // // //                         <path\n// // // // //                             fill=\"#000000\"\n// // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // // //                         ></path>\n// // // // //                     </svg>\n// // // // //                 </div>\n// // // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // // //             </button>\n\n// // // // //             <div className=\"flex justify-end mb-4\">\n// // // // //                 <button\n// // // // //                     onClick={handleCallUser}\n// // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // // //                 >\n// // // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // // //                 </button>\n// // // // //                 <button\n// // // // //                     onClick={handleCallUser}\n// // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // // //                 >\n// // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // // //                 </button>\n// // // // //             </div>\n\n// // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\n// // // // //                 <div className=\"flex-grow\">\n// // // // //                     {messages.length > 0 ? (\n// // // // //                         messages.map((message) => (\n// // // // //                             <div\n// // // // //                                 key={message.id}\n// // // // //                                 className={`p-4 mb-2 rounded shadow ${\n// // // // //                                     message.senderId === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\n// // // // //                                 }`}\n// // // // //                             >\n// // // // //                                 <p>{message.text}</p>\n// // // // //                                 {message.senderId === userId && (\n// // // // //                                     <button\n// // // // //                                         onClick={() => handleDeleteMessage(message.id)}\n// // // // //                                         className=\"text-red-500\"\n// // // // //                                     >\n// // // // //                                         Delete\n// // // // //                                     </button>\n// // // // //                                 )}\n// // // // //                             </div>\n// // // // //                         ))\n// // // // //                     ) : (\n// // // // //                         <p>No messages yet.</p>\n// // // // //                     )}\n// // // // //                     <div ref={messageEndRef} />\n// // // // //                 </div>\n// // // // //             </div>\n\n// // // // //             <div className=\"flex\">\n// // // // //                 <input\n// // // // //                     type=\"text\"\n// // // // //                     value={messageText}\n// // // // //                     onChange={(e) => setMessageText(e.target.value)}\n// // // // //                     placeholder=\"Type your message...\"\n// // // // //                     className=\"w-full px-3 py-2 border rounded\"\n// // // // //                 />\n// // // // //                 <button\n// // // // //                     onClick={handleSendMessage}\n// // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\n// // // // //                 >\n// // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\n// // // // //                 </button>\n// // // // //             </div>\n// // // // //         </div>\n// // // // //     );\n// // // // // };\n\n// // // // // export default ChatPage;\n\n// // // // import React, { useState, useEffect, useRef } from 'react';\n// // // // import { useNavigate, useParams } from 'react-router-dom';\n// // // // import { io } from 'socket.io-client';\n// // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // // const ChatPage = () => {\n// // // //     const [messages, setMessages] = useState([]);\n// // // //     const [messageText, setMessageText] = useState('');\n// // // //     const messageEndRef = useRef(null);\n// // // //     const navigate = useNavigate();\n// // // //     const { receiverId } = useParams();\n\n// // // //     const userId = localStorage.getItem('userId');\n// // // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // // //     useEffect(() => {\n// // // //         if (!receiverId) return;\n\n// // // //         socket.on('connect', () => {\n// // // //             console.log('Connected to socket server');\n// // // //         });\n\n// // // //         socket.on('disconnect', () => {\n// // // //             console.log('Disconnected from socket server');\n// // // //         });\n\n// // // //         const fetchMessages = async () => {\n// // // //             const receiverId = localStorage.getItem('userId');\n// // // //             const senderId = localStorage.getItem('touserId');\n// // // //             try {\n// // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // // //                 const result = await response.json();\n// // // //                 console.log(\"Result:\", result);\n// // // //                 if (Array.isArray(result.messages)) {\n// // // //                     setMessages(result.messages);\n// // // //                 } else {\n// // // //                     throw new Error('Unexpected response format');\n// // // //                 }\n// // // //             } catch (error) {\n// // // //                 console.error('Failed to fetch messages:', error);\n// // // //             }\n// // // //         };\n\n// // // //         fetchMessages();\n\n// // // //         socket.emit('joinRoom', receiverId);\n\n// // // //         socket.on('message', (message) => {\n// // // //             console.log('Received message:', message); // Debug message\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // // //         });\n\n// // // //         socket.on('messageDeleted', (messageId) => {\n// // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // // //         });\n\n// // // //         return () => {\n// // // //             socket.off('connect');\n// // // //             socket.off('disconnect');\n// // // //             socket.off('message');\n// // // //             socket.off('messageDeleted');\n// // // //         };\n// // // //     }, [receiverId, userId]);\n\n// // // //     const handleSendMessage = async () => {\n// // // //         if (messageText.trim()) {\n// // // //             try {\n// // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // // //                     method: 'POST',\n// // // //                     headers: {\n// // // //                         'Content-Type': 'application/json',\n// // // //                     },\n// // // //                     body: JSON.stringify({\n// // // //                         senderId: userId,\n// // // //                         receiverId: storedToUserId,\n// // // //                         text: messageText,\n// // // //                     }),\n// // // //                 });\n// // // //                 const result = await response.json();\n// // // //                 if (response.ok) {\n// // // //                     setMessageText(''); // Clear the input box\n// // // //                 } else {\n// // // //                     console.error('SendMessage Error:', result.message);\n// // // //                 }\n// // // //             } catch (error) {\n// // // //                 console.error('SendMessage Fetch Error:', error);\n// // // //             }\n// // // //         }\n// // // //     };\n\n// // // //     const handleDeleteMessage = async (messageId) => {\n// // // //         try {\n// // // //             await fetch('http://localhost:3001/deleteMessage', {\n// // // //                 method: 'POST',\n// // // //                 headers: {\n// // // //                     'Content-Type': 'application/json',\n// // // //                 },\n// // // //                 body: JSON.stringify({ messageId }),\n// // // //             });\n// // // //         } catch (error) {\n// // // //             console.error('DeleteMessage Error:', error);\n// // // //         }\n// // // //     };\n\n// // // //     const handleBack = () => {\n// // // //         navigate('/home');\n// // // //     };\n\n// // // //     const handleCallUser = () => {\n// // // //         console.log('Calling user:', receiverId);\n// // // //     };\n\n// // // //     return (\n// // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // // //             <div className=\"flex items-center mb-4\">\n// // // //                 <img\n// // // //                     src={defaultAvatar}\n// // // //                     alt=\"Avatar\"\n// // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // // //                 />\n// // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // // //             </div>\n\n// // // //             <button\n// // // //                 onClick={handleBack}\n// // // //                 type=\"button\"\n// // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // // //             >\n// // // //                 <div\n// // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // // //                 >\n// // // //                     <svg\n// // // //                         width=\"25px\"\n// // // //                         height=\"25px\"\n// // // //                         viewBox=\"0 0 1024 1024\"\n// // // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // // //                     >\n// // // //                         <path\n// // // //                             fill=\"#000000\"\n// // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // // //                         ></path>\n// // // //                         <path\n// // // //                             fill=\"#000000\"\n// // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // // //                         ></path>\n// // // //                     </svg>\n// // // //                 </div>\n// // // //                 <p className=\"translate-x-2\">Go Back</p>\n// // // //             </button>\n\n// // // //             <div className=\"flex justify-end mb-4\">\n// // // //                 <button\n// // // //                     onClick={handleCallUser}\n// // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // // //                 >\n// // // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // // //                 </button>\n// // // //                 <button\n// // // //                     onClick={handleCallUser}\n// // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // // //                 >\n// // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // // //                 </button>\n// // // //             </div>\n\n// // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\n// // // //                 <div className=\"flex-grow\">\n// // // //                     {messages.length > 0 ? (\n// // // //                         messages.map((message) => (\n// // // //                             <div\n// // // //                                 key={message.id}\n// // // //                                 className={`p-4 mb-2 rounded shadow ${\n// // // //                                     message.from_user_id === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\n// // // //                                 }`}\n// // // //                             >\n// // // //                                 <p>{message.content}</p>\n// // // //                                 {message.from_user_id === userId && (\n// // // //                                     <button\n// // // //                                         onClick={() => handleDeleteMessage(message.id)}\n// // // //                                         className=\"text-red-500\"\n// // // //                                     >\n// // // //                                         Delete\n// // // //                                     </button>\n// // // //                                 )}\n// // // //                             </div>\n// // // //                         ))\n// // // //                     ) : (\n// // // //                         <p>No messages yet.</p>\n// // // //                     )}\n// // // //                     <div ref={messageEndRef} />\n// // // //                 </div>\n// // // //             </div>\n\n// // // //             <div className=\"flex\">\n// // // //                 <input\n// // // //                     type=\"text\"\n// // // //                     value={messageText}\n// // // //                     onChange={(e) => setMessageText(e.target.value)}\n// // // //                     placeholder=\"Type your message...\"\n// // // //                     className=\"w-full px-3 py-2 border rounded\"\n// // // //                 />\n// // // //                 <button\n// // // //                     onClick={handleSendMessage}\n// // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\n// // // //                 >\n// // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\n// // // //                 </button>\n// // // //             </div>\n// // // //         </div>\n// // // //     );\n// // // // };\n\n// // // // export default ChatPage;\n\n// // // import React, { useState, useEffect, useRef } from 'react';\n// // // import { useNavigate, useParams } from 'react-router-dom';\n// // // import { io } from 'socket.io-client';\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // // const ChatPage = () => {\n// // //     const [messages, setMessages] = useState([]);\n// // //     const [messageText, setMessageText] = useState('');\n// // //     const messageEndRef = useRef(null);\n// // //     const navigate = useNavigate();\n// // //     const { receiverId } = useParams();\n\n// // //     const userId = localStorage.getItem('userId');\n// // //     const storedToUserId = localStorage.getItem('touserId');\n\n// // //     useEffect(() => {\n// // //         if (!receiverId) return;\n\n// // //         socket.on('connect', () => {\n// // //             console.log('Connected to socket server');\n// // //         });\n\n// // //         socket.on('disconnect', () => {\n// // //             console.log('Disconnected from socket server');\n// // //         });\n\n// // //         const fetchMessages = async () => {\n// // //             const receiverId = localStorage.getItem('userId');\n// // //             const senderId = localStorage.getItem('touserId');\n// // //             try {\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// // //                 const result = await response.json();\n// // //                 console.log(\"Result:\", result);\n// // //                 if (Array.isArray(result.messages)) {\n// // //                     setMessages(result.messages);\n// // //                 } else {\n// // //                     throw new Error('Unexpected response format');\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('Failed to fetch messages:', error);\n// // //             }\n// // //         };\n\n// // //         fetchMessages();\n\n// // //         socket.emit('joinRoom', receiverId);\n\n// // //         socket.on('message', (message) => {\n// // //             console.log('Received message:', message); // Debug message\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// // //         });\n\n// // //         socket.on('messageDeleted', (messageId) => {\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// // //         });\n\n// // //         return () => {\n// // //             socket.off('connect');\n// // //             socket.off('disconnect');\n// // //             socket.off('message');\n// // //             socket.off('messageDeleted');\n// // //         };\n// // //     }, [receiverId, userId]);\n\n// // //     const handleSendMessage = async () => {\n// // //         if (messageText.trim()) {\n// // //             try {\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// // //                     method: 'POST',\n// // //                     headers: {\n// // //                         'Content-Type': 'application/json',\n// // //                     },\n// // //                     body: JSON.stringify({\n// // //                         senderId: userId,\n// // //                         receiverId: storedToUserId,\n// // //                         text: messageText,\n// // //                     }),\n// // //                 });\n// // //                 const result = await response.json();\n// // //                 if (response.ok) {\n// // //                     setMessageText(''); // Clear the input box\n// // //                 } else {\n// // //                     console.error('SendMessage Error:', result.message);\n// // //                 }\n// // //             } catch (error) {\n// // //                 console.error('SendMessage Fetch Error:', error);\n// // //             }\n// // //         }\n// // //     };\n\n// // //     const handleDeleteMessage = async (messageId) => {\n// // //         try {\n// // //             await fetch('http://localhost:3001/deleteMessage', {\n// // //                 method: 'POST',\n// // //                 headers: {\n// // //                     'Content-Type': 'application/json',\n// // //                 },\n// // //                 body: JSON.stringify({ messageId }),\n// // //             });\n// // //         } catch (error) {\n// // //             console.error('DeleteMessage Error:', error);\n// // //         }\n// // //     };\n\n// // //     const handleBack = () => {\n// // //         navigate('/home');\n// // //     };\n\n// // //     const handleCallUser = () => {\n// // //         console.log('Calling user:', receiverId);\n// // //     };\n\n// // //     return (\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// // //             <div className=\"flex items-center mb-4\">\n// // //                 <img\n// // //                     src={defaultAvatar}\n// // //                     alt=\"Avatar\"\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// // //                 />\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// // //             </div>\n\n// // //             <button\n// // //                 onClick={handleBack}\n// // //                 type=\"button\"\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// // //             >\n// // //                 <div\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// // //                 >\n// // //                     <svg\n// // //                         width=\"25px\"\n// // //                         height=\"25px\"\n// // //                         viewBox=\"0 0 1024 1024\"\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // //                     >\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// // //                         ></path>\n// // //                         <path\n// // //                             fill=\"#000000\"\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// // //                         ></path>\n// // //                     </svg>\n// // //                 </div>\n// // //                 <p className=\"translate-x-2\">Go Back</p>\n// // //             </button>\n\n// // //             <div className=\"flex justify-end mb-4\">\n// // //                 <button\n// // //                     onClick={handleCallUser}\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// // //                 >\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //                 <button\n// // //                     onClick={handleCallUser}\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// // //                 >\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// // //                 </button>\n// // //             </div>\n\n// // //             <div className=\"flex flex-col flex-grow\">\n// // //                 {/* Fixed Size Message Container */}\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4  overflow-y-auto\">\n// // //                 {/* <div className=\"w-full max-w-xl mx-auto h-96 bg-gray-100 p-4 rounded-xl overflow-y-auto\"> */}\n\n// // //                     <div className=\"flex flex-col gap-2\">\n// // //                         {messages.length > 0 ? (\n// // //                             messages.map((message) => (\n// // //                                 <div\n// // //                                     key={message.id}\n// // //                                     className={`p-4 max-w-max rounded shadow ${\n// // //                                         message.from_user_id === userId\n// // //                                             ? 'bg-blue-200 self-end'\n// // //                                             : 'bg-white self-start'\n// // //                                     }`}\n// // //                                 >\n// // //                                     <p>{message.content}</p>\n// // //                                     {message.from_user_id === userId && (\n// // //                                         <button\n// // //                                             onClick={() => handleDeleteMessage(message.id)}\n// // //                                             className=\"text-red-500\"\n// // //                                         >\n// // //                                             Delete\n// // //                                         </button>\n// // //                                     )}\n// // //                                 </div>\n// // //                             ))\n// // //                         ) : (\n// // //                             <p>No messages yet.</p>\n// // //                         )}\n// // //                         <div ref={messageEndRef} />\n// // //                     </div>\n// // //                 </div>\n\n// // //                 <div className=\"flex mt-4\">\n// // //                     <input\n// // //                         type=\"text\"\n// // //                         value={messageText}\n// // //                         onChange={(e) => setMessageText(e.target.value)}\n// // //                         placeholder=\"Type your message...\"\n// // //                         className=\"w-full px-3 py-2 border rounded\"\n// // //                     />\n// // //                     <button\n// // //                     onClick={handleSendMessage}\n// // //                     class=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// // //                     >\n// // //                     Send\n// // //                     <svg\n// // //                         class=\"w-5 h-5\"\n// // //                         stroke=\"currentColor\"\n// // //                         stroke-width=\"1.5\"\n// // //                         viewBox=\"0 0 24 24\"\n// // //                         fill=\"none\"\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\n// // //                     >\n// // //                         <path\n// // //                         d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// // //                         stroke-linejoin=\"round\"\n// // //                         stroke-linecap=\"round\"\n// // //                         ></path>\n// // //                     </svg>\n// // //                     </button>\n\n// // //                 </div>\n// // //             </div>\n// // //         </div>\n// // //     );\n// // // };\n\n// // // export default ChatPage;\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import { useNavigate, useParams } from 'react-router-dom';\n// // import { io } from 'socket.io-client';\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\n\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// // const ChatPage = () => {\n// //     const [messages, setMessages] = useState([]);\n// //     const [messageText, setMessageText] = useState('');\n// //     const messageEndRef = useRef(null);\n// //     const navigate = useNavigate();\n// //     const { receiverId } = useParams();\n\n// //     const userId = localStorage.getItem('userId');\n// //     const storedToUserId = localStorage.getItem('touserId');\n\n// //     useEffect(() => {\n// //         if (!receiverId) return;\n\n// //         socket.on('connect', () => {\n// //             console.log('Connected to socket server');\n// //         });\n\n// //         socket.on('disconnect', () => {\n// //             console.log('Disconnected from socket server');\n// //         });\n\n// //         const fetchMessages = async () => {\n// //             const receiverId = localStorage.getItem('userId');\n// //             const senderId = localStorage.getItem('touserId');\n// //             try {\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n// //                 const result = await response.json();\n// //                 if (Array.isArray(result.messages)) {\n// //                     setMessages(result.messages);\n// //                 } else {\n// //                     throw new Error('Unexpected response format');\n// //                 }\n// //             } catch (error) {\n// //                 console.error('Failed to fetch messages:', error);\n// //             }\n// //         };\n\n// //         fetchMessages();\n\n// //         socket.emit('joinRoom', receiverId);\n\n// //         socket.on('message', (message) => {\n// //             console.log('Received message:', message);\n// //             setMessages((prevMessages) => [...prevMessages, message]);\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n// //         });\n\n// //         socket.on('messageDeleted', (messageId) => {\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n// //         });\n\n// //         return () => {\n// //             socket.off('connect');\n// //             socket.off('disconnect');\n// //             socket.off('message');\n// //             socket.off('messageDeleted');\n// //         };\n// //     }, [receiverId, userId]);\n\n// //     const handleSendMessage = async () => {\n// //         if (messageText.trim()) {\n// //             try {\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\n// //                     method: 'POST',\n// //                     headers: {\n// //                         'Content-Type': 'application/json',\n// //                     },\n// //                     body: JSON.stringify({\n// //                         senderId: userId,\n// //                         receiverId: storedToUserId,\n// //                         text: messageText,\n// //                     }),\n// //                 });\n// //                 const result = await response.json();\n// //                 if (response.ok) {\n// //                     setMessageText(''); // Clear the input box\n// //                 } else {\n// //                     console.error('SendMessage Error:', result.message);\n// //                 }\n// //             } catch (error) {\n// //                 console.error('SendMessage Fetch Error:', error);\n// //             }\n// //         }\n// //     };\n\n// //     const handleDeleteMessage = async (messageId) => {\n// //         try {\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\n// //                 method: 'POST',\n// //                 headers: {\n// //                     'Content-Type': 'application/json',\n// //                 },\n// //                 body: JSON.stringify({ messageId }),\n// //             });\n// //             const result = await response.json();\n// //             if (response.ok) {\n// //                 // Optionally, you can provide user feedback here\n// //             } else {\n// //                 console.error('DeleteMessage Error:', result.message);\n// //             }\n// //         } catch (error) {\n// //             console.error('DeleteMessage Fetch Error:', error);\n// //         }\n// //     };\n\n// //     const isMessageDeletable = (createdAt) => {\n// //         const messageTime = new Date(createdAt);\n// //         const currentTime = new Date();\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n// //         return diffMinutes <= 2;\n// //     };\n\n// //     const handleBack = () => {\n// //         navigate('/home');\n// //     };\n\n// //     const handleCallUser = () => {\n// //         console.log('Calling user:', receiverId);\n// //     };\n\n// //     return (\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n// //             <div className=\"flex items-center mb-4\">\n// //                 <img\n// //                     src={defaultAvatar}\n// //                     alt=\"Avatar\"\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n// //                 />\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n// //             </div>\n\n// //             <button\n// //                 onClick={handleBack}\n// //                 type=\"button\"\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n// //             >\n// //                 <div\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n// //                 >\n// //                     <svg\n// //                         width=\"25px\"\n// //                         height=\"25px\"\n// //                         viewBox=\"0 0 1024 1024\"\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\n// //                     >\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n// //                         ></path>\n// //                         <path\n// //                             fill=\"#000000\"\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n// //                         ></path>\n// //                     </svg>\n// //                 </div>\n// //                 <p className=\"translate-x-2\">Go Back</p>\n// //             </button>\n\n// //             <div className=\"flex justify-end mb-4\">\n// //                 <button\n// //                     onClick={handleCallUser}\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n// //                 >\n// //                     <PhoneIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //                 <button\n// //                     onClick={handleCallUser}\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n// //                 >\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\n// //                 </button>\n// //             </div>\n\n// //             <div className=\"flex flex-col flex-grow\">\n// //                 {/* Fixed Size Message Container */}\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n// //                     <div className=\"flex flex-col gap-2\">\n// //                         {messages.length > 0 ? (\n// //                             messages.map((message) => (\n// //                                 <div\n// //                                     key={message.id}\n// //                                     className={`p-4 max-w-max rounded shadow ${\n// //                                         message.from_user_id === userId\n// //                                             ? 'bg-blue-200 self-end'\n// //                                             : 'bg-white self-start'\n// //                                     }`}\n// //                                 >\n// //                                     <p>{message.content}</p>\n// //                                     {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\n// //                                         <button\n// //                                             onClick={() => {\n// //                                                 handleDeleteMessage(message.id);\n// //                                                 setMessages((prevMessages) =>\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\n// //                                                 );\n// //                                             }}\n// //                                             className=\"text-red-500\"\n// //                                         >\n// //                                             Delete\n// //                                         </button>\n// //                                     )}\n// //                                 </div>\n// //                             ))\n// //                         ) : (\n// //                             <p>No messages yet.</p>\n// //                         )}\n// //                         <div ref={messageEndRef} />\n// //                     </div>\n// //                 </div>\n\n// //                 <div className=\"flex mt-4\">\n// //                     <input\n// //                         type=\"text\"\n// //                         value={messageText}\n// //                         onChange={(e) => setMessageText(e.target.value)}\n// //                         placeholder=\"Type your message...\"\n// //                         className=\"w-full px-3 py-2 border rounded\"\n// //                     />\n// //                     <button\n// //                         onClick={() => {\n// //                             handleSendMessage();\n// //                             setMessages((prevMessages) => [\n// //                                 ...prevMessages,\n// //                                 {\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n// //                                     content: messageText,\n// //                                     from_user_id: userId,\n// //                                     created_at: new Date().toISOString(),\n// //                                 },\n// //                             ]);\n// //                         }}\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n// //                     >\n// //                         Send\n// //                         <svg\n// //                             className=\"w-5 h-5\"\n// //                             stroke=\"currentColor\"\n// //                             strokeWidth=\"1.5\"\n// //                             viewBox=\"0 0 24 24\"\n// //                             fill=\"none\"\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\n// //                         >\n// //                             <path\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n// //                                 strokeLinejoin=\"round\"\n// //                                 strokeLinecap=\"round\"\n// //                             ></path>\n// //                         </svg>\n// //                     </button>\n// //                 </div>\n// //             </div>\n// //         </div>\n// //     );\n// // };\n\n// // export default ChatPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import { io } from 'socket.io-client';\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\n// import 'webrtc-adapter';\n\n// const socket = io('http://localhost:3001'); // Replace with your server URL\n\n// const ChatPage = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [messageText, setMessageText] = useState('');\n//     const [reactions, setReactions] = useState({});\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\n//     const messageEndRef = useRef(null);\n//     const navigate = useNavigate();\n//     const { receiverId } = useParams();\n\n//     const userId = localStorage.getItem('userId');\n//     const storedToUserId = localStorage.getItem('touserId');\n\n//     useEffect(() => {\n//         if (!receiverId) return;\n\n//         socket.on('connect', () => {\n//             console.log('Connected to socket server');\n//         });\n\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from socket server');\n//         });\n\n//         const fetchMessages = async () => {\n//             const receiverId = localStorage.getItem('userId');\n//             const senderId = localStorage.getItem('touserId');\n//             try {\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\n//                 const result = await response.json();\n//                 if (Array.isArray(result.messages)) {\n//                     setMessages(result.messages);\n//                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n//                 } else {\n//                     throw new Error('Unexpected response format');\n//                 }\n//             } catch (error) {\n//                 console.error('Failed to fetch messages:', error);\n//             }\n//         };\n\n//         const fetchReactions = async (messageIds) => {\n//             try {\n//                 const response = await fetch('http://localhost:3001/getReactions', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({ messageIds }),\n//                 });\n//                 const result = await response.json();\n//                 setReactions(result.reactions);\n//             } catch (error) {\n//                 console.error('Failed to fetch reactions:', error);\n//             }\n//         };\n\n//         fetchMessages();\n\n//         socket.emit('joinRoom', receiverId);\n\n//         socket.on('message', (message) => {\n//             console.log('Received message:', message);\n//             setMessages((prevMessages) => [...prevMessages, message]);\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//         });\n\n//         socket.on('messageDeleted', (messageId) => {\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\n//         });\n\n//         socket.on('reaction', (reaction) => {\n//             setReactions((prevReactions) => {\n//                 const updatedReactions = { ...prevReactions };\n//                 if (!updatedReactions[reaction.messageId]) {\n//                     updatedReactions[reaction.messageId] = [];\n//                 }\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\n//                     (r) => r.userId !== reaction.userId\n//                 );\n//                 updatedReactions[reaction.messageId].push(reaction);\n//                 return updatedReactions;\n//             });\n//         });\n\n//         return () => {\n//             socket.off('connect');\n//             socket.off('disconnect');\n//             socket.off('message');\n//             socket.off('messageDeleted');\n//             socket.off('reaction');\n//         };\n//     }, [receiverId, userId]);\n\n//     const handleSendMessage = async () => {\n//         if (messageText.trim()) {\n//             try {\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\n//                     method: 'POST',\n//                     headers: {\n//                         'Content-Type': 'application/json',\n//                     },\n//                     body: JSON.stringify({\n//                         senderId: userId,\n//                         receiverId: storedToUserId,\n//                         text: messageText,\n//                     }),\n//                 });\n//                 const result = await response.json();\n//                 if (response.ok) {\n//                     setMessageText(''); // Clear the input box\n//                 } else {\n//                     console.error('SendMessage Error:', result.message);\n//                 }\n//             } catch (error) {\n//                 console.error('SendMessage Fetch Error:', error);\n//             }\n//         }\n//     };\n\n//     const handleDeleteMessage = async (messageId) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId }),\n//             });\n//             const result = await response.json();\n//             if (response.ok) {\n//                 // Optionally, you can provide user feedback here\n//             } else {\n//                 console.error('DeleteMessage Error:', result.message);\n//             }\n//         } catch (error) {\n//             console.error('DeleteMessage Fetch Error:', error);\n//         }\n//     };\n\n//     // const handleAddReaction = async (messageId, reactionType) => {\n//     //     try {\n//     //         await fetch('http://localhost:3001/addReaction', {\n//     //             method: 'POST',\n//     //             headers: {\n//     //                 'Content-Type': 'application/json',\n//     //             },\n//     //             body: JSON.stringify({ messageId, userId, reactionType }),\n//     //         });\n//     //         socket.emit('reaction', { messageId, userId, reactionType });\n//     //     } catch (error) {\n//     //         console.error('AddReaction Fetch Error:', error);\n//     //     }\n//     // };\n//     const handleAddReaction = async (messageId, reactionType) => {\n//         try {\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\n//             });\n\n//             if (response.ok) {\n//                 const result = await response.json();\n//                 console.log('Reaction added successfully:', result);\n//             } else {\n//                 const errorText = await response.text();\n//                 console.error('AddReaction Error:', errorText);\n//             }\n//         } catch (error) {\n//             console.error('AddReaction Fetch Error:', error);\n//         }\n//     };\n\n//     const isMessageDeletable = (createdAt) => {\n//         const messageTime = new Date(createdAt);\n//         const currentTime = new Date();\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n//         return diffMinutes <= 2;\n//     };\n\n//     const handleBack = () => {\n//         navigate('/home');\n//     };\n\n//     const handleCallUser = () => {\n//         console.log('Calling user:', receiverId);\n//     };\n\n//     return (\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\n//             <div className=\"flex items-center mb-4\">\n//                 <img\n//                     src={defaultAvatar}\n//                     alt=\"Avatar\"\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n//                 />\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\n//             </div>\n\n//             <button\n//                 onClick={handleBack}\n//                 type=\"button\"\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\n//             >\n//                 <div\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\n//                 >\n//                     <svg\n//                         width=\"25px\"\n//                         height=\"25px\"\n//                         viewBox=\"0 0 1024 1024\"\n//                         xmlns=\"http://www.w3.org/2000/svg\"\n//                     >\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n//                         ></path>\n//                         <path\n//                             fill=\"#000000\"\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\n//                         ></path>\n//                     </svg>\n//                 </div>\n//                 <p className=\"translate-x-2\">Go Back</p>\n//             </button>\n\n//             <div className=\"flex justify-end mb-4\">\n//                 <button\n//                     onClick={handleCallUser}\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\n//                 >\n//                     <PhoneIcon className=\"w-6 h-6\" />\n//                 </button>\n//                 <button\n//                     onClick={handleCallUser}\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\n//                 >\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\n//                 </button>\n//             </div>\n\n//             <div className=\"flex flex-col flex-grow\">\n//                 {/* Fixed Size Message Container */}\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\n//                     <div className=\"flex flex-col gap-2\">\n//                         {messages.length > 0 ? (\n//                             messages.map((message) => (\n//                                 <div\n//                                     key={message.id}\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\n//                                 >\n//                                     <div className=\"text-sm\">{message.content}</div>\n//                                     {hoveredMessageId === message.id && (\n//                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\n//                                                 <button\n//                                                     key={reaction}\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\n//                                                     className=\"text-xl\"\n//                                                 >\n//                                                     {reaction}\n//                                                 </button>\n//                                             ))}\n//                                         </div>\n//                                     )}\n//                                     <div className=\"flex space-x-2\">\n//                                         {reactions[message.id]?.map((reaction, index) => (\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\n//                                         ))}\n//                                     </div>\n//                                     {isMessageDeletable(message.created_at) && (\n//                                         <button\n//                                             onClick={() => {\n//                                                 handleDeleteMessage(message.id);\n//                                                 setMessages((prevMessages) =>\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\n//                                                 );\n//                                             }}\n//                                             className=\"text-red-500 absolute top-2 right-2\"\n//                                         >\n//                                             Delete\n//                                         </button>\n//                                     )}\n//                                 </div>\n//                             ))\n//                         ) : (\n//                             <p>No messages yet.</p>\n//                         )}\n//                         <div ref={messageEndRef} />\n//                     </div>\n//                 </div>\n\n//                 <div className=\"flex mt-4\">\n//                     <input\n//                         type=\"text\"\n//                         value={messageText}\n//                         onChange={(e) => setMessageText(e.target.value)}\n//                         placeholder=\"Type your message...\"\n//                         className=\"w-full px-3 py-2 border rounded\"\n//                     />\n//                     <button\n//                         onClick={() => {\n//                             handleSendMessage();\n//                             setMessages((prevMessages) => [\n//                                 ...prevMessages,\n//                                 {\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\n//                                     content: messageText,\n//                                     from_user_id: userId,\n//                                     created_at: new Date().toISOString(),\n//                                 },\n//                             ]);\n//                         }}\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\n//                     >\n//                         Send\n//                         <svg\n//                             className=\"w-5 h-5\"\n//                             stroke=\"currentColor\"\n//                             strokeWidth=\"1.5\"\n//                             viewBox=\"0 0 24 24\"\n//                             fill=\"none\"\n//                             xmlns=\"http://www.w3.org/2000/svg\"\n//                         >\n//                             <path\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\n//                                 strokeLinejoin=\"round\"\n//                                 strokeLinecap=\"round\"\n//                             ></path>\n//                         </svg>\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default ChatPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport Peer from 'peerjs';\nimport defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\nimport 'webrtc-adapter'; // For WebRTC compatibility\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:3001'); // Replace with your server URL\n\nconst ChatPage = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageText, setMessageText] = useState('');\n  const [reactions, setReactions] = useState({});\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [myStream, setMyStream] = useState(null);\n  const [remoteStream, setRemoteStream] = useState(null);\n  const [callActive, setCallActive] = useState(false);\n  const [currentCall, setCurrentCall] = useState(null);\n  const messageEndRef = useRef(null);\n  const navigate = useNavigate();\n  const {\n    receiverId\n  } = useParams();\n  const userId = localStorage.getItem('userId');\n  const storedToUserId = localStorage.getItem('touserId');\n\n  // Initialize PeerJS\n  const peer = new Peer(userId, {\n    host: 'localhost',\n    port: 3001,\n    path: '/peerjs'\n  });\n  useEffect(() => {\n    if (!receiverId) return;\n\n    // Setup socket connection\n    socket.on('connect', () => {\n      console.log('Connected to socket server');\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n    });\n    const fetchMessages = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${storedToUserId}&toUserId=${userId}`);\n        const result = await response.json();\n        if (Array.isArray(result.messages)) {\n          setMessages(result.messages);\n          fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\n        } else {\n          throw new Error('Unexpected response format');\n        }\n      } catch (error) {\n        console.error('Failed to fetch messages:', error);\n      }\n    };\n    const fetchReactions = async messageIds => {\n      try {\n        const response = await fetch('http://localhost:3001/getReactions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            messageIds\n          })\n        });\n        const result = await response.json();\n        setReactions(result.reactions);\n      } catch (error) {\n        console.error('Failed to fetch reactions:', error);\n      }\n    };\n    fetchMessages();\n    socket.emit('joinRoom', receiverId);\n    socket.on('message', message => {\n      var _messageEndRef$curren;\n      console.log('Received message:', message);\n      setMessages(prevMessages => [...prevMessages, message]);\n      (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n    socket.on('messageDeleted', messageId => {\n      setMessages(prevMessages => prevMessages.filter(msg => msg.id !== messageId));\n    });\n    socket.on('reaction', reaction => {\n      setReactions(prevReactions => {\n        const updatedReactions = {\n          ...prevReactions\n        };\n        if (!updatedReactions[reaction.messageId]) {\n          updatedReactions[reaction.messageId] = [];\n        }\n        updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(r => r.userId !== reaction.userId);\n        updatedReactions[reaction.messageId].push(reaction);\n        return updatedReactions;\n      });\n    });\n\n    // Setup WebRTC\n    const getUserMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        setMyStream(stream);\n      } catch (error) {\n        console.error('Error accessing media devices.', error);\n      }\n    };\n    getUserMedia();\n    peer.on('call', call => {\n      call.answer(myStream);\n      call.on('stream', stream => {\n        setRemoteStream(stream);\n        setCallActive(true);\n        setCurrentCall(call);\n      });\n    });\n    return () => {\n      socket.off('connect');\n      socket.off('disconnect');\n      socket.off('message');\n      socket.off('messageDeleted');\n      socket.off('reaction');\n      peer.destroy();\n    };\n  }, [receiverId, userId, myStream, peer]);\n  const handleSendMessage = async () => {\n    if (messageText.trim()) {\n      try {\n        const response = await fetch('http://localhost:3001/sendMessage', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            senderId: userId,\n            receiverId: storedToUserId,\n            text: messageText\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          setMessageText(''); // Clear the input box\n        } else {\n          console.error('SendMessage Error:', result.message);\n        }\n      } catch (error) {\n        console.error('SendMessage Fetch Error:', error);\n      }\n    }\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      const response = await fetch('http://localhost:3001/deleteMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        // Optionally, you can provide user feedback here\n      } else {\n        console.error('DeleteMessage Error:', result.message);\n      }\n    } catch (error) {\n      console.error('DeleteMessage Fetch Error:', error);\n    }\n  };\n  const handleAddReaction = async (messageId, reactionType) => {\n    try {\n      const response = await fetch('http://localhost:3001/addReaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId,\n          userId,\n          reactionType\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('Reaction added successfully:', result);\n      } else {\n        const errorText = await response.text();\n        console.error('AddReaction Error:', errorText);\n      }\n    } catch (error) {\n      console.error('AddReaction Fetch Error:', error);\n    }\n  };\n  const isMessageDeletable = createdAt => {\n    const messageTime = new Date(createdAt);\n    const currentTime = new Date();\n    const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\n    return diffMinutes <= 2;\n  };\n  const handleBack = () => {\n    navigate('/home');\n  };\n  const handleCallUser = () => {\n    if (callActive) {\n      handleEndCall();\n    } else {\n      // Initiate voice call\n      const call = peer.call(receiverId, myStream);\n      call.on('stream', stream => {\n        setRemoteStream(stream);\n        setCallActive(true);\n        setCurrentCall(call);\n      });\n    }\n  };\n  const handleEndCall = () => {\n    if (currentCall) {\n      currentCall.close();\n      setCallActive(false);\n      setRemoteStream(null);\n      setCurrentCall(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: defaultAvatar,\n        alt: \"Avatar\",\n        className: \"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1546,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1545,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      type: \"button\",\n      className: \"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"25px\",\n          height: \"25px\",\n          viewBox: \"0 0 1024 1024\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1568,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            fill: \"#000000\",\n            d: \"m237.248 512 265.408 265.344a32 32 0 0 0 45.568-45.28L282.4 496h575.168a32 32 0 0 0 0-64H282.4l265.824-265.824a32 32 0 1 0-45.568-45.28L224 448a32 32 0 0 0 0 64z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1572,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1562,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1559,\n        columnNumber: 17\n      }, this), \"Back\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1554,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCallUser,\n        className: \"bg-blue-500 text-white p-2 rounded-lg flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(PhoneIcon, {\n          className: \"w-6 h-6 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1586,\n          columnNumber: 21\n        }, this), callActive ? 'End Call' : 'Start Call']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1582,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1581,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-auto flex-1 mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col-reverse\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-2 my-2 rounded-lg ${message.from_user_id === userId ? 'bg-blue-500 text-white self-end' : 'bg-gray-300 text-black self-start'}`,\n          onMouseEnter: () => setHoveredMessageId(message.id),\n          onMouseLeave: () => setHoveredMessageId(null),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1604,\n            columnNumber: 29\n          }, this), hoveredMessageId === message.id && isMessageDeletable(message.created_at) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteMessage(message.id),\n            className: \"text-red-500 mt-1\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1606,\n            columnNumber: 33\n          }, this), reactions[message.id] && reactions[message.id].map(reaction => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-2\",\n            children: reaction.reactionType\n          }, reaction.userId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1614,\n            columnNumber: 33\n          }, this))]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1594,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1620,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1591,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageText,\n        onChange: e => setMessageText(e.target.value),\n        className: \"flex-1 p-2 border rounded-lg mr-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1625,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"bg-blue-500 text-white p-2 rounded-lg\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1631,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1624,\n      columnNumber: 13\n    }, this), callActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed bottom-0 right-0 p-4 bg-white border border-gray-300 rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-2\",\n        children: \"Call in Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1641,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: video => {\n            if (video) {\n              video.srcObject = myStream;\n              video.play();\n            }\n          },\n          className: \"w-32 h-32\",\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1643,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: video => {\n            if (video) {\n              video.srcObject = remoteStream;\n              video.play();\n            }\n          },\n          className: \"absolute top-0 left-0 w-32 h-32\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1653,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1642,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndCall,\n        className: \"mt-4 bg-red-500 text-white py-2 px-4 rounded\",\n        children: \"End Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1663,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1640,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1544,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"biSUXFixhdoGg7li8LHgS3Ruav0=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useParams","io","Peer","defaultAvatar","PhoneIcon","VideoCameraIcon","jsxDEV","_jsxDEV","socket","ChatPage","_s","messages","setMessages","messageText","setMessageText","reactions","setReactions","hoveredMessageId","setHoveredMessageId","myStream","setMyStream","remoteStream","setRemoteStream","callActive","setCallActive","currentCall","setCurrentCall","messageEndRef","navigate","receiverId","userId","localStorage","getItem","storedToUserId","peer","host","port","path","on","console","log","fetchMessages","response","fetch","result","json","Array","isArray","fetchReactions","map","msg","id","Error","error","messageIds","method","headers","body","JSON","stringify","emit","message","_messageEndRef$curren","prevMessages","current","scrollIntoView","behavior","messageId","filter","reaction","prevReactions","updatedReactions","r","push","getUserMedia","stream","navigator","mediaDevices","audio","call","answer","off","destroy","handleSendMessage","trim","senderId","text","ok","handleDeleteMessage","handleAddReaction","reactionType","errorText","isMessageDeletable","createdAt","messageTime","Date","currentTime","diffMinutes","handleBack","handleCallUser","handleEndCall","close","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","width","height","viewBox","xmlns","fill","d","from_user_id","onMouseEnter","onMouseLeave","content","created_at","ref","value","onChange","e","target","video","srcObject","play","muted","_c","$RefreshReg$"],"sources":["C:/Users/Sreyas/OneDrive/Desktop/BellaCode/chat-app-frontend/src/components/Chatpage.js"],"sourcesContent":["// // // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // // import { io } from 'socket.io-client';\r\n// // // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // // const ChatPage = () => {\r\n// // // // //     const [messages, setMessages] = useState([]);\r\n// // // // //     const [messageText, setMessageText] = useState('');\r\n// // // // //     const messageEndRef = useRef(null);\r\n// // // // //     const navigate = useNavigate();\r\n// // // // //     const { receiverId } = useParams();\r\n\r\n// // // // //     const userId = localStorage.getItem('userId');\r\n// // // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // // //     useEffect(() => {\r\n// // // // //         if (!receiverId) return;\r\n\r\n// // // // //         // Socket connection events\r\n// // // // //         socket.on('connect', () => {\r\n// // // // //             console.log('Connected to socket server');\r\n// // // // //         });\r\n\r\n// // // // //         socket.on('disconnect', () => {\r\n// // // // //             console.log('Disconnected from socket server');\r\n// // // // //         });\r\n\r\n// // // // //         // const fetchMessages = async () => {\r\n// // // // //         //     const receiverId = localStorage.getItem('userId');\r\n// // // // //         //     const senderId = localStorage.getItem('touserId');\r\n// // // // //         //     try {\r\n// // // // //         //         const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // //         //         const result = await response.json();\r\n// // // // //         //         console.log(\"result\"+result);\r\n// // // // //         //         if (Array.isArray(result.messages)) {\r\n// // // // //         //             setMessages(result.messages);\r\n// // // // //         //         } else {\r\n// // // // //         //             throw new Error('Unexpected response format');\r\n// // // // //         //         }\r\n// // // // //         //     } catch (error) {\r\n// // // // //         //         console.error('Failed to fetch messages:', error);\r\n// // // // //         //     }\r\n// // // // //         // };\r\n\r\n// // // // //         const fetchMessages = async () => {\r\n// // // // //             const receiverId = localStorage.getItem('userId');\r\n// // // // //             const senderId = localStorage.getItem('touserId');\r\n// // // // //             try {\r\n// // // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // // //                 console.log(\"Response:\", response); // Log the raw response object\r\n// // // // //                 const result = await response.json();\r\n// // // // //                 console.log(\"Result:\", result); // Log the JSON result\r\n// // // // //                 if (Array.isArray(result.messages)) {\r\n// // // // //                     setMessages(result.messages);\r\n// // // // //                 } else {\r\n// // // // //                     throw new Error('Unexpected response format');\r\n// // // // //                 }\r\n// // // // //             } catch (error) {\r\n// // // // //                 console.error('Failed to fetch messages:', error);\r\n// // // // //             }\r\n// // // // //         };\r\n        \r\n        \r\n        \r\n// // // // //         fetchMessages();\r\n\r\n// // // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // // //         socket.on('message', (message) => {\r\n// // // // //             console.log('Received message:', message); // Debug message\r\n// // // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // // //         });\r\n\r\n// // // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // // //         });\r\n\r\n// // // // //         return () => {\r\n// // // // //             socket.off('connect');\r\n// // // // //             socket.off('disconnect');\r\n// // // // //             socket.off('message');\r\n// // // // //             socket.off('messageDeleted');\r\n// // // // //         };\r\n// // // // //     }, [receiverId, userId]);\r\n\r\n// // // // //     const handleSendMessage = async () => {\r\n// // // // //         if (messageText.trim()) {\r\n// // // // //             try {\r\n// // // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // // //                     method: 'POST',\r\n// // // // //                     headers: {\r\n// // // // //                         'Content-Type': 'application/json',\r\n// // // // //                     },\r\n// // // // //                     body: JSON.stringify({\r\n// // // // //                         senderId: userId,\r\n// // // // //                         receiverId: storedToUserId,\r\n// // // // //                         text: messageText,\r\n// // // // //                     }),\r\n// // // // //                 });\r\n// // // // //                 const result = await response.json();\r\n// // // // //                 if (response.ok) {\r\n// // // // //                     setMessageText(''); // Clear the input box\r\n// // // // //                 } else {\r\n// // // // //                     console.error('SendMessage Error:', result.message);\r\n// // // // //                 }\r\n// // // // //             } catch (error) {\r\n// // // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // // //             }\r\n// // // // //         }\r\n// // // // //     };\r\n\r\n// // // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // // //         try {\r\n// // // // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // // // //                 method: 'POST',\r\n// // // // //                 headers: {\r\n// // // // //                     'Content-Type': 'application/json',\r\n// // // // //                 },\r\n// // // // //                 body: JSON.stringify({ messageId }),\r\n// // // // //             });\r\n// // // // //         } catch (error) {\r\n// // // // //             console.error('DeleteMessage Error:', error);\r\n// // // // //         }\r\n// // // // //     };\r\n\r\n// // // // //     const handleBack = () => {\r\n// // // // //         navigate('/home');\r\n// // // // //     };\r\n\r\n// // // // //     const handleCallUser = () => {\r\n// // // // //         console.log('Calling user:', receiverId);\r\n// // // // //     };\r\n\r\n// // // // //     return (\r\n// // // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // // //             <div className=\"flex items-center mb-4\">\r\n// // // // //                 <img\r\n// // // // //                     src={defaultAvatar}\r\n// // // // //                     alt=\"Avatar\"\r\n// // // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // // //                 />\r\n// // // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // // //             </div>\r\n\r\n// // // // //             <button\r\n// // // // //                 onClick={handleBack}\r\n// // // // //                 type=\"button\"\r\n// // // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // // //             >\r\n// // // // //                 <div\r\n// // // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // // //                 >\r\n// // // // //                     <svg\r\n// // // // //                         width=\"25px\"\r\n// // // // //                         height=\"25px\"\r\n// // // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // // //                     >\r\n// // // // //                         <path\r\n// // // // //                             fill=\"#000000\"\r\n// // // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // // //                         ></path>\r\n// // // // //                         <path\r\n// // // // //                             fill=\"#000000\"\r\n// // // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // // //                         ></path>\r\n// // // // //                     </svg>\r\n// // // // //                 </div>\r\n// // // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // // //             </button>\r\n\r\n// // // // //             <div className=\"flex justify-end mb-4\">\r\n// // // // //                 <button\r\n// // // // //                     onClick={handleCallUser}\r\n// // // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // // //                 >\r\n// // // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // // //                 </button>\r\n// // // // //                 <button\r\n// // // // //                     onClick={handleCallUser}\r\n// // // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // // //                 >\r\n// // // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // // //                 </button>\r\n// // // // //             </div>\r\n\r\n// // // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\r\n// // // // //                 <div className=\"flex-grow\">\r\n// // // // //                     {messages.length > 0 ? (\r\n// // // // //                         messages.map((message) => (\r\n// // // // //                             <div\r\n// // // // //                                 key={message.id}\r\n// // // // //                                 className={`p-4 mb-2 rounded shadow ${\r\n// // // // //                                     message.senderId === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\r\n// // // // //                                 }`}\r\n// // // // //                             >\r\n// // // // //                                 <p>{message.text}</p>\r\n// // // // //                                 {message.senderId === userId && (\r\n// // // // //                                     <button\r\n// // // // //                                         onClick={() => handleDeleteMessage(message.id)}\r\n// // // // //                                         className=\"text-red-500\"\r\n// // // // //                                     >\r\n// // // // //                                         Delete\r\n// // // // //                                     </button>\r\n// // // // //                                 )}\r\n// // // // //                             </div>\r\n// // // // //                         ))\r\n// // // // //                     ) : (\r\n// // // // //                         <p>No messages yet.</p>\r\n// // // // //                     )}\r\n// // // // //                     <div ref={messageEndRef} />\r\n// // // // //                 </div>\r\n// // // // //             </div>\r\n\r\n// // // // //             <div className=\"flex\">\r\n// // // // //                 <input\r\n// // // // //                     type=\"text\"\r\n// // // // //                     value={messageText}\r\n// // // // //                     onChange={(e) => setMessageText(e.target.value)}\r\n// // // // //                     placeholder=\"Type your message...\"\r\n// // // // //                     className=\"w-full px-3 py-2 border rounded\"\r\n// // // // //                 />\r\n// // // // //                 <button\r\n// // // // //                     onClick={handleSendMessage}\r\n// // // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\r\n// // // // //                 >\r\n// // // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\r\n// // // // //                 </button>\r\n// // // // //             </div>\r\n// // // // //         </div>\r\n// // // // //     );\r\n// // // // // };\r\n\r\n// // // // // export default ChatPage;\r\n\r\n\r\n// // // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // // import { io } from 'socket.io-client';\r\n// // // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // // const ChatPage = () => {\r\n// // // //     const [messages, setMessages] = useState([]);\r\n// // // //     const [messageText, setMessageText] = useState('');\r\n// // // //     const messageEndRef = useRef(null);\r\n// // // //     const navigate = useNavigate();\r\n// // // //     const { receiverId } = useParams();\r\n\r\n// // // //     const userId = localStorage.getItem('userId');\r\n// // // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // // //     useEffect(() => {\r\n// // // //         if (!receiverId) return;\r\n\r\n// // // //         socket.on('connect', () => {\r\n// // // //             console.log('Connected to socket server');\r\n// // // //         });\r\n\r\n// // // //         socket.on('disconnect', () => {\r\n// // // //             console.log('Disconnected from socket server');\r\n// // // //         });\r\n\r\n// // // //         const fetchMessages = async () => {\r\n// // // //             const receiverId = localStorage.getItem('userId');\r\n// // // //             const senderId = localStorage.getItem('touserId');\r\n// // // //             try {\r\n// // // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // // //                 const result = await response.json();\r\n// // // //                 console.log(\"Result:\", result);\r\n// // // //                 if (Array.isArray(result.messages)) {\r\n// // // //                     setMessages(result.messages);\r\n// // // //                 } else {\r\n// // // //                     throw new Error('Unexpected response format');\r\n// // // //                 }\r\n// // // //             } catch (error) {\r\n// // // //                 console.error('Failed to fetch messages:', error);\r\n// // // //             }\r\n// // // //         };\r\n\r\n// // // //         fetchMessages();\r\n\r\n// // // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // // //         socket.on('message', (message) => {\r\n// // // //             console.log('Received message:', message); // Debug message\r\n// // // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // // //         });\r\n\r\n// // // //         socket.on('messageDeleted', (messageId) => {\r\n// // // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // // //         });\r\n\r\n// // // //         return () => {\r\n// // // //             socket.off('connect');\r\n// // // //             socket.off('disconnect');\r\n// // // //             socket.off('message');\r\n// // // //             socket.off('messageDeleted');\r\n// // // //         };\r\n// // // //     }, [receiverId, userId]);\r\n\r\n// // // //     const handleSendMessage = async () => {\r\n// // // //         if (messageText.trim()) {\r\n// // // //             try {\r\n// // // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // // //                     method: 'POST',\r\n// // // //                     headers: {\r\n// // // //                         'Content-Type': 'application/json',\r\n// // // //                     },\r\n// // // //                     body: JSON.stringify({\r\n// // // //                         senderId: userId,\r\n// // // //                         receiverId: storedToUserId,\r\n// // // //                         text: messageText,\r\n// // // //                     }),\r\n// // // //                 });\r\n// // // //                 const result = await response.json();\r\n// // // //                 if (response.ok) {\r\n// // // //                     setMessageText(''); // Clear the input box\r\n// // // //                 } else {\r\n// // // //                     console.error('SendMessage Error:', result.message);\r\n// // // //                 }\r\n// // // //             } catch (error) {\r\n// // // //                 console.error('SendMessage Fetch Error:', error);\r\n// // // //             }\r\n// // // //         }\r\n// // // //     };\r\n\r\n// // // //     const handleDeleteMessage = async (messageId) => {\r\n// // // //         try {\r\n// // // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // // //                 method: 'POST',\r\n// // // //                 headers: {\r\n// // // //                     'Content-Type': 'application/json',\r\n// // // //                 },\r\n// // // //                 body: JSON.stringify({ messageId }),\r\n// // // //             });\r\n// // // //         } catch (error) {\r\n// // // //             console.error('DeleteMessage Error:', error);\r\n// // // //         }\r\n// // // //     };\r\n\r\n// // // //     const handleBack = () => {\r\n// // // //         navigate('/home');\r\n// // // //     };\r\n\r\n// // // //     const handleCallUser = () => {\r\n// // // //         console.log('Calling user:', receiverId);\r\n// // // //     };\r\n\r\n// // // //     return (\r\n// // // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // // //             <div className=\"flex items-center mb-4\">\r\n// // // //                 <img\r\n// // // //                     src={defaultAvatar}\r\n// // // //                     alt=\"Avatar\"\r\n// // // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // // //                 />\r\n// // // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // // //             </div>\r\n\r\n// // // //             <button\r\n// // // //                 onClick={handleBack}\r\n// // // //                 type=\"button\"\r\n// // // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // // //             >\r\n// // // //                 <div\r\n// // // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // // //                 >\r\n// // // //                     <svg\r\n// // // //                         width=\"25px\"\r\n// // // //                         height=\"25px\"\r\n// // // //                         viewBox=\"0 0 1024 1024\"\r\n// // // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // // //                     >\r\n// // // //                         <path\r\n// // // //                             fill=\"#000000\"\r\n// // // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // // //                         ></path>\r\n// // // //                         <path\r\n// // // //                             fill=\"#000000\"\r\n// // // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // // //                         ></path>\r\n// // // //                     </svg>\r\n// // // //                 </div>\r\n// // // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // // //             </button>\r\n\r\n// // // //             <div className=\"flex justify-end mb-4\">\r\n// // // //                 <button\r\n// // // //                     onClick={handleCallUser}\r\n// // // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // // //                 >\r\n// // // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // // //                 </button>\r\n// // // //                 <button\r\n// // // //                     onClick={handleCallUser}\r\n// // // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // // //                 >\r\n// // // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // // //                 </button>\r\n// // // //             </div>\r\n\r\n// // // //             <div className=\"flex flex-col flex-grow overflow-y-auto mb-4\">\r\n// // // //                 <div className=\"flex-grow\">\r\n// // // //                     {messages.length > 0 ? (\r\n// // // //                         messages.map((message) => (\r\n// // // //                             <div\r\n// // // //                                 key={message.id}\r\n// // // //                                 className={`p-4 mb-2 rounded shadow ${\r\n// // // //                                     message.from_user_id === userId ? 'bg-blue-200 self-end' : 'bg-white self-start'\r\n// // // //                                 }`}\r\n// // // //                             >\r\n// // // //                                 <p>{message.content}</p>\r\n// // // //                                 {message.from_user_id === userId && (\r\n// // // //                                     <button\r\n// // // //                                         onClick={() => handleDeleteMessage(message.id)}\r\n// // // //                                         className=\"text-red-500\"\r\n// // // //                                     >\r\n// // // //                                         Delete\r\n// // // //                                     </button>\r\n// // // //                                 )}\r\n// // // //                             </div>\r\n// // // //                         ))\r\n// // // //                     ) : (\r\n// // // //                         <p>No messages yet.</p>\r\n// // // //                     )}\r\n// // // //                     <div ref={messageEndRef} />\r\n// // // //                 </div>\r\n// // // //             </div>\r\n\r\n// // // //             <div className=\"flex\">\r\n// // // //                 <input\r\n// // // //                     type=\"text\"\r\n// // // //                     value={messageText}\r\n// // // //                     onChange={(e) => setMessageText(e.target.value)}\r\n// // // //                     placeholder=\"Type your message...\"\r\n// // // //                     className=\"w-full px-3 py-2 border rounded\"\r\n// // // //                 />\r\n// // // //                 <button\r\n// // // //                     onClick={handleSendMessage}\r\n// // // //                     className=\"flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded ml-2\"\r\n// // // //                 >\r\n// // // //                     <PaperAirplaneIcon className=\"w-6 h-6\" />\r\n// // // //                 </button>\r\n// // // //             </div>\r\n// // // //         </div>\r\n// // // //     );\r\n// // // // };\r\n\r\n// // // // export default ChatPage;\r\n\r\n// // // import React, { useState, useEffect, useRef } from 'react';\r\n// // // import { useNavigate, useParams } from 'react-router-dom';\r\n// // // import { io } from 'socket.io-client';\r\n// // // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // // const ChatPage = () => {\r\n// // //     const [messages, setMessages] = useState([]);\r\n// // //     const [messageText, setMessageText] = useState('');\r\n// // //     const messageEndRef = useRef(null);\r\n// // //     const navigate = useNavigate();\r\n// // //     const { receiverId } = useParams();\r\n\r\n// // //     const userId = localStorage.getItem('userId');\r\n// // //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// // //     useEffect(() => {\r\n// // //         if (!receiverId) return;\r\n\r\n// // //         socket.on('connect', () => {\r\n// // //             console.log('Connected to socket server');\r\n// // //         });\r\n\r\n// // //         socket.on('disconnect', () => {\r\n// // //             console.log('Disconnected from socket server');\r\n// // //         });\r\n\r\n// // //         const fetchMessages = async () => {\r\n// // //             const receiverId = localStorage.getItem('userId');\r\n// // //             const senderId = localStorage.getItem('touserId');\r\n// // //             try {\r\n// // //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// // //                 const result = await response.json();\r\n// // //                 console.log(\"Result:\", result);\r\n// // //                 if (Array.isArray(result.messages)) {\r\n// // //                     setMessages(result.messages);\r\n// // //                 } else {\r\n// // //                     throw new Error('Unexpected response format');\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('Failed to fetch messages:', error);\r\n// // //             }\r\n// // //         };\r\n\r\n// // //         fetchMessages();\r\n\r\n// // //         socket.emit('joinRoom', receiverId);\r\n\r\n// // //         socket.on('message', (message) => {\r\n// // //             console.log('Received message:', message); // Debug message\r\n// // //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// // //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// // //         });\r\n\r\n// // //         socket.on('messageDeleted', (messageId) => {\r\n// // //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// // //         });\r\n\r\n// // //         return () => {\r\n// // //             socket.off('connect');\r\n// // //             socket.off('disconnect');\r\n// // //             socket.off('message');\r\n// // //             socket.off('messageDeleted');\r\n// // //         };\r\n// // //     }, [receiverId, userId]);\r\n\r\n// // //     const handleSendMessage = async () => {\r\n// // //         if (messageText.trim()) {\r\n// // //             try {\r\n// // //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// // //                     method: 'POST',\r\n// // //                     headers: {\r\n// // //                         'Content-Type': 'application/json',\r\n// // //                     },\r\n// // //                     body: JSON.stringify({\r\n// // //                         senderId: userId,\r\n// // //                         receiverId: storedToUserId,\r\n// // //                         text: messageText,\r\n// // //                     }),\r\n// // //                 });\r\n// // //                 const result = await response.json();\r\n// // //                 if (response.ok) {\r\n// // //                     setMessageText(''); // Clear the input box\r\n// // //                 } else {\r\n// // //                     console.error('SendMessage Error:', result.message);\r\n// // //                 }\r\n// // //             } catch (error) {\r\n// // //                 console.error('SendMessage Fetch Error:', error);\r\n// // //             }\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleDeleteMessage = async (messageId) => {\r\n// // //         try {\r\n// // //             await fetch('http://localhost:3001/deleteMessage', {\r\n// // //                 method: 'POST',\r\n// // //                 headers: {\r\n// // //                     'Content-Type': 'application/json',\r\n// // //                 },\r\n// // //                 body: JSON.stringify({ messageId }),\r\n// // //             });\r\n// // //         } catch (error) {\r\n// // //             console.error('DeleteMessage Error:', error);\r\n// // //         }\r\n// // //     };\r\n\r\n// // //     const handleBack = () => {\r\n// // //         navigate('/home');\r\n// // //     };\r\n\r\n// // //     const handleCallUser = () => {\r\n// // //         console.log('Calling user:', receiverId);\r\n// // //     };\r\n\r\n// // //     return (\r\n// // //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// // //             <div className=\"flex items-center mb-4\">\r\n// // //                 <img\r\n// // //                     src={defaultAvatar}\r\n// // //                     alt=\"Avatar\"\r\n// // //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// // //                 />\r\n// // //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// // //             </div>\r\n\r\n// // //             <button\r\n// // //                 onClick={handleBack}\r\n// // //                 type=\"button\"\r\n// // //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// // //             >\r\n// // //                 <div\r\n// // //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// // //                 >\r\n// // //                     <svg\r\n// // //                         width=\"25px\"\r\n// // //                         height=\"25px\"\r\n// // //                         viewBox=\"0 0 1024 1024\"\r\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                     >\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// // //                         ></path>\r\n// // //                         <path\r\n// // //                             fill=\"#000000\"\r\n// // //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// // //                         ></path>\r\n// // //                     </svg>\r\n// // //                 </div>\r\n// // //                 <p className=\"translate-x-2\">Go Back</p>\r\n// // //             </button>\r\n\r\n// // //             <div className=\"flex justify-end mb-4\">\r\n// // //                 <button\r\n// // //                     onClick={handleCallUser}\r\n// // //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// // //                 >\r\n// // //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //                 <button\r\n// // //                     onClick={handleCallUser}\r\n// // //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// // //                 >\r\n// // //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// // //                 </button>\r\n// // //             </div>\r\n\r\n// // //             <div className=\"flex flex-col flex-grow\">\r\n// // //                 {/* Fixed Size Message Container */}\r\n// // //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4  overflow-y-auto\">\r\n// // //                 {/* <div className=\"w-full max-w-xl mx-auto h-96 bg-gray-100 p-4 rounded-xl overflow-y-auto\"> */}\r\n\r\n// // //                     <div className=\"flex flex-col gap-2\">\r\n// // //                         {messages.length > 0 ? (\r\n// // //                             messages.map((message) => (\r\n// // //                                 <div\r\n// // //                                     key={message.id}\r\n// // //                                     className={`p-4 max-w-max rounded shadow ${\r\n// // //                                         message.from_user_id === userId\r\n// // //                                             ? 'bg-blue-200 self-end'\r\n// // //                                             : 'bg-white self-start'\r\n// // //                                     }`}\r\n// // //                                 >\r\n// // //                                     <p>{message.content}</p>\r\n// // //                                     {message.from_user_id === userId && (\r\n// // //                                         <button\r\n// // //                                             onClick={() => handleDeleteMessage(message.id)}\r\n// // //                                             className=\"text-red-500\"\r\n// // //                                         >\r\n// // //                                             Delete\r\n// // //                                         </button>\r\n// // //                                     )}\r\n// // //                                 </div>\r\n// // //                             ))\r\n// // //                         ) : (\r\n// // //                             <p>No messages yet.</p>\r\n// // //                         )}\r\n// // //                         <div ref={messageEndRef} />\r\n// // //                     </div>\r\n// // //                 </div>\r\n\r\n// // //                 <div className=\"flex mt-4\">\r\n// // //                     <input\r\n// // //                         type=\"text\"\r\n// // //                         value={messageText}\r\n// // //                         onChange={(e) => setMessageText(e.target.value)}\r\n// // //                         placeholder=\"Type your message...\"\r\n// // //                         className=\"w-full px-3 py-2 border rounded\"\r\n// // //                     />\r\n// // //                     <button\r\n// // //                     onClick={handleSendMessage}\r\n// // //                     class=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// // //                     >\r\n// // //                     Send\r\n// // //                     <svg\r\n// // //                         class=\"w-5 h-5\"\r\n// // //                         stroke=\"currentColor\"\r\n// // //                         stroke-width=\"1.5\"\r\n// // //                         viewBox=\"0 0 24 24\"\r\n// // //                         fill=\"none\"\r\n// // //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// // //                     >\r\n// // //                         <path\r\n// // //                         d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// // //                         stroke-linejoin=\"round\"\r\n// // //                         stroke-linecap=\"round\"\r\n// // //                         ></path>\r\n// // //                     </svg>\r\n// // //                     </button>\r\n\r\n// // //                 </div>\r\n// // //             </div>\r\n// // //         </div>\r\n// // //     );\r\n// // // };\r\n\r\n// // // export default ChatPage;\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import { useNavigate, useParams } from 'react-router-dom';\r\n// // import { io } from 'socket.io-client';\r\n// // import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// // import { PhoneIcon, VideoCameraIcon, PaperAirplaneIcon } from '@heroicons/react/solid';\r\n\r\n// // const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// // const ChatPage = () => {\r\n// //     const [messages, setMessages] = useState([]);\r\n// //     const [messageText, setMessageText] = useState('');\r\n// //     const messageEndRef = useRef(null);\r\n// //     const navigate = useNavigate();\r\n// //     const { receiverId } = useParams();\r\n\r\n// //     const userId = localStorage.getItem('userId');\r\n// //     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n// //     useEffect(() => {\r\n// //         if (!receiverId) return;\r\n\r\n// //         socket.on('connect', () => {\r\n// //             console.log('Connected to socket server');\r\n// //         });\r\n\r\n// //         socket.on('disconnect', () => {\r\n// //             console.log('Disconnected from socket server');\r\n// //         });\r\n\r\n// //         const fetchMessages = async () => {\r\n// //             const receiverId = localStorage.getItem('userId');\r\n// //             const senderId = localStorage.getItem('touserId');\r\n// //             try {\r\n// //                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n// //                 const result = await response.json();\r\n// //                 if (Array.isArray(result.messages)) {\r\n// //                     setMessages(result.messages);\r\n// //                 } else {\r\n// //                     throw new Error('Unexpected response format');\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('Failed to fetch messages:', error);\r\n// //             }\r\n// //         };\r\n\r\n// //         fetchMessages();\r\n\r\n// //         socket.emit('joinRoom', receiverId);\r\n\r\n// //         socket.on('message', (message) => {\r\n// //             console.log('Received message:', message);\r\n// //             setMessages((prevMessages) => [...prevMessages, message]);\r\n// //             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n// //         });\r\n\r\n// //         socket.on('messageDeleted', (messageId) => {\r\n// //             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n// //         });\r\n\r\n// //         return () => {\r\n// //             socket.off('connect');\r\n// //             socket.off('disconnect');\r\n// //             socket.off('message');\r\n// //             socket.off('messageDeleted');\r\n// //         };\r\n// //     }, [receiverId, userId]);\r\n\r\n// //     const handleSendMessage = async () => {\r\n// //         if (messageText.trim()) {\r\n// //             try {\r\n// //                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n// //                     method: 'POST',\r\n// //                     headers: {\r\n// //                         'Content-Type': 'application/json',\r\n// //                     },\r\n// //                     body: JSON.stringify({\r\n// //                         senderId: userId,\r\n// //                         receiverId: storedToUserId,\r\n// //                         text: messageText,\r\n// //                     }),\r\n// //                 });\r\n// //                 const result = await response.json();\r\n// //                 if (response.ok) {\r\n// //                     setMessageText(''); // Clear the input box\r\n// //                 } else {\r\n// //                     console.error('SendMessage Error:', result.message);\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('SendMessage Fetch Error:', error);\r\n// //             }\r\n// //         }\r\n// //     };\r\n\r\n// //     const handleDeleteMessage = async (messageId) => {\r\n// //         try {\r\n// //             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n// //                 method: 'POST',\r\n// //                 headers: {\r\n// //                     'Content-Type': 'application/json',\r\n// //                 },\r\n// //                 body: JSON.stringify({ messageId }),\r\n// //             });\r\n// //             const result = await response.json();\r\n// //             if (response.ok) {\r\n// //                 // Optionally, you can provide user feedback here\r\n// //             } else {\r\n// //                 console.error('DeleteMessage Error:', result.message);\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('DeleteMessage Fetch Error:', error);\r\n// //         }\r\n// //     };\r\n\r\n// //     const isMessageDeletable = (createdAt) => {\r\n// //         const messageTime = new Date(createdAt);\r\n// //         const currentTime = new Date();\r\n// //         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n// //         return diffMinutes <= 2;\r\n// //     };\r\n\r\n// //     const handleBack = () => {\r\n// //         navigate('/home');\r\n// //     };\r\n\r\n// //     const handleCallUser = () => {\r\n// //         console.log('Calling user:', receiverId);\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n// //             <div className=\"flex items-center mb-4\">\r\n// //                 <img\r\n// //                     src={defaultAvatar}\r\n// //                     alt=\"Avatar\"\r\n// //                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n// //                 />\r\n// //                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n// //             </div>\r\n\r\n// //             <button\r\n// //                 onClick={handleBack}\r\n// //                 type=\"button\"\r\n// //                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n// //             >\r\n// //                 <div\r\n// //                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n// //                 >\r\n// //                     <svg\r\n// //                         width=\"25px\"\r\n// //                         height=\"25px\"\r\n// //                         viewBox=\"0 0 1024 1024\"\r\n// //                         xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                     >\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n// //                         ></path>\r\n// //                         <path\r\n// //                             fill=\"#000000\"\r\n// //                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n// //                         ></path>\r\n// //                     </svg>\r\n// //                 </div>\r\n// //                 <p className=\"translate-x-2\">Go Back</p>\r\n// //             </button>\r\n\r\n// //             <div className=\"flex justify-end mb-4\">\r\n// //                 <button\r\n// //                     onClick={handleCallUser}\r\n// //                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n// //                 >\r\n// //                     <PhoneIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //                 <button\r\n// //                     onClick={handleCallUser}\r\n// //                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n// //                 >\r\n// //                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n// //                 </button>\r\n// //             </div>\r\n\r\n// //             <div className=\"flex flex-col flex-grow\">\r\n// //                 {/* Fixed Size Message Container */}\r\n// //                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n// //                     <div className=\"flex flex-col gap-2\">\r\n// //                         {messages.length > 0 ? (\r\n// //                             messages.map((message) => (\r\n// //                                 <div\r\n// //                                     key={message.id}\r\n// //                                     className={`p-4 max-w-max rounded shadow ${\r\n// //                                         message.from_user_id === userId\r\n// //                                             ? 'bg-blue-200 self-end'\r\n// //                                             : 'bg-white self-start'\r\n// //                                     }`}\r\n// //                                 >\r\n// //                                     <p>{message.content}</p>\r\n// //                                     {message.from_user_id === userId && isMessageDeletable(message.created_at) && (\r\n// //                                         <button\r\n// //                                             onClick={() => {\r\n// //                                                 handleDeleteMessage(message.id);\r\n// //                                                 setMessages((prevMessages) =>\r\n// //                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n// //                                                 );\r\n// //                                             }}\r\n// //                                             className=\"text-red-500\"\r\n// //                                         >\r\n// //                                             Delete\r\n// //                                         </button>\r\n// //                                     )}\r\n// //                                 </div>\r\n// //                             ))\r\n// //                         ) : (\r\n// //                             <p>No messages yet.</p>\r\n// //                         )}\r\n// //                         <div ref={messageEndRef} />\r\n// //                     </div>\r\n// //                 </div>\r\n\r\n// //                 <div className=\"flex mt-4\">\r\n// //                     <input\r\n// //                         type=\"text\"\r\n// //                         value={messageText}\r\n// //                         onChange={(e) => setMessageText(e.target.value)}\r\n// //                         placeholder=\"Type your message...\"\r\n// //                         className=\"w-full px-3 py-2 border rounded\"\r\n// //                     />\r\n// //                     <button\r\n// //                         onClick={() => {\r\n// //                             handleSendMessage();\r\n// //                             setMessages((prevMessages) => [\r\n// //                                 ...prevMessages,\r\n// //                                 {\r\n// //                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n// //                                     content: messageText,\r\n// //                                     from_user_id: userId,\r\n// //                                     created_at: new Date().toISOString(),\r\n// //                                 },\r\n// //                             ]);\r\n// //                         }}\r\n// //                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer text-gray-800 font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n// //                     >\r\n// //                         Send\r\n// //                         <svg\r\n// //                             className=\"w-5 h-5\"\r\n// //                             stroke=\"currentColor\"\r\n// //                             strokeWidth=\"1.5\"\r\n// //                             viewBox=\"0 0 24 24\"\r\n// //                             fill=\"none\"\r\n// //                             xmlns=\"http://www.w3.org/2000/svg\"\r\n// //                         >\r\n// //                             <path\r\n// //                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n// //                                 strokeLinejoin=\"round\"\r\n// //                                 strokeLinecap=\"round\"\r\n// //                             ></path>\r\n// //                         </svg>\r\n// //                     </button>\r\n// //                 </div>\r\n// //             </div>\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default ChatPage;\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import { io } from 'socket.io-client';\r\n// import defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\n// import { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\n// //This will ensure that the WebRTC APIs are correctly shimmed and compatible across different browsers.\r\n// import 'webrtc-adapter';\r\n\r\n\r\n// const socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\n// const ChatPage = () => {\r\n//     const [messages, setMessages] = useState([]);\r\n//     const [messageText, setMessageText] = useState('');\r\n//     const [reactions, setReactions] = useState({});\r\n//     const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n//     const messageEndRef = useRef(null);\r\n//     const navigate = useNavigate();\r\n//     const { receiverId } = useParams();\r\n\r\n//     const userId = localStorage.getItem('userId');\r\n//     const storedToUserId = localStorage.getItem('touserId');\r\n\r\n//     useEffect(() => {\r\n//         if (!receiverId) return;\r\n\r\n//         socket.on('connect', () => {\r\n//             console.log('Connected to socket server');\r\n//         });\r\n\r\n//         socket.on('disconnect', () => {\r\n//             console.log('Disconnected from socket server');\r\n//         });\r\n\r\n//         const fetchMessages = async () => {\r\n//             const receiverId = localStorage.getItem('userId');\r\n//             const senderId = localStorage.getItem('touserId');\r\n//             try {\r\n//                 const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${senderId}&toUserId=${receiverId}`);\r\n//                 const result = await response.json();\r\n//                 if (Array.isArray(result.messages)) {\r\n//                     setMessages(result.messages);\r\n//                     fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n//                 } else {\r\n//                     throw new Error('Unexpected response format');\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         const fetchReactions = async (messageIds) => {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/getReactions', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({ messageIds }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 setReactions(result.reactions);\r\n//             } catch (error) {\r\n//                 console.error('Failed to fetch reactions:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n\r\n//         socket.emit('joinRoom', receiverId);\r\n\r\n//         socket.on('message', (message) => {\r\n//             console.log('Received message:', message);\r\n//             setMessages((prevMessages) => [...prevMessages, message]);\r\n//             messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//         });\r\n\r\n//         socket.on('messageDeleted', (messageId) => {\r\n//             setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n//         });\r\n\r\n//         socket.on('reaction', (reaction) => {\r\n//             setReactions((prevReactions) => {\r\n//                 const updatedReactions = { ...prevReactions };\r\n//                 if (!updatedReactions[reaction.messageId]) {\r\n//                     updatedReactions[reaction.messageId] = [];\r\n//                 }\r\n//                 updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n//                     (r) => r.userId !== reaction.userId\r\n//                 );\r\n//                 updatedReactions[reaction.messageId].push(reaction);\r\n//                 return updatedReactions;\r\n//             });\r\n//         });\r\n\r\n//         return () => {\r\n//             socket.off('connect');\r\n//             socket.off('disconnect');\r\n//             socket.off('message');\r\n//             socket.off('messageDeleted');\r\n//             socket.off('reaction');\r\n//         };\r\n//     }, [receiverId, userId]);\r\n\r\n//     const handleSendMessage = async () => {\r\n//         if (messageText.trim()) {\r\n//             try {\r\n//                 const response = await fetch('http://localhost:3001/sendMessage', {\r\n//                     method: 'POST',\r\n//                     headers: {\r\n//                         'Content-Type': 'application/json',\r\n//                     },\r\n//                     body: JSON.stringify({\r\n//                         senderId: userId,\r\n//                         receiverId: storedToUserId,\r\n//                         text: messageText,\r\n//                     }),\r\n//                 });\r\n//                 const result = await response.json();\r\n//                 if (response.ok) {\r\n//                     setMessageText(''); // Clear the input box\r\n//                 } else {\r\n//                     console.error('SendMessage Error:', result.message);\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('SendMessage Fetch Error:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleDeleteMessage = async (messageId) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/deleteMessage', {\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId }),\r\n//             });\r\n//             const result = await response.json();\r\n//             if (response.ok) {\r\n//                 // Optionally, you can provide user feedback here\r\n//             } else {\r\n//                 console.error('DeleteMessage Error:', result.message);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('DeleteMessage Fetch Error:', error);\r\n//         }\r\n//     };\r\n\r\n//     // const handleAddReaction = async (messageId, reactionType) => {\r\n//     //     try {\r\n//     //         await fetch('http://localhost:3001/addReaction', {\r\n//     //             method: 'POST',\r\n//     //             headers: {\r\n//     //                 'Content-Type': 'application/json',\r\n//     //             },\r\n//     //             body: JSON.stringify({ messageId, userId, reactionType }),\r\n//     //         });\r\n//     //         socket.emit('reaction', { messageId, userId, reactionType });\r\n//     //     } catch (error) {\r\n//     //         console.error('AddReaction Fetch Error:', error);\r\n//     //     }\r\n//     // };\r\n//     const handleAddReaction = async (messageId, reactionType) => {\r\n//         try {\r\n//             const response = await fetch('http://localhost:3001/addReaction', {  // Ensure this URL is correct\r\n//                 method: 'POST',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json',\r\n//                 },\r\n//                 body: JSON.stringify({ messageId, userId, reactionType }),\r\n//             });\r\n    \r\n//             if (response.ok) {\r\n//                 const result = await response.json();\r\n//                 console.log('Reaction added successfully:', result);\r\n//             } else {\r\n//                 const errorText = await response.text();\r\n//                 console.error('AddReaction Error:', errorText);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('AddReaction Fetch Error:', error);\r\n//         }\r\n//     };\r\n    \r\n\r\n//     const isMessageDeletable = (createdAt) => {\r\n//         const messageTime = new Date(createdAt);\r\n//         const currentTime = new Date();\r\n//         const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n//         return diffMinutes <= 2;\r\n//     };\r\n\r\n//     const handleBack = () => {\r\n//         navigate('/home');\r\n//     };\r\n\r\n//     const handleCallUser = () => {\r\n//         console.log('Calling user:', receiverId);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n//             <div className=\"flex items-center mb-4\">\r\n//                 <img\r\n//                     src={defaultAvatar}\r\n//                     alt=\"Avatar\"\r\n//                     className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n//                 />\r\n//                 <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n//             </div>\r\n\r\n//             <button\r\n//                 onClick={handleBack}\r\n//                 type=\"button\"\r\n//                 className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n//             >\r\n//                 <div\r\n//                     className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n//                 >\r\n//                     <svg\r\n//                         width=\"25px\"\r\n//                         height=\"25px\"\r\n//                         viewBox=\"0 0 1024 1024\"\r\n//                         xmlns=\"http://www.w3.org/2000/svg\"\r\n//                     >\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n//                         ></path>\r\n//                         <path\r\n//                             fill=\"#000000\"\r\n//                             d=\"m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z\"\r\n//                         ></path>\r\n//                     </svg>\r\n//                 </div>\r\n//                 <p className=\"translate-x-2\">Go Back</p>\r\n//             </button>\r\n\r\n//             <div className=\"flex justify-end mb-4\">\r\n//                 <button\r\n//                     onClick={handleCallUser}\r\n//                     className=\"bg-green-500 text-white py-2 px-4 rounded mr-2\"\r\n//                 >\r\n//                     <PhoneIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//                 <button\r\n//                     onClick={handleCallUser}\r\n//                     className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n//                 >\r\n//                     <VideoCameraIcon className=\"w-6 h-6\" />\r\n//                 </button>\r\n//             </div>\r\n\r\n//             <div className=\"flex flex-col flex-grow\">\r\n//                 {/* Fixed Size Message Container */}\r\n//                 <div className=\"w-full max-w-4xl mx-auto h-96 bg-gray-100 p-4 overflow-y-auto\">\r\n//                     <div className=\"flex flex-col gap-2\">\r\n//                         {messages.length > 0 ? (\r\n//                             messages.map((message) => (\r\n//                                 <div\r\n//                                     key={message.id}\r\n//                                     className={`p-4 rounded-md ${message.from_user_id === userId ? 'bg-blue-300 self-end' : 'bg-gray-300 self-start'} relative`}\r\n//                                     onMouseEnter={() => setHoveredMessageId(message.id)}\r\n//                                     onMouseLeave={() => setHoveredMessageId(null)}\r\n//                                 >\r\n//                                     <div className=\"text-sm\">{message.content}</div>\r\n//                                     {hoveredMessageId === message.id && (\r\n//                                         <div className=\"absolute bottom-2 right-2 flex space-x-1\">\r\n//                                             {['👍', '❤️', '😂'].map((reaction) => (\r\n//                                                 <button\r\n//                                                     key={reaction}\r\n//                                                     onClick={() => handleAddReaction(message.id, reaction)}\r\n//                                                     className=\"text-xl\"\r\n//                                                 >\r\n//                                                     {reaction}\r\n//                                                 </button>\r\n//                                             ))}\r\n//                                         </div>\r\n//                                     )}\r\n//                                     <div className=\"flex space-x-2\">\r\n//                                         {reactions[message.id]?.map((reaction, index) => (\r\n//                                             <span key={index} className=\"text-xs\">{reaction.reactionType}</span>\r\n//                                         ))}\r\n//                                     </div>\r\n//                                     {isMessageDeletable(message.created_at) && (\r\n//                                         <button\r\n//                                             onClick={() => {\r\n//                                                 handleDeleteMessage(message.id);\r\n//                                                 setMessages((prevMessages) =>\r\n//                                                     prevMessages.filter((msg) => msg.id !== message.id)\r\n//                                                 );\r\n//                                             }}\r\n//                                             className=\"text-red-500 absolute top-2 right-2\"\r\n//                                         >\r\n//                                             Delete\r\n//                                         </button>\r\n//                                     )}\r\n//                                 </div>\r\n//                             ))\r\n//                         ) : (\r\n//                             <p>No messages yet.</p>\r\n//                         )}\r\n//                         <div ref={messageEndRef} />\r\n//                     </div>\r\n//                 </div>\r\n\r\n//                 <div className=\"flex mt-4\">\r\n//                     <input\r\n//                         type=\"text\"\r\n//                         value={messageText}\r\n//                         onChange={(e) => setMessageText(e.target.value)}\r\n//                         placeholder=\"Type your message...\"\r\n//                         className=\"w-full px-3 py-2 border rounded\"\r\n//                     />\r\n//                     <button\r\n//                         onClick={() => {\r\n//                             handleSendMessage();\r\n//                             setMessages((prevMessages) => [\r\n//                                 ...prevMessages,\r\n//                                 {\r\n//                                     id: new Date().toISOString(), // Temporary ID, should be replaced by server ID\r\n//                                     content: messageText,\r\n//                                     from_user_id: userId,\r\n//                                     created_at: new Date().toISOString(),\r\n//                                 },\r\n//                             ]);\r\n//                         }}\r\n//                         className=\"flex items-center bg-blue-500 text-white gap-1 px-4 py-2 cursor-pointer font-semibold tracking-widest rounded-md hover:bg-blue-400 duration-300 hover:gap-2 hover:translate-x-3\"\r\n//                     >\r\n//                         Send\r\n//                         <svg\r\n//                             className=\"w-5 h-5\"\r\n//                             stroke=\"currentColor\"\r\n//                             strokeWidth=\"1.5\"\r\n//                             viewBox=\"0 0 24 24\"\r\n//                             fill=\"none\"\r\n//                             xmlns=\"http://www.w3.org/2000/svg\"\r\n//                         >\r\n//                             <path\r\n//                                 d=\"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5\"\r\n//                                 strokeLinejoin=\"round\"\r\n//                                 strokeLinecap=\"round\"\r\n//                             ></path>\r\n//                         </svg>\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ChatPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'peerjs';\r\nimport defaultAvatar from '../assets/user (1).png'; // Adjust path as necessary\r\nimport { PhoneIcon, VideoCameraIcon } from '@heroicons/react/solid';\r\nimport 'webrtc-adapter'; // For WebRTC compatibility\r\n\r\nconst socket = io('http://localhost:3001'); // Replace with your server URL\r\n\r\nconst ChatPage = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [messageText, setMessageText] = useState('');\r\n    const [reactions, setReactions] = useState({});\r\n    const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n    const [myStream, setMyStream] = useState(null);\r\n    const [remoteStream, setRemoteStream] = useState(null);\r\n    const [callActive, setCallActive] = useState(false);\r\n    const [currentCall, setCurrentCall] = useState(null);\r\n    const messageEndRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    const { receiverId } = useParams();\r\n    const userId = localStorage.getItem('userId');\r\n    const storedToUserId = localStorage.getItem('touserId');\r\n\r\n    // Initialize PeerJS\r\n    const peer = new Peer(userId, { host: 'localhost', port: 3001, path: '/peerjs' });\r\n\r\n    useEffect(() => {\r\n        if (!receiverId) return;\r\n\r\n        // Setup socket connection\r\n        socket.on('connect', () => {\r\n            console.log('Connected to socket server');\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('Disconnected from socket server');\r\n        });\r\n\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await fetch(`http://localhost:3001/getMessages?fromUserId=${storedToUserId}&toUserId=${userId}`);\r\n                const result = await response.json();\r\n                if (Array.isArray(result.messages)) {\r\n                    setMessages(result.messages);\r\n                    fetchReactions(result.messages.map(msg => msg.id)); // Fetch reactions for these messages\r\n                } else {\r\n                    throw new Error('Unexpected response format');\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to fetch messages:', error);\r\n            }\r\n        };\r\n\r\n        const fetchReactions = async (messageIds) => {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/getReactions', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ messageIds }),\r\n                });\r\n                const result = await response.json();\r\n                setReactions(result.reactions);\r\n            } catch (error) {\r\n                console.error('Failed to fetch reactions:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        socket.emit('joinRoom', receiverId);\r\n\r\n        socket.on('message', (message) => {\r\n            console.log('Received message:', message);\r\n            setMessages((prevMessages) => [...prevMessages, message]);\r\n            messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n        });\r\n\r\n        socket.on('messageDeleted', (messageId) => {\r\n            setMessages((prevMessages) => prevMessages.filter((msg) => msg.id !== messageId));\r\n        });\r\n\r\n        socket.on('reaction', (reaction) => {\r\n            setReactions((prevReactions) => {\r\n                const updatedReactions = { ...prevReactions };\r\n                if (!updatedReactions[reaction.messageId]) {\r\n                    updatedReactions[reaction.messageId] = [];\r\n                }\r\n                updatedReactions[reaction.messageId] = updatedReactions[reaction.messageId].filter(\r\n                    (r) => r.userId !== reaction.userId\r\n                );\r\n                updatedReactions[reaction.messageId].push(reaction);\r\n                return updatedReactions;\r\n            });\r\n        });\r\n\r\n        // Setup WebRTC\r\n        const getUserMedia = async () => {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                setMyStream(stream);\r\n            } catch (error) {\r\n                console.error('Error accessing media devices.', error);\r\n            }\r\n        };\r\n\r\n        getUserMedia();\r\n\r\n        peer.on('call', (call) => {\r\n            call.answer(myStream);\r\n            call.on('stream', (stream) => {\r\n                setRemoteStream(stream);\r\n                setCallActive(true);\r\n                setCurrentCall(call);\r\n            });\r\n        });\r\n\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('disconnect');\r\n            socket.off('message');\r\n            socket.off('messageDeleted');\r\n            socket.off('reaction');\r\n            peer.destroy();\r\n        };\r\n    }, [receiverId, userId, myStream, peer]);\r\n\r\n    const handleSendMessage = async () => {\r\n        if (messageText.trim()) {\r\n            try {\r\n                const response = await fetch('http://localhost:3001/sendMessage', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        senderId: userId,\r\n                        receiverId: storedToUserId,\r\n                        text: messageText,\r\n                    }),\r\n                });\r\n                const result = await response.json();\r\n                if (response.ok) {\r\n                    setMessageText(''); // Clear the input box\r\n                } else {\r\n                    console.error('SendMessage Error:', result.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('SendMessage Fetch Error:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteMessage = async (messageId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/deleteMessage', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ messageId }),\r\n            });\r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                // Optionally, you can provide user feedback here\r\n            } else {\r\n                console.error('DeleteMessage Error:', result.message);\r\n            }\r\n        } catch (error) {\r\n            console.error('DeleteMessage Fetch Error:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddReaction = async (messageId, reactionType) => {\r\n        try {\r\n            const response = await fetch('http://localhost:3001/addReaction', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ messageId, userId, reactionType }),\r\n            });\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                console.log('Reaction added successfully:', result);\r\n            } else {\r\n                const errorText = await response.text();\r\n                console.error('AddReaction Error:', errorText);\r\n            }\r\n        } catch (error) {\r\n            console.error('AddReaction Fetch Error:', error);\r\n        }\r\n    };\r\n\r\n    const isMessageDeletable = (createdAt) => {\r\n        const messageTime = new Date(createdAt);\r\n        const currentTime = new Date();\r\n        const diffMinutes = (currentTime - messageTime) / (1000 * 60); // Difference in minutes\r\n        return diffMinutes <= 2;\r\n    };\r\n\r\n    const handleBack = () => {\r\n        navigate('/home');\r\n    };\r\n\r\n    const handleCallUser = () => {\r\n        if (callActive) {\r\n            handleEndCall();\r\n        } else {\r\n            // Initiate voice call\r\n            const call = peer.call(receiverId, myStream);\r\n            call.on('stream', (stream) => {\r\n                setRemoteStream(stream);\r\n                setCallActive(true);\r\n                setCurrentCall(call);\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleEndCall = () => {\r\n        if (currentCall) {\r\n            currentCall.close();\r\n            setCallActive(false);\r\n            setRemoteStream(null);\r\n            setCurrentCall(null);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex flex-col bg-gradient-to-r from-slate-300 to-slate-500 p-4\">\r\n            <div className=\"flex items-center mb-4\">\r\n                <img\r\n                    src={defaultAvatar}\r\n                    alt=\"Avatar\"\r\n                    className=\"w-12 h-12 rounded-full mr-4 border-2 border-gray-300\"\r\n                />\r\n                <h1 className=\"text-2xl font-bold\">Chat</h1>\r\n            </div>\r\n\r\n            <button\r\n                onClick={handleBack}\r\n                type=\"button\"\r\n                className=\"bg-white text-center w-48 rounded-2xl h-14 relative font-sans text-black text-xl font-semibold group justify-end mt-(-4)\"\r\n            >\r\n                <div\r\n                    className=\"bg-green-400 rounded-xl h-12 w-1/4 flex items-center justify-center absolute left-1 top-[4px] group-hover:w-[184px] z-10 duration-500\"\r\n                >\r\n                    <svg\r\n                        width=\"25px\"\r\n                        height=\"25px\"\r\n                        viewBox=\"0 0 1024 1024\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z\"\r\n                        ></path>\r\n                        <path\r\n                            fill=\"#000000\"\r\n                            d=\"m237.248 512 265.408 265.344a32 32 0 0 0 45.568-45.28L282.4 496h575.168a32 32 0 0 0 0-64H282.4l265.824-265.824a32 32 0 1 0-45.568-45.28L224 448a32 32 0 0 0 0 64z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n                Back\r\n            </button>\r\n\r\n            <div className=\"flex justify-between items-center mb-2\">\r\n                <button\r\n                    onClick={handleCallUser}\r\n                    className=\"bg-blue-500 text-white p-2 rounded-lg flex items-center\"\r\n                >\r\n                    <PhoneIcon className=\"w-6 h-6 mr-2\" />\r\n                    {callActive ? 'End Call' : 'Start Call'}\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"overflow-auto flex-1 mb-2\">\r\n                <div className=\"flex flex-col-reverse\">\r\n                    {messages.map((message) => (\r\n                        <div\r\n                            key={message.id}\r\n                            className={`p-2 my-2 rounded-lg ${\r\n                                message.from_user_id === userId\r\n                                    ? 'bg-blue-500 text-white self-end'\r\n                                    : 'bg-gray-300 text-black self-start'\r\n                            }`}\r\n                            onMouseEnter={() => setHoveredMessageId(message.id)}\r\n                            onMouseLeave={() => setHoveredMessageId(null)}\r\n                        >\r\n                            <p>{message.content}</p>\r\n                            {hoveredMessageId === message.id && isMessageDeletable(message.created_at) && (\r\n                                <button\r\n                                    onClick={() => handleDeleteMessage(message.id)}\r\n                                    className=\"text-red-500 mt-1\"\r\n                                >\r\n                                    Delete\r\n                                </button>\r\n                            )}\r\n                            {reactions[message.id] && reactions[message.id].map((reaction) => (\r\n                                <span key={reaction.userId} className=\"mr-2\">\r\n                                    {reaction.reactionType}\r\n                                </span>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                    <div ref={messageEndRef} />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={messageText}\r\n                    onChange={(e) => setMessageText(e.target.value)}\r\n                    className=\"flex-1 p-2 border rounded-lg mr-2\"\r\n                />\r\n                <button\r\n                    onClick={handleSendMessage}\r\n                    className=\"bg-blue-500 text-white p-2 rounded-lg\"\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n\r\n            {callActive && (\r\n                <div className=\"fixed bottom-0 right-0 p-4 bg-white border border-gray-300 rounded-lg shadow-lg\">\r\n                    <h2 className=\"text-xl font-semibold mb-2\">Call in Progress</h2>\r\n                    <div className=\"relative\">\r\n                        <video\r\n                            ref={(video) => {\r\n                                if (video) {\r\n                                    video.srcObject = myStream;\r\n                                    video.play();\r\n                                }\r\n                            }}\r\n                            className=\"w-32 h-32\"\r\n                            muted\r\n                        />\r\n                        <video\r\n                            ref={(video) => {\r\n                                if (video) {\r\n                                    video.srcObject = remoteStream;\r\n                                    video.play();\r\n                                }\r\n                            }}\r\n                            className=\"absolute top-0 left-0 w-32 h-32\"\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        onClick={handleEndCall}\r\n                        className=\"mt-4 bg-red-500 text-white py-2 px-4 rounded\"\r\n                    >\r\n                        End Call\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,aAAa,MAAM,wBAAwB,CAAC,CAAC;AACpD,SAASC,SAAS,EAAEC,eAAe,QAAQ,wBAAwB;AACnE,OAAO,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,MAAM,GAAGP,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2B,UAAU,EAAEC,aAAa,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC6B,WAAW,EAAEC,cAAc,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM+B,aAAa,GAAG7B,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM8B,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAE8B;EAAW,CAAC,GAAG7B,SAAS,CAAC,CAAC;EAClC,MAAM8B,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,MAAMC,cAAc,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;;EAEvD;EACA,MAAME,IAAI,GAAG,IAAIhC,IAAI,CAAC4B,MAAM,EAAE;IAAEK,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC;EAEjFxC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACgC,UAAU,EAAE;;IAEjB;IACArB,MAAM,CAAC8B,EAAE,CAAC,SAAS,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC7C,CAAC,CAAC;IAEFhC,MAAM,CAAC8B,EAAE,CAAC,YAAY,EAAE,MAAM;MAC1BC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAClD,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgDV,cAAc,aAAaH,MAAM,EAAE,CAAC;QACjH,MAAMc,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpC,IAAIC,KAAK,CAACC,OAAO,CAACH,MAAM,CAACjC,QAAQ,CAAC,EAAE;UAChCC,WAAW,CAACgC,MAAM,CAACjC,QAAQ,CAAC;UAC5BqC,cAAc,CAACJ,MAAM,CAACjC,QAAQ,CAACsC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QACjD;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZd,OAAO,CAACc,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IAED,MAAML,cAAc,GAAG,MAAOM,UAAU,IAAK;MACzC,IAAI;QACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;UAC/DY,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEL;UAAW,CAAC;QACvC,CAAC,CAAC;QACF,MAAMV,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpC7B,YAAY,CAAC4B,MAAM,CAAC7B,SAAS,CAAC;MAClC,CAAC,CAAC,OAAOsC,KAAK,EAAE;QACZd,OAAO,CAACc,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IAEDZ,aAAa,CAAC,CAAC;IAEfjC,MAAM,CAACoD,IAAI,CAAC,UAAU,EAAE/B,UAAU,CAAC;IAEnCrB,MAAM,CAAC8B,EAAE,CAAC,SAAS,EAAGuB,OAAO,IAAK;MAAA,IAAAC,qBAAA;MAC9BvB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEqB,OAAO,CAAC;MACzCjD,WAAW,CAAEmD,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,OAAO,CAAC,CAAC;MACzD,CAAAC,qBAAA,GAAAnC,aAAa,CAACqC,OAAO,cAAAF,qBAAA,uBAArBA,qBAAA,CAAuBG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACjE,CAAC,CAAC;IAEF1D,MAAM,CAAC8B,EAAE,CAAC,gBAAgB,EAAG6B,SAAS,IAAK;MACvCvD,WAAW,CAAEmD,YAAY,IAAKA,YAAY,CAACK,MAAM,CAAElB,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKgB,SAAS,CAAC,CAAC;IACrF,CAAC,CAAC;IAEF3D,MAAM,CAAC8B,EAAE,CAAC,UAAU,EAAG+B,QAAQ,IAAK;MAChCrD,YAAY,CAAEsD,aAAa,IAAK;QAC5B,MAAMC,gBAAgB,GAAG;UAAE,GAAGD;QAAc,CAAC;QAC7C,IAAI,CAACC,gBAAgB,CAACF,QAAQ,CAACF,SAAS,CAAC,EAAE;UACvCI,gBAAgB,CAACF,QAAQ,CAACF,SAAS,CAAC,GAAG,EAAE;QAC7C;QACAI,gBAAgB,CAACF,QAAQ,CAACF,SAAS,CAAC,GAAGI,gBAAgB,CAACF,QAAQ,CAACF,SAAS,CAAC,CAACC,MAAM,CAC7EI,CAAC,IAAKA,CAAC,CAAC1C,MAAM,KAAKuC,QAAQ,CAACvC,MACjC,CAAC;QACDyC,gBAAgB,CAACF,QAAQ,CAACF,SAAS,CAAC,CAACM,IAAI,CAACJ,QAAQ,CAAC;QACnD,OAAOE,gBAAgB;MAC3B,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACH,YAAY,CAAC;UAAEI,KAAK,EAAE;QAAK,CAAC,CAAC;QACzE1D,WAAW,CAACuD,MAAM,CAAC;MACvB,CAAC,CAAC,OAAOtB,KAAK,EAAE;QACZd,OAAO,CAACc,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IAEDqB,YAAY,CAAC,CAAC;IAEdxC,IAAI,CAACI,EAAE,CAAC,MAAM,EAAGyC,IAAI,IAAK;MACtBA,IAAI,CAACC,MAAM,CAAC7D,QAAQ,CAAC;MACrB4D,IAAI,CAACzC,EAAE,CAAC,QAAQ,EAAGqC,MAAM,IAAK;QAC1BrD,eAAe,CAACqD,MAAM,CAAC;QACvBnD,aAAa,CAAC,IAAI,CAAC;QACnBE,cAAc,CAACqD,IAAI,CAAC;MACxB,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACTvE,MAAM,CAACyE,GAAG,CAAC,SAAS,CAAC;MACrBzE,MAAM,CAACyE,GAAG,CAAC,YAAY,CAAC;MACxBzE,MAAM,CAACyE,GAAG,CAAC,SAAS,CAAC;MACrBzE,MAAM,CAACyE,GAAG,CAAC,gBAAgB,CAAC;MAC5BzE,MAAM,CAACyE,GAAG,CAAC,UAAU,CAAC;MACtB/C,IAAI,CAACgD,OAAO,CAAC,CAAC;IAClB,CAAC;EACL,CAAC,EAAE,CAACrD,UAAU,EAAEC,MAAM,EAAEX,QAAQ,EAAEe,IAAI,CAAC,CAAC;EAExC,MAAMiD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAItE,WAAW,CAACuE,IAAI,CAAC,CAAC,EAAE;MACpB,IAAI;QACA,MAAM1C,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;UAC9DY,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjB0B,QAAQ,EAAEvD,MAAM;YAChBD,UAAU,EAAEI,cAAc;YAC1BqD,IAAI,EAAEzE;UACV,CAAC;QACL,CAAC,CAAC;QACF,MAAM+B,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpC,IAAIH,QAAQ,CAAC6C,EAAE,EAAE;UACbzE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB,CAAC,MAAM;UACHyB,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAET,MAAM,CAACiB,OAAO,CAAC;QACvD;MACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;QACZd,OAAO,CAACc,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ;EACJ,CAAC;EAED,MAAMmC,mBAAmB,GAAG,MAAOrB,SAAS,IAAK;IAC7C,IAAI;MACA,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAChEY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEQ;QAAU,CAAC;MACtC,CAAC,CAAC;MACF,MAAMvB,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,IAAIH,QAAQ,CAAC6C,EAAE,EAAE;QACb;MAAA,CACH,MAAM;QACHhD,OAAO,CAACc,KAAK,CAAC,sBAAsB,EAAET,MAAM,CAACiB,OAAO,CAAC;MACzD;IACJ,CAAC,CAAC,OAAOR,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD;EACJ,CAAC;EAED,MAAMoC,iBAAiB,GAAG,MAAAA,CAAOtB,SAAS,EAAEuB,YAAY,KAAK;IACzD,IAAI;MACA,MAAMhD,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAC9DY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEQ,SAAS;UAAErC,MAAM;UAAE4D;QAAa,CAAC;MAC5D,CAAC,CAAC;MACF,IAAIhD,QAAQ,CAAC6C,EAAE,EAAE;QACb,MAAM3C,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCN,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEI,MAAM,CAAC;MACvD,CAAC,MAAM;QACH,MAAM+C,SAAS,GAAG,MAAMjD,QAAQ,CAAC4C,IAAI,CAAC,CAAC;QACvC/C,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAEsC,SAAS,CAAC;MAClD;IACJ,CAAC,CAAC,OAAOtC,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAMuC,kBAAkB,GAAIC,SAAS,IAAK;IACtC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IACvC,MAAMG,WAAW,GAAG,IAAID,IAAI,CAAC,CAAC;IAC9B,MAAME,WAAW,GAAG,CAACD,WAAW,GAAGF,WAAW,KAAK,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;IAC/D,OAAOG,WAAW,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBtE,QAAQ,CAAC,OAAO,CAAC;EACrB,CAAC;EAED,MAAMuE,cAAc,GAAGA,CAAA,KAAM;IACzB,IAAI5E,UAAU,EAAE;MACZ6E,aAAa,CAAC,CAAC;IACnB,CAAC,MAAM;MACH;MACA,MAAMrB,IAAI,GAAG7C,IAAI,CAAC6C,IAAI,CAAClD,UAAU,EAAEV,QAAQ,CAAC;MAC5C4D,IAAI,CAACzC,EAAE,CAAC,QAAQ,EAAGqC,MAAM,IAAK;QAC1BrD,eAAe,CAACqD,MAAM,CAAC;QACvBnD,aAAa,CAAC,IAAI,CAAC;QACnBE,cAAc,CAACqD,IAAI,CAAC;MACxB,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAMqB,aAAa,GAAGA,CAAA,KAAM;IACxB,IAAI3E,WAAW,EAAE;MACbA,WAAW,CAAC4E,KAAK,CAAC,CAAC;MACnB7E,aAAa,CAAC,KAAK,CAAC;MACpBF,eAAe,CAAC,IAAI,CAAC;MACrBI,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ,CAAC;EAED,oBACInB,OAAA;IAAK+F,SAAS,EAAC,6EAA6E;IAAAC,QAAA,gBACxFhG,OAAA;MAAK+F,SAAS,EAAC,wBAAwB;MAAAC,QAAA,gBACnChG,OAAA;QACIiG,GAAG,EAAErG,aAAc;QACnBsG,GAAG,EAAC,QAAQ;QACZH,SAAS,EAAC;MAAsD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC,eACFtG,OAAA;QAAI+F,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eAENtG,OAAA;MACIuG,OAAO,EAAEZ,UAAW;MACpBa,IAAI,EAAC,QAAQ;MACbT,SAAS,EAAC,0HAA0H;MAAAC,QAAA,gBAEpIhG,OAAA;QACI+F,SAAS,EAAC,uIAAuI;QAAAC,QAAA,eAEjJhG,OAAA;UACIyG,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC,MAAM;UACbC,OAAO,EAAC,eAAe;UACvBC,KAAK,EAAC,4BAA4B;UAAAZ,QAAA,gBAElChG,OAAA;YACI6G,IAAI,EAAC,SAAS;YACdC,CAAC,EAAC;UAAqD;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,eACRtG,OAAA;YACI6G,IAAI,EAAC,SAAS;YACdC,CAAC,EAAC;UAAmK;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,QAEV;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETtG,OAAA;MAAK+F,SAAS,EAAC,wCAAwC;MAAAC,QAAA,eACnDhG,OAAA;QACIuG,OAAO,EAAEX,cAAe;QACxBG,SAAS,EAAC,yDAAyD;QAAAC,QAAA,gBAEnEhG,OAAA,CAACH,SAAS;UAACkG,SAAS,EAAC;QAAc;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACrCtF,UAAU,GAAG,UAAU,GAAG,YAAY;MAAA;QAAAmF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAENtG,OAAA;MAAK+F,SAAS,EAAC,2BAA2B;MAAAC,QAAA,eACtChG,OAAA;QAAK+F,SAAS,EAAC,uBAAuB;QAAAC,QAAA,GACjC5F,QAAQ,CAACsC,GAAG,CAAEY,OAAO,iBAClBtD,OAAA;UAEI+F,SAAS,EAAE,uBACPzC,OAAO,CAACyD,YAAY,KAAKxF,MAAM,GACzB,iCAAiC,GACjC,mCAAmC,EAC1C;UACHyF,YAAY,EAAEA,CAAA,KAAMrG,mBAAmB,CAAC2C,OAAO,CAACV,EAAE,CAAE;UACpDqE,YAAY,EAAEA,CAAA,KAAMtG,mBAAmB,CAAC,IAAI,CAAE;UAAAqF,QAAA,gBAE9ChG,OAAA;YAAAgG,QAAA,EAAI1C,OAAO,CAAC4D;UAAO;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACvB5F,gBAAgB,KAAK4C,OAAO,CAACV,EAAE,IAAIyC,kBAAkB,CAAC/B,OAAO,CAAC6D,UAAU,CAAC,iBACtEnH,OAAA;YACIuG,OAAO,EAAEA,CAAA,KAAMtB,mBAAmB,CAAC3B,OAAO,CAACV,EAAE,CAAE;YAC/CmD,SAAS,EAAC,mBAAmB;YAAAC,QAAA,EAChC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACX,EACA9F,SAAS,CAAC8C,OAAO,CAACV,EAAE,CAAC,IAAIpC,SAAS,CAAC8C,OAAO,CAACV,EAAE,CAAC,CAACF,GAAG,CAAEoB,QAAQ,iBACzD9D,OAAA;YAA4B+F,SAAS,EAAC,MAAM;YAAAC,QAAA,EACvClC,QAAQ,CAACqB;UAAY,GADfrB,QAAQ,CAACvC,MAAM;YAAA4E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEpB,CACT,CAAC;QAAA,GAtBGhD,OAAO,CAACV,EAAE;UAAAuD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAuBd,CACR,CAAC,eACFtG,OAAA;UAAKoH,GAAG,EAAEhG;QAAc;UAAA+E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENtG,OAAA;MAAK+F,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9BhG,OAAA;QACIwG,IAAI,EAAC,MAAM;QACXa,KAAK,EAAE/G,WAAY;QACnBgH,QAAQ,EAAGC,CAAC,IAAKhH,cAAc,CAACgH,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAChDtB,SAAS,EAAC;MAAmC;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eACFtG,OAAA;QACIuG,OAAO,EAAE3B,iBAAkB;QAC3BmB,SAAS,EAAC,uCAAuC;QAAAC,QAAA,EACpD;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAELtF,UAAU,iBACPhB,OAAA;MAAK+F,SAAS,EAAC,iFAAiF;MAAAC,QAAA,gBAC5FhG,OAAA;QAAI+F,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChEtG,OAAA;QAAK+F,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACrBhG,OAAA;UACIoH,GAAG,EAAGK,KAAK,IAAK;YACZ,IAAIA,KAAK,EAAE;cACPA,KAAK,CAACC,SAAS,GAAG9G,QAAQ;cAC1B6G,KAAK,CAACE,IAAI,CAAC,CAAC;YAChB;UACJ,CAAE;UACF5B,SAAS,EAAC,WAAW;UACrB6B,KAAK;QAAA;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,eACFtG,OAAA;UACIoH,GAAG,EAAGK,KAAK,IAAK;YACZ,IAAIA,KAAK,EAAE;cACPA,KAAK,CAACC,SAAS,GAAG5G,YAAY;cAC9B2G,KAAK,CAACE,IAAI,CAAC,CAAC;YAChB;UACJ,CAAE;UACF5B,SAAS,EAAC;QAAiC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNtG,OAAA;QACIuG,OAAO,EAAEV,aAAc;QACvBE,SAAS,EAAC,8CAA8C;QAAAC,QAAA,EAC3D;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACnG,EAAA,CAvVID,QAAQ;EAAA,QAUOV,WAAW,EACLC,SAAS;AAAA;AAAAoI,EAAA,GAX9B3H,QAAQ;AAyVd,eAAeA,QAAQ;AAAC,IAAA2H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}